(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

Vue.component('wpcfto_color', {
  template: "\n        <div class=\"wpcfto_generic_field wpcfto_generic_field_color\">\n        \n            <wpcfto_fields_aside_before :fields=\"fields\" :field_label=\"field_label\"></wpcfto_fields_aside_before>\n            \n            <div class=\"wpcfto-field-content\">\n                        \n                <div class=\"stm_colorpicker_wrapper\" v-bind:class=\"['picker-position-' + position]\">\n\n                    <span v-bind:style=\"{'background-color': input_value}\" @click=\"$refs.field_name.focus()\"></span>\n    \n                    <input type=\"text\"\n                           v-bind:name=\"field_name\"\n                           v-bind:placeholder=\"field_label\"\n                           v-bind:id=\"field_id\"\n                           v-model=\"input_value\"\n                           ref=\"field_name\"\n                    />\n    \n                    <div @click=\"changeValueFormat\">\n                        <slider-picker ref=\"colorPicker\" v-model=\"value\"></slider-picker>\n                    </div>\n\n                      <a href=\"#\" @click=\"resetValue\" v-if=\"input_value\" class=\"wpcfto_generic_field_color__clear\">\n                        <i class=\"fa fa-times\"></i>\n                      </a>\n    \n                </div>\n            \n            </div>\n            \n            <wpcfto_fields_aside_after :fields=\"fields\"></wpcfto_fields_aside_after>\n            \n        </div>\n    ",
  props: ['fields', 'field_label', 'field_name', 'field_id', 'field_value', 'default_value', 'format'],
  components: {
    'slider-picker': VueColor.Chrome
  },
  data: function data() {
    return {
      input_value: '',
      position: 'bottom',
      current_format: 'hex',
      value: {
        hex: '#000000',
        rgba: {
          r: 0,
          g: 0,
          b: 0,
          a: 1
        },
        hsl: {
          a: 1,
          h: 1,
          l: 0,
          s: 1
        }
      }
    };
  },
  created: function created() {
    if (this.fields.position) {
      this.position = this.fields.position;
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      _this.updatePickerValue(_this.field_value);
    });
  },
  methods: {
    resetValue: function resetValue(event) {
      event.preventDefault();
      this.updateInputValue(this.default_value);
      this.updatePickerValue(this.default_value);
    },
    updatePickerValue: function updatePickerValue(value) {
      if (typeof value === 'string') {
        if (value.indexOf('rgb') !== -1) {
          var colors = value.replace('rgba(', '').slice(0, -1).split(',');
          this.current_format = 'rgba';
          this.value = {
            r: colors[0],
            g: colors[1],
            b: colors[2],
            a: colors[3],
            rgba: {
              r: colors[0],
              g: colors[1],
              b: colors[2],
              a: colors[3]
            }
          };
          this.$refs.colorPicker.fieldsIndex = 1;
        } else if (value.indexOf('hsl') !== -1) {
          var colors = value.replace('hsla(', '').slice(0, -1).split(',');
          this.current_format = 'hsl';
          this.value = {
            hsl: {
              h: colors[0],
              s: colors[1].replace('%', '') / 100,
              l: colors[2].replace('%', '') / 100,
              a: colors[3]
            }
          };
          this.$refs.colorPicker.fieldsIndex = 2;
        } else if (value.indexOf('#') !== -1) {
          this.current_format = 'hex';
          this.value = {
            hex: value
          };
          this.$refs.colorPicker.fieldsIndex = 0;
        }

        this.input_value = value;
      }
    },
    getValueFormat: function getValueFormat(value) {
      var format = 'hex';

      if (typeof value === 'string') {
        if (value.indexOf('rgb') !== -1) {
          format = 'rgba';
        } else if (value.indexOf('hsl') !== -1) {
          format = 'hsl';
        } else if (value.indexOf('#') !== -1) {
          format = 'hex';
        }
      }

      return format;
    },
    updateInputValue: function updateInputValue(value) {
      this.$set(this, 'input_value', value);
      this.$emit('wpcfto-get-value', value);
    },
    changeValueFormat: function changeValueFormat(event) {
      if (event.target.classList.contains('vc-chrome-toggle-icon') || event.target.closest('.vc-chrome-toggle-icon')) {
        var wrapper = event.target.closest('.vc-chrome-fields-wrap');

        if (wrapper) {
          var fields = wrapper.querySelectorAll('.vc-chrome-fields');

          var _iterator = _createForOfIteratorHelper(fields),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var field = _step.value;

              if (field.style.display !== 'none') {
                var format = field.querySelector('.vc-input__label').textContent.toLowerCase().trim();
                var colorValue = '';

                switch (format) {
                  case 'hex':
                    this.current_format = 'hex';
                    colorValue = field.querySelector('.vc-input__input').getAttribute('aria-label');
                    break;

                  case 'r':
                    var rgba = field.querySelectorAll('.vc-input__input');
                    this.current_format = 'rgba';
                    colorValue = 'rgba(' + rgba[0].getAttribute('aria-label') + ',' + rgba[1].getAttribute('aria-label') + ',' + rgba[2].getAttribute('aria-label') + ',' + rgba[3].getAttribute('aria-label') + ')';
                    break;

                  case 'h':
                    var hsla = field.querySelectorAll('.vc-input__input');
                    this.current_format = 'hsla';
                    colorValue = 'hsla(' + hsla[0].getAttribute('aria-label') + ',' + hsla[1].getAttribute('aria-label') + ',' + hsla[2].getAttribute('aria-label') + ',' + hsla[3].getAttribute('aria-label') + ')';
                    break;
                }

                this.updateInputValue(colorValue);
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    },
    hexToRgba: function hexToRgba(hex) {
      var c;
      hex = hex.trim();

      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
        c = hex.substring(1).split('');

        if (c.length === 3) {
          c = [c[0], c[0], c[1], c[1], c[2], c[2]];
        }

        var r = parseInt(c[0] + c[1], 16);
        var g = parseInt(c[2] + c[3], 16);
        var b = parseInt(c[4] + c[5], 16);
        return {
          r: r,
          g: g,
          b: b,
          a: 1
        };
      }

      return null;
    }
  },
  watch: {
    input_value: function input_value(value) {
      var _this2 = this;

      var format = this.format;
      console.log(format);

      if (format === 'rgba' && typeof value === 'string' && value.startsWith('#')) {
        var rgba = this.hexToRgba(value);

        if (rgba) {
          var rgbaStr = "rgba(".concat(rgba.r, ",").concat(rgba.g, ",").concat(rgba.b, ",").concat(rgba.a, ")");
          this.$nextTick(function () {
            _this2.input_value = rgbaStr;

            _this2.$emit('wpcfto-get-value', rgbaStr);
          });
          return;
        }
      }

      this.$emit('wpcfto-get-value', value);
    },
    value: function value(_value) {
      if (_value.rgba && _value.rgba.a !== undefined && _value.rgba.a < 1 && this.current_format === 'hex') {
        this.current_format = 'rgba';
      }

      switch (this.current_format) {
        case 'hex':
          this.updateInputValue(_value.hex);
          break;

        case 'rgba':
          this.updateInputValue('rgba(' + _value.rgba.r + ',' + _value.rgba.g + ',' + _value.rgba.b + ',' + _value.rgba.a + ')');
          break;

        case 'hsl':
          this.updateInputValue('hsla(' + Math.ceil(_value.hsl.h) + ',' + _value.hsl.s * 100 + '%,' + _value.hsl.l * 100 + '%,' + _value.hsl.a + ')');
          break;
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])