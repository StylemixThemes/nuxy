(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

Vue.component('wpcfto_color', {
  template: "\n        <div class=\"wpcfto_generic_field wpcfto_generic_field_color\">\n        \n            <wpcfto_fields_aside_before :fields=\"fields\" :field_label=\"field_label\"></wpcfto_fields_aside_before>\n            \n            <div class=\"wpcfto-field-content\">\n                        \n                <div class=\"stm_colorpicker_wrapper\" v-bind:class=\"['picker-position-' + position]\">\n\n                    <span v-bind:style=\"{'background-color': input_value}\" @click=\"$refs.field_name.focus()\"></span>\n    \n                    <input type=\"text\"\n                           v-bind:name=\"field_name\"\n                           v-bind:placeholder=\"field_label\"\n                           v-bind:id=\"field_id\"\n                           v-model=\"input_value\"\n                           ref=\"field_name\"\n                    />\n    \n                    <div @click=\"changeValueFormat\">\n                        <slider-picker v-model=\"value\"></slider-picker>\n                    </div>\n\n                      <a href=\"#\" @click=\"resetValue\" v-if=\"input_value\" class=\"wpcfto_generic_field_color__clear\">\n                        <i class=\"fa fa-times\"></i>\n                      </a>\n    \n                </div>\n            \n            </div>\n            \n            <wpcfto_fields_aside_after :fields=\"fields\"></wpcfto_fields_aside_after>\n            \n        </div>\n    ",
  props: ['fields', 'field_label', 'field_name', 'field_id', 'field_value'],
  components: {
    'slider-picker': VueColor.Chrome
  },
  data: function data() {
    return {
      default_value: '',
      input_value: '',
      position: 'bottom',
      value: {
        hex: '#000000',
        rgba: {
          r: 0,
          g: 0,
          b: 0,
          a: 1
        },
        hsl: {
          a: 1,
          h: 0,
          l: 1,
          s: 0
        }
      }
    };
  },
  created: function created() {
    this.default_value = this.field_value;

    if (typeof this.field_value === 'string') {
      if (this.field_value.indexOf('rgb') !== -1) {
        var colors = this.field_value.replace('rgba(', '').slice(0, -1).split(',');
        this.value = {
          rgba: {
            r: colors[0],
            g: colors[1],
            b: colors[2],
            a: colors[3]
          }
        };
      } else if (this.field_value.indexOf('hsl') !== -1) {
        var colors = this.field_value.replace('hsla(', '').slice(0, -1).split(',');
        this.value = {
          hsl: {
            h: colors[0],
            s: colors[1],
            l: colors[2],
            a: colors[3]
          }
        };
      } else if (this.field_value.indexOf('#') !== -1) {
        this.value = {
          hex: this.field_value
        };
      }

      this.input_value = this.field_value;
    }

    if (this.fields.position) this.position = this.fields.position;
  },
  methods: {
    resetValue: function resetValue(event) {
      event.preventDefault();
      this.$set(this, 'input_value', this.default_value);
      this.$emit('wpcfto-get-value', this.default_value);
    },
    updateValue: function updateValue(value) {
      this.$set(this, 'input_value', value);
      this.$emit('wpcfto-get-value', value);
    },
    changeValueFormat: function changeValueFormat(event) {
      if (event.target.classList.contains('vc-chrome-toggle-icon') || event.target.closest('.vc-chrome-toggle-icon')) {
        var wrapper = event.target.closest('.vc-chrome-fields-wrap');

        if (wrapper) {
          var fields = wrapper.querySelectorAll('.vc-chrome-fields');

          var _iterator = _createForOfIteratorHelper(fields),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var field = _step.value;

              if (field.style.display !== 'none') {
                var format = field.querySelector('.vc-input__label').textContent.toLowerCase().trim();
                var colorValue = '';

                switch (format) {
                  case 'hex':
                    colorValue = field.querySelector('.vc-input__input').getAttribute('aria-label');
                    console.log(colorValue);
                    break;

                  case 'r':
                    var rgba = field.querySelectorAll('.vc-input__input');
                    colorValue = 'rgba(' + rgba[0].getAttribute('aria-label') + ',' + rgba[1].getAttribute('aria-label') + ',' + rgba[2].getAttribute('aria-label') + ',' + rgba[3].getAttribute('aria-label') + ')';
                    break;

                  case 'h':
                    var hsla = field.querySelectorAll('.vc-input__input');
                    colorValue = 'hsla(' + hsla[0].getAttribute('aria-label') + ',' + hsla[1].getAttribute('aria-label') + ',' + hsla[2].getAttribute('aria-label') + ',' + hsla[3].getAttribute('aria-label') + ')';
                    break;
                }

                this.updateValue(colorValue);
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }
  },
  watch: {
    input_value: function input_value(value) {
      this.$emit('wpcfto-get-value', value);
    },
    value: function value(_value) {
      if (typeof _value.rgba !== 'undefined') {
        var rgba_color = 'rgba(' + _value.rgba.r + ',' + _value.rgba.g + ',' + _value.rgba.b + ',' + _value.rgba.a + ')';
        this.updateValue(rgba_color);
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])