(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

Vue.component('wpcfto_color', {
  template: "\n        <div class=\"wpcfto_generic_field wpcfto_generic_field_color\">\n        \n            <wpcfto_fields_aside_before :fields=\"fields\" :field_label=\"field_label\"></wpcfto_fields_aside_before>\n            \n            <div class=\"wpcfto-field-content\">\n                        \n                <div class=\"stm_colorpicker_wrapper\" v-bind:class=\"['picker-position-' + position]\">\n\n                    <span v-bind:style=\"{'background-color': input_value}\" @click=\"$refs.field_name.focus()\"></span>\n    \n                    <input type=\"text\"\n                           v-bind:name=\"field_name\"\n                           v-bind:placeholder=\"field_label\"\n                           v-bind:id=\"field_id\"\n                           v-model=\"input_value\"\n                           ref=\"field_name\"\n                    />\n    \n                    <div @click=\"changeValueFormat\">\n                        <slider-picker ref=\"colorPicker\" v-model=\"value\"></slider-picker>\n                    </div>\n\n                      <a href=\"#\" @click=\"resetValue\" v-if=\"input_value\" class=\"wpcfto_generic_field_color__clear\">\n                        <i class=\"fa fa-times\"></i>\n                      </a>\n    \n                </div>\n            \n            </div>\n            \n            <wpcfto_fields_aside_after :fields=\"fields\"></wpcfto_fields_aside_after>\n            \n        </div>\n    ",
  props: ['fields', 'field_label', 'field_name', 'field_id', 'field_value', 'default_value'],
  components: {
    'slider-picker': VueColor.Chrome
  },
  data: function data() {
    return {
      input_value: '',
      position: 'bottom',
      current_format: 'hex',
      value: {
        hex: '#000000',
        rgba: {
          r: 0,
          g: 0,
          b: 0,
          a: 1
        },
        hsl: {
          a: 1,
          h: 1,
          l: 0,
          s: 1
        }
      }
    };
  },
  created: function created() {
    if (this.fields.position) {
      this.position = this.fields.position;
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      _this.updatePickerValue(_this.field_value);
    });
  },
  methods: {
    resetValue: function resetValue(event) {
      event.preventDefault();
      this.updateInputValue(this.default_value);
      this.updatePickerValue(this.default_value);
    },
    updatePickerValue: function updatePickerValue(value) {
      if (typeof value === 'string') {
        if (value.indexOf('rgb') !== -1) {
          var colors = value.replace('rgba(', '').slice(0, -1).split(',');
          this.current_format = 'rgba';
          this.value = {
            r: colors[0],
            g: colors[1],
            b: colors[2],
            a: colors[3],
            rgba: {
              r: colors[0],
              g: colors[1],
              b: colors[2],
              a: colors[3]
            }
          };
          this.$refs.colorPicker.fieldsIndex = 1;
        } else if (value.indexOf('hsl') !== -1) {
          var colors = value.replace('hsla(', '').slice(0, -1).split(',');
          this.current_format = 'hsl';
          this.value = {
            hsl: {
              h: colors[0],
              s: colors[1].replace('%', '') / 100,
              l: colors[2].replace('%', '') / 100,
              a: colors[3]
            }
          };
          this.$refs.colorPicker.fieldsIndex = 2;
        } else if (value.indexOf('#') !== -1) {
          this.current_format = 'hex';
          this.value = {
            hex: value
          };
          this.$refs.colorPicker.fieldsIndex = 0;
        }

        this.input_value = value;
      }
    },
    updateInputValue: function updateInputValue(value) {
      this.$set(this, 'input_value', value);
      this.$emit('wpcfto-get-value', value);
    },
    changeValueFormat: function changeValueFormat(event) {
      if (event.target.classList.contains('vc-chrome-toggle-icon') || event.target.closest('.vc-chrome-toggle-icon')) {
        var wrapper = event.target.closest('.vc-chrome-fields-wrap');

        if (wrapper) {
          var fields = wrapper.querySelectorAll('.vc-chrome-fields');

          var _iterator = _createForOfIteratorHelper(fields),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var field = _step.value;

              if (field.style.display !== 'none') {
                var format = field.querySelector('.vc-input__label').textContent.toLowerCase().trim();
                var colorValue = '';

                switch (format) {
                  case 'hex':
                    this.current_format = 'hex';
                    colorValue = field.querySelector('.vc-input__input').getAttribute('aria-label');
                    break;

                  case 'r':
                    var rgba = field.querySelectorAll('.vc-input__input');
                    this.current_format = 'rgba';
                    colorValue = 'rgba(' + rgba[0].getAttribute('aria-label') + ',' + rgba[1].getAttribute('aria-label') + ',' + rgba[2].getAttribute('aria-label') + ',' + rgba[3].getAttribute('aria-label') + ')';
                    break;

                  case 'h':
                    var hsla = field.querySelectorAll('.vc-input__input');
                    this.current_format = 'hsl';
                    colorValue = 'hsla(' + hsla[0].getAttribute('aria-label') + ',' + hsla[1].getAttribute('aria-label') + ',' + hsla[2].getAttribute('aria-label') + ',' + hsla[3].getAttribute('aria-label') + ')';
                    break;
                }

                this.updateInputValue(colorValue);
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }
  },
  watch: {
    input_value: function input_value(value) {
      this.$emit('wpcfto-get-value', value);
    },
    value: function value(_value) {
      switch (this.current_format) {
        case 'hex':
          this.updateInputValue(_value.hex);
          break;

        case 'rgba':
          this.updateInputValue('rgba(' + _value.rgba.r + ',' + _value.rgba.g + ',' + _value.rgba.b + ',' + _value.rgba.a + ')');
          break;

        case 'hsl':
          this.updateInputValue('hsla(' + Math.ceil(_value.hsl.h) + ',' + _value.hsl.s * 100 + '%,' + _value.hsl.l * 100 + '%,' + _value.hsl.a + ')');
          break;
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJsZW5ndGgiLCJpIiwiRiIsInMiLCJuIiwiZG9uZSIsInZhbHVlIiwiZSIsIl9lIiwiZiIsIlR5cGVFcnJvciIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJlcnIiLCJjYWxsIiwic3RlcCIsIm5leHQiLCJfZTIiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsImFyciIsImxlbiIsImFycjIiLCJWdWUiLCJjb21wb25lbnQiLCJ0ZW1wbGF0ZSIsInByb3BzIiwiY29tcG9uZW50cyIsIlZ1ZUNvbG9yIiwiQ2hyb21lIiwiZGF0YSIsImlucHV0X3ZhbHVlIiwicG9zaXRpb24iLCJjdXJyZW50X2Zvcm1hdCIsImhleCIsInJnYmEiLCJyIiwiZyIsImIiLCJhIiwiaHNsIiwiaCIsImwiLCJjcmVhdGVkIiwiZmllbGRzIiwibW91bnRlZCIsIl90aGlzIiwiJG5leHRUaWNrIiwidXBkYXRlUGlja2VyVmFsdWUiLCJmaWVsZF92YWx1ZSIsIm1ldGhvZHMiLCJyZXNldFZhbHVlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInVwZGF0ZUlucHV0VmFsdWUiLCJkZWZhdWx0X3ZhbHVlIiwiaW5kZXhPZiIsImNvbG9ycyIsInJlcGxhY2UiLCJzcGxpdCIsIiRyZWZzIiwiY29sb3JQaWNrZXIiLCJmaWVsZHNJbmRleCIsIiRzZXQiLCIkZW1pdCIsImNoYW5nZVZhbHVlRm9ybWF0IiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbG9zZXN0Iiwid3JhcHBlciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfaXRlcmF0b3IiLCJfc3RlcCIsImZpZWxkIiwic3R5bGUiLCJkaXNwbGF5IiwiZm9ybWF0IiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiY29sb3JWYWx1ZSIsImdldEF0dHJpYnV0ZSIsImhzbGEiLCJ3YXRjaCIsIl92YWx1ZSIsIk1hdGgiLCJjZWlsIl0sInNvdXJjZXMiOlsiZmFrZV80MWIxNjFhNi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuVnVlLmNvbXBvbmVudCgnd3BjZnRvX2NvbG9yJywge1xuICB0ZW1wbGF0ZTogXCJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIndwY2Z0b19nZW5lcmljX2ZpZWxkIHdwY2Z0b19nZW5lcmljX2ZpZWxkX2NvbG9yXFxcIj5cXG4gICAgICAgIFxcbiAgICAgICAgICAgIDx3cGNmdG9fZmllbGRzX2FzaWRlX2JlZm9yZSA6ZmllbGRzPVxcXCJmaWVsZHNcXFwiIDpmaWVsZF9sYWJlbD1cXFwiZmllbGRfbGFiZWxcXFwiPjwvd3BjZnRvX2ZpZWxkc19hc2lkZV9iZWZvcmU+XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvLWZpZWxkLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzdG1fY29sb3JwaWNrZXJfd3JhcHBlclxcXCIgdi1iaW5kOmNsYXNzPVxcXCJbJ3BpY2tlci1wb3NpdGlvbi0nICsgcG9zaXRpb25dXFxcIj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtYmluZDpzdHlsZT1cXFwieydiYWNrZ3JvdW5kLWNvbG9yJzogaW5wdXRfdmFsdWV9XFxcIiBAY2xpY2s9XFxcIiRyZWZzLmZpZWxkX25hbWUuZm9jdXMoKVxcXCI+PC9zcGFuPlxcbiAgICBcXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDpuYW1lPVxcXCJmaWVsZF9uYW1lXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDpwbGFjZWhvbGRlcj1cXFwiZmllbGRfbGFiZWxcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmlkPVxcXCJmaWVsZF9pZFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVxcXCJpbnB1dF92YWx1ZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9XFxcImZpZWxkX25hbWVcXFwiXFxuICAgICAgICAgICAgICAgICAgICAvPlxcbiAgICBcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgQGNsaWNrPVxcXCJjaGFuZ2VWYWx1ZUZvcm1hdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNsaWRlci1waWNrZXIgcmVmPVxcXCJjb2xvclBpY2tlclxcXCIgdi1tb2RlbD1cXFwidmFsdWVcXFwiPjwvc2xpZGVyLXBpY2tlcj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCIjXFxcIiBAY2xpY2s9XFxcInJlc2V0VmFsdWVcXFwiIHYtaWY9XFxcImlucHV0X3ZhbHVlXFxcIiBjbGFzcz1cXFwid3BjZnRvX2dlbmVyaWNfZmllbGRfY29sb3JfX2NsZWFyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtdGltZXNcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICBcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgPHdwY2Z0b19maWVsZHNfYXNpZGVfYWZ0ZXIgOmZpZWxkcz1cXFwiZmllbGRzXFxcIj48L3dwY2Z0b19maWVsZHNfYXNpZGVfYWZ0ZXI+XFxuICAgICAgICAgICAgXFxuICAgICAgICA8L2Rpdj5cXG4gICAgXCIsXG4gIHByb3BzOiBbJ2ZpZWxkcycsICdmaWVsZF9sYWJlbCcsICdmaWVsZF9uYW1lJywgJ2ZpZWxkX2lkJywgJ2ZpZWxkX3ZhbHVlJywgJ2RlZmF1bHRfdmFsdWUnXSxcbiAgY29tcG9uZW50czoge1xuICAgICdzbGlkZXItcGlja2VyJzogVnVlQ29sb3IuQ2hyb21lXG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0X3ZhbHVlOiAnJyxcbiAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIGN1cnJlbnRfZm9ybWF0OiAnaGV4JyxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhleDogJyMwMDAwMDAnLFxuICAgICAgICByZ2JhOiB7XG4gICAgICAgICAgcjogMCxcbiAgICAgICAgICBnOiAwLFxuICAgICAgICAgIGI6IDAsXG4gICAgICAgICAgYTogMVxuICAgICAgICB9LFxuICAgICAgICBoc2w6IHtcbiAgICAgICAgICBhOiAxLFxuICAgICAgICAgIGg6IDEsXG4gICAgICAgICAgbDogMCxcbiAgICAgICAgICBzOiAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICh0aGlzLmZpZWxkcy5wb3NpdGlvbikge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuZmllbGRzLnBvc2l0aW9uO1xuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudXBkYXRlUGlja2VyVmFsdWUoX3RoaXMuZmllbGRfdmFsdWUpO1xuICAgIH0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVzZXRWYWx1ZTogZnVuY3Rpb24gcmVzZXRWYWx1ZShldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudXBkYXRlSW5wdXRWYWx1ZSh0aGlzLmRlZmF1bHRfdmFsdWUpO1xuICAgICAgdGhpcy51cGRhdGVQaWNrZXJWYWx1ZSh0aGlzLmRlZmF1bHRfdmFsdWUpO1xuICAgIH0sXG4gICAgdXBkYXRlUGlja2VyVmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBpY2tlclZhbHVlKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgICAgICAgdmFyIGNvbG9ycyA9IHZhbHVlLnJlcGxhY2UoJ3JnYmEoJywgJycpLnNsaWNlKDAsIC0xKS5zcGxpdCgnLCcpO1xuICAgICAgICAgIHRoaXMuY3VycmVudF9mb3JtYXQgPSAncmdiYSc7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICAgIHI6IGNvbG9yc1swXSxcbiAgICAgICAgICAgIGc6IGNvbG9yc1sxXSxcbiAgICAgICAgICAgIGI6IGNvbG9yc1syXSxcbiAgICAgICAgICAgIGE6IGNvbG9yc1szXSxcbiAgICAgICAgICAgIHJnYmE6IHtcbiAgICAgICAgICAgICAgcjogY29sb3JzWzBdLFxuICAgICAgICAgICAgICBnOiBjb2xvcnNbMV0sXG4gICAgICAgICAgICAgIGI6IGNvbG9yc1syXSxcbiAgICAgICAgICAgICAgYTogY29sb3JzWzNdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLiRyZWZzLmNvbG9yUGlja2VyLmZpZWxkc0luZGV4ID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICAgICAgICB2YXIgY29sb3JzID0gdmFsdWUucmVwbGFjZSgnaHNsYSgnLCAnJykuc2xpY2UoMCwgLTEpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgdGhpcy5jdXJyZW50X2Zvcm1hdCA9ICdoc2wnO1xuICAgICAgICAgIHRoaXMudmFsdWUgPSB7XG4gICAgICAgICAgICBoc2w6IHtcbiAgICAgICAgICAgICAgaDogY29sb3JzWzBdLFxuICAgICAgICAgICAgICBzOiBjb2xvcnNbMV0ucmVwbGFjZSgnJScsICcnKSAvIDEwMCxcbiAgICAgICAgICAgICAgbDogY29sb3JzWzJdLnJlcGxhY2UoJyUnLCAnJykgLyAxMDAsXG4gICAgICAgICAgICAgIGE6IGNvbG9yc1szXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy4kcmVmcy5jb2xvclBpY2tlci5maWVsZHNJbmRleCA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaW5kZXhPZignIycpICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMuY3VycmVudF9mb3JtYXQgPSAnaGV4JztcbiAgICAgICAgICB0aGlzLnZhbHVlID0ge1xuICAgICAgICAgICAgaGV4OiB2YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy4kcmVmcy5jb2xvclBpY2tlci5maWVsZHNJbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlucHV0X3ZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVJbnB1dFZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnB1dFZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLiRzZXQodGhpcywgJ2lucHV0X3ZhbHVlJywgdmFsdWUpO1xuICAgICAgdGhpcy4kZW1pdCgnd3BjZnRvLWdldC12YWx1ZScsIHZhbHVlKTtcbiAgICB9LFxuICAgIGNoYW5nZVZhbHVlRm9ybWF0OiBmdW5jdGlvbiBjaGFuZ2VWYWx1ZUZvcm1hdChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3ZjLWNocm9tZS10b2dnbGUtaWNvbicpIHx8IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcudmMtY2hyb21lLXRvZ2dsZS1pY29uJykpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLnZjLWNocm9tZS1maWVsZHMtd3JhcCcpO1xuXG4gICAgICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgICAgdmFyIGZpZWxkcyA9IHdyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLnZjLWNocm9tZS1maWVsZHMnKTtcblxuICAgICAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWVsZHMpLFxuICAgICAgICAgICAgICBfc3RlcDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgICAgICB2YXIgZmllbGQgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICBpZiAoZmllbGQuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGZpZWxkLnF1ZXJ5U2VsZWN0b3IoJy52Yy1pbnB1dF9fbGFiZWwnKS50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JWYWx1ZSA9ICcnO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9mb3JtYXQgPSAnaGV4JztcbiAgICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZSA9IGZpZWxkLnF1ZXJ5U2VsZWN0b3IoJy52Yy1pbnB1dF9faW5wdXQnKS5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcmdiYSA9IGZpZWxkLnF1ZXJ5U2VsZWN0b3JBbGwoJy52Yy1pbnB1dF9faW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2Zvcm1hdCA9ICdyZ2JhJztcbiAgICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZSA9ICdyZ2JhKCcgKyByZ2JhWzBdLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpICsgJywnICsgcmdiYVsxXS5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSArICcsJyArIHJnYmFbMl0uZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJykgKyAnLCcgKyByZ2JhWzNdLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpICsgJyknO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIHZhciBoc2xhID0gZmllbGQucXVlcnlTZWxlY3RvckFsbCgnLnZjLWlucHV0X19pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfZm9ybWF0ID0gJ2hzbCc7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yVmFsdWUgPSAnaHNsYSgnICsgaHNsYVswXS5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSArICcsJyArIGhzbGFbMV0uZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJykgKyAnLCcgKyBoc2xhWzJdLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpICsgJywnICsgaHNsYVszXS5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSArICcpJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVJbnB1dFZhbHVlKGNvbG9yVmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBpbnB1dF92YWx1ZTogZnVuY3Rpb24gaW5wdXRfdmFsdWUodmFsdWUpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ3dwY2Z0by1nZXQtdmFsdWUnLCB2YWx1ZSk7XG4gICAgfSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuY3VycmVudF9mb3JtYXQpIHtcbiAgICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0VmFsdWUoX3ZhbHVlLmhleCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmdiYSc6XG4gICAgICAgICAgdGhpcy51cGRhdGVJbnB1dFZhbHVlKCdyZ2JhKCcgKyBfdmFsdWUucmdiYS5yICsgJywnICsgX3ZhbHVlLnJnYmEuZyArICcsJyArIF92YWx1ZS5yZ2JhLmIgKyAnLCcgKyBfdmFsdWUucmdiYS5hICsgJyknKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdoc2wnOlxuICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRWYWx1ZSgnaHNsYSgnICsgTWF0aC5jZWlsKF92YWx1ZS5oc2wuaCkgKyAnLCcgKyBfdmFsdWUuaHNsLnMgKiAxMDAgKyAnJSwnICsgX3ZhbHVlLmhzbC5sICogMTAwICsgJyUsJyArIF92YWx1ZS5oc2wuYSArICcpJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLDBCQUFULENBQW9DQyxDQUFwQyxFQUF1Q0MsY0FBdkMsRUFBdUQ7RUFBRSxJQUFJQyxFQUFFLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0gsQ0FBQyxDQUFDRyxNQUFNLENBQUNDLFFBQVIsQ0FBbEMsSUFBdURKLENBQUMsQ0FBQyxZQUFELENBQWpFOztFQUFpRixJQUFJLENBQUNFLEVBQUwsRUFBUztJQUFFLElBQUlH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
},{}]},{},[1])