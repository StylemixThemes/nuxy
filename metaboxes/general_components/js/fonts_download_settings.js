(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Vue.component('fonts_download_settings', {
  props: ['fields', 'field_label', 'field_name', 'field_id', 'field_value'],
  data: function data() {
    return {
      translations: wpcfto_global_settings['translations'],
      loading: false,
      value: '',
      regenerate_texts: {
        label: wpcfto_global_settings['translations'].regenerate_fonts_title,
        description: wpcfto_global_settings['translations'].regenerate_fonts_notice
      },
      fonts_download_setting_texts: {
        label: wpcfto_global_settings['translations'].fonts_download_setting_label,
        description: wpcfto_global_settings['translations'].fonts_download_setting_description
      }
    };
  },
  template: "\n        <div class=\"wpcfto_fonts_download_settings\">\n            <div class=\"wpcfto_enable_fonts\">\n                <div class=\"wpcfto_generic_field wpcfto_generic_checkbox wpcfto_generic_field_regenerate_fonts\">\n                    <wpcfto_fields_aside_before :fields=\"fonts_download_setting_texts\" :field_label=\"fonts_download_setting_texts.label\"></wpcfto_fields_aside_before>\n                    <div class=\"wpcfto-admin-checkbox wpcfto_enable_fonts_checkbox\">\n                        <label>\n                            <div class=\"wpcfto-admin-checkbox-wrapper is_toggle\" v-bind:class=\"{'active' : value}\">\n                                <div class=\"wpcfto-checkbox-switcher\"></div>\n                                <input type=\"checkbox\"\n                                       :name=\"field_name\"\n                                       v-bind:id=\"field_id\"\n                                       v-model=\"value\"\n                                />\n                            </div>\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div v-show=\"value\" class=\"wpcfto_regenerate_fonts_field\">\n                <div class=\"wpcfto_generic_field wpcfto_generic_field_flex_input wpcfto_generic_field_regenerate_fonts\">\n                    <wpcfto_fields_aside_before :fields=\"regenerate_texts\" :field_label=\"regenerate_texts.label\"></wpcfto_fields_aside_before>\n                    <a href=\"#\" v-bind:class=\"{'loading': loading}\" class=\"button\" @click.prevent=\"regenerateFonts\">\n                        <span>{{ translations.regenerate_fonts_btn }}</span>\n                        <i class=\"lnr lnr-sync\"></i>\n                    </a>\n                </div>\n            </div>\n        </div>\n    ",
  mounted: function mounted() {
    this.value = this.field_value;
  },
  methods: {
    regenerateFonts: function regenerateFonts() {
      var vm = this;
      vm.loading = true;
      var url = stm_wpcfto_ajaxurl + '?action=wpcfto_regenerate_fonts&nonce=' + stm_wpcfto_nonces['wpcfto_regenerate_fonts'];
      this.$http.post(url).then(function (response) {
        var _response$data;

        vm.loading = false;

        if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.reload) {
          location.reload();
        }
      });
    }
  },
  watch: {
    value: function value(_value) {
      this.$emit('wpcfto-get-value', _value);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWdWUiLCJjb21wb25lbnQiLCJwcm9wcyIsImRhdGEiLCJ0cmFuc2xhdGlvbnMiLCJ3cGNmdG9fZ2xvYmFsX3NldHRpbmdzIiwibG9hZGluZyIsInZhbHVlIiwicmVnZW5lcmF0ZV90ZXh0cyIsImxhYmVsIiwicmVnZW5lcmF0ZV9mb250c190aXRsZSIsImRlc2NyaXB0aW9uIiwicmVnZW5lcmF0ZV9mb250c19ub3RpY2UiLCJmb250c19kb3dubG9hZF9zZXR0aW5nX3RleHRzIiwiZm9udHNfZG93bmxvYWRfc2V0dGluZ19sYWJlbCIsImZvbnRzX2Rvd25sb2FkX3NldHRpbmdfZGVzY3JpcHRpb24iLCJ0ZW1wbGF0ZSIsIm1vdW50ZWQiLCJmaWVsZF92YWx1ZSIsIm1ldGhvZHMiLCJyZWdlbmVyYXRlRm9udHMiLCJ2bSIsInVybCIsInN0bV93cGNmdG9fYWpheHVybCIsInN0bV93cGNmdG9fbm9uY2VzIiwiJGh0dHAiLCJwb3N0IiwidGhlbiIsInJlc3BvbnNlIiwiX3Jlc3BvbnNlJGRhdGEiLCJyZWxvYWQiLCJsb2NhdGlvbiIsIndhdGNoIiwiX3ZhbHVlIiwiJGVtaXQiXSwic291cmNlcyI6WyJmYWtlXzUxYjUxYWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cblZ1ZS5jb21wb25lbnQoJ2ZvbnRzX2Rvd25sb2FkX3NldHRpbmdzJywge1xuICBwcm9wczogWydmaWVsZHMnLCAnZmllbGRfbGFiZWwnLCAnZmllbGRfbmFtZScsICdmaWVsZF9pZCcsICdmaWVsZF92YWx1ZSddLFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2xhdGlvbnM6IHdwY2Z0b19nbG9iYWxfc2V0dGluZ3NbJ3RyYW5zbGF0aW9ucyddLFxuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICB2YWx1ZTogJycsXG4gICAgICByZWdlbmVyYXRlX3RleHRzOiB7XG4gICAgICAgIGxhYmVsOiB3cGNmdG9fZ2xvYmFsX3NldHRpbmdzWyd0cmFuc2xhdGlvbnMnXS5yZWdlbmVyYXRlX2ZvbnRzX3RpdGxlLFxuICAgICAgICBkZXNjcmlwdGlvbjogd3BjZnRvX2dsb2JhbF9zZXR0aW5nc1sndHJhbnNsYXRpb25zJ10ucmVnZW5lcmF0ZV9mb250c19ub3RpY2VcbiAgICAgIH0sXG4gICAgICBmb250c19kb3dubG9hZF9zZXR0aW5nX3RleHRzOiB7XG4gICAgICAgIGxhYmVsOiB3cGNmdG9fZ2xvYmFsX3NldHRpbmdzWyd0cmFuc2xhdGlvbnMnXS5mb250c19kb3dubG9hZF9zZXR0aW5nX2xhYmVsLFxuICAgICAgICBkZXNjcmlwdGlvbjogd3BjZnRvX2dsb2JhbF9zZXR0aW5nc1sndHJhbnNsYXRpb25zJ10uZm9udHNfZG93bmxvYWRfc2V0dGluZ19kZXNjcmlwdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHRlbXBsYXRlOiBcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvX2ZvbnRzX2Rvd25sb2FkX3NldHRpbmdzXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ3cGNmdG9fZW5hYmxlX2ZvbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvX2dlbmVyaWNfZmllbGQgd3BjZnRvX2dlbmVyaWNfY2hlY2tib3ggd3BjZnRvX2dlbmVyaWNfZmllbGRfcmVnZW5lcmF0ZV9mb250c1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8d3BjZnRvX2ZpZWxkc19hc2lkZV9iZWZvcmUgOmZpZWxkcz1cXFwiZm9udHNfZG93bmxvYWRfc2V0dGluZ190ZXh0c1xcXCIgOmZpZWxkX2xhYmVsPVxcXCJmb250c19kb3dubG9hZF9zZXR0aW5nX3RleHRzLmxhYmVsXFxcIj48L3dwY2Z0b19maWVsZHNfYXNpZGVfYmVmb3JlPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvLWFkbWluLWNoZWNrYm94IHdwY2Z0b19lbmFibGVfZm9udHNfY2hlY2tib3hcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvLWFkbWluLWNoZWNrYm94LXdyYXBwZXIgaXNfdG9nZ2xlXFxcIiB2LWJpbmQ6Y2xhc3M9XFxcInsnYWN0aXZlJyA6IHZhbHVlfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ3cGNmdG8tY2hlY2tib3gtc3dpdGNoZXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpuYW1lPVxcXCJmaWVsZF9uYW1lXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDppZD1cXFwiZmllbGRfaWRcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cXFwidmFsdWVcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgdi1zaG93PVxcXCJ2YWx1ZVxcXCIgY2xhc3M9XFxcIndwY2Z0b19yZWdlbmVyYXRlX2ZvbnRzX2ZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvX2dlbmVyaWNfZmllbGQgd3BjZnRvX2dlbmVyaWNfZmllbGRfZmxleF9pbnB1dCB3cGNmdG9fZ2VuZXJpY19maWVsZF9yZWdlbmVyYXRlX2ZvbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDx3cGNmdG9fZmllbGRzX2FzaWRlX2JlZm9yZSA6ZmllbGRzPVxcXCJyZWdlbmVyYXRlX3RleHRzXFxcIiA6ZmllbGRfbGFiZWw9XFxcInJlZ2VuZXJhdGVfdGV4dHMubGFiZWxcXFwiPjwvd3BjZnRvX2ZpZWxkc19hc2lkZV9iZWZvcmU+XFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCIjXFxcIiB2LWJpbmQ6Y2xhc3M9XFxcInsnbG9hZGluZyc6IGxvYWRpbmd9XFxcIiBjbGFzcz1cXFwiYnV0dG9uXFxcIiBAY2xpY2sucHJldmVudD1cXFwicmVnZW5lcmF0ZUZvbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyB0cmFuc2xhdGlvbnMucmVnZW5lcmF0ZV9mb250c19idG4gfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImxuciBsbnItc3luY1xcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICBcIixcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5maWVsZF92YWx1ZTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlZ2VuZXJhdGVGb250czogZnVuY3Rpb24gcmVnZW5lcmF0ZUZvbnRzKCkge1xuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgdmFyIHVybCA9IHN0bV93cGNmdG9fYWpheHVybCArICc/YWN0aW9uPXdwY2Z0b19yZWdlbmVyYXRlX2ZvbnRzJm5vbmNlPScgKyBzdG1fd3BjZnRvX25vbmNlc1snd3BjZnRvX3JlZ2VuZXJhdGVfZm9udHMnXTtcbiAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBfcmVzcG9uc2UkZGF0YTtcblxuICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlICE9PSBudWxsICYmIHJlc3BvbnNlICE9PSB2b2lkIDAgJiYgKF9yZXNwb25zZSRkYXRhID0gcmVzcG9uc2UuZGF0YSkgIT09IG51bGwgJiYgX3Jlc3BvbnNlJGRhdGEgIT09IHZvaWQgMCAmJiBfcmVzcG9uc2UkZGF0YS5yZWxvYWQpIHtcbiAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfdmFsdWUpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ3dwY2Z0by1nZXQtdmFsdWUnLCBfdmFsdWUpO1xuICAgIH1cbiAgfVxufSk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsR0FBRyxDQUFDQyxTQUFKLENBQWMseUJBQWQsRUFBeUM7RUFDdkNDLEtBQUssRUFBRSxDQUFDLFFBQUQsRUFBVyxhQUFYLEVBQTBCLFlBQTFCLEVBQXdDLFVBQXhDLEVBQW9ELGFBQXBELENBRGdDO0VBRXZDQyxJQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFnQjtJQUNwQixPQUFPO01BQ0xDLFlBQVksRUFBRUMsc0JBQXNCLENBQUMsY0FBRCxDQUQvQjtNQUVMQyxPQUFPLEVBQUUsS0FGSjtNQUdMQyxLQUFLLEVBQUUsRUFIRjtNQUlMQyxnQkFBZ0IsRUFBRTtRQUNoQkMsS0FBSyxFQUFFSixzQkFBc0IsQ0FBQyxjQUFELENBQXRCLENBQXVDSyxzQkFEOUI7UUFFaEJDLFdBQVcsRUFBRU4sc0JBQXNCLENBQUMsY0FBRCxDQUF0QixDQUF1Q087TUFGcEMsQ0FKYjtNQVFMQyw0QkFBNEIsRUFBRTtRQUM1QkosS0FBSyxFQUFFSixzQkFBc0IsQ0FBQyxjQUFELENBQXRCLENBQXVDUyw0QkFEbEI7UUFFNUJILFdBQVcsRUFBRU4sc0JBQXNCLENBQUMsY0FBRCxDQUF0QixDQUF1Q1U7TUFGeEI7SUFSekIsQ0FBUDtFQWFELENBaEJzQztFQWlCdkNDLFFBQVEsRUFBRSwyeURBakI2QjtFQWtCdkNDLE9BQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0lBQzFCLEtBQUtWLEtBQUwsR0FBYSxLQUFLVyxXQUFsQjtFQUNELENBcEJzQztFQXFCdkNDLE9BQU8sRUFBRTtJQUNQQyxlQUFlLEVBQUUsU0FBU0EsZUFBVCxHQUEyQjtNQUMxQyxJQUFJQyxFQUFFLEdBQUcsSUFBVDtNQUNBQSxFQUFFLENBQUNmLE9BQUgsR0FBYSxJQUFiO01BQ0EsSUFBSWdCLEdBQUcsR0FBR0Msa0JBQWtCLEdBQUcsd0NBQXJCLEdBQWdFQyxpQkFBaUIsQ0FBQyx5QkFBRCxDQUEzRjtNQUNBLEtBQUtDLEtBQUwsQ0FBV0MsSUFBWCxDQUFnQkosR0FBaEIsRUFBcUJLLElBQXJCLENBQTBCLFVBQVVDLFFBQVYsRUFBb0I7UUFDNUMsSUFBSUMsY0FBSjs7UUFFQVIsRUFBRSxDQUFDZixPQUFILEdBQWEsS0FBYjs7UUFFQSxJQUFJc0IsUUFBUSxLQUFLLElBQWIsSUFBcUJBLFFBQVEsS0FBSyxLQUFLLENBQXZDLElBQTRDLENBQUNDLGNBQWMsR0FBR0QsUUFBUSxDQUFDekIsSUFBM0IsTUFBcUMsSUFBakYsSUFBeUYwQixjQUFjLEtBQUssS0FBSyxDQUFqSCxJQUFzSEEsY0FBYyxDQUFDQyxNQUF6SSxFQUFpSjtVQUMvSUMsUUFBUSxDQUFDRCxNQUFUO1FBQ0Q7TUFDRixDQVJEO0lBU0Q7RUFkTSxDQXJCOEI7RUFxQ3ZDRSxLQUFLLEVBQUU7SUFDTHpCLEtBQUssRUFBRSxTQUFTQSxLQUFULENBQWUwQixNQUFmLEVBQXVCO01BQzVCLEtBQUtDLEtBQUwsQ0FBVyxrQkFBWCxFQUErQkQsTUFBL0I7SUFDRDtFQUhJO0FBckNnQyxDQUF6QyJ9
},{}]},{},[1])