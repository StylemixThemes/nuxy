(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Vue.component('fonts_download_settings', {
  props: ['fields', 'field_label', 'field_name', 'field_id', 'field_value', 'option_id'],
  data: function data() {
    return {
      translations: wpcfto_global_settings['translations'],
      loading: false,
      value: '',
      regenerate_texts: {
        label: wpcfto_global_settings['translations'].regenerate_fonts_title,
        description: wpcfto_global_settings['translations'].regenerate_fonts_notice
      },
      fonts_download_setting_texts: {
        label: wpcfto_global_settings['translations'].fonts_download_setting_label,
        description: wpcfto_global_settings['translations'].fonts_download_setting_description
      }
    };
  },
  template: "\n        <div class=\"wpcfto_fonts_download_settings\">\n            <div class=\"wpcfto_enable_fonts\">\n                <div class=\"wpcfto_generic_field wpcfto_generic_checkbox wpcfto_generic_field_regenerate_fonts\">\n                    <wpcfto_fields_aside_before :fields=\"fonts_download_setting_texts\" :field_label=\"fonts_download_setting_texts.label\"></wpcfto_fields_aside_before>\n                    <div class=\"wpcfto-field-content\">\n                        <div class=\"wpcfto-admin-checkbox wpcfto_enable_fonts_checkbox\">\n                            <label>\n                                <div class=\"wpcfto-admin-checkbox-wrapper is_toggle\" v-bind:class=\"{'active' : value}\">\n                                    <div class=\"wpcfto-checkbox-switcher\"></div>\n                                    <input type=\"checkbox\"\n                                           :name=\"field_name\"\n                                           v-bind:id=\"field_id\"\n                                           v-model=\"value\"\n                                    />\n                                </div>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div v-show=\"value\" class=\"wpcfto_regenerate_fonts_field\">\n                <div class=\"wpcfto_generic_field wpcfto_generic_field_flex_input wpcfto_generic_field_regenerate_fonts\">\n                    <wpcfto_fields_aside_before :fields=\"regenerate_texts\" :field_label=\"regenerate_texts.label\"></wpcfto_fields_aside_before>\n                    <a href=\"#\" v-bind:class=\"{'loading': loading}\" class=\"button\" @click.prevent=\"regenerateFonts\">\n                        <span>{{ translations.regenerate_fonts_btn }}</span>\n                        <i class=\"lnr lnr-sync\"></i>\n                    </a>\n                </div>\n            </div>\n        </div>\n    ",
  mounted: function mounted() {
    this.value = this.field_value;
  },
  methods: {
    regenerateFonts: function regenerateFonts() {
      var vm = this;
      vm.loading = true;
      var url = stm_wpcfto_ajaxurl + '?action=wpcfto_regenerate_fonts&name=' + vm.option_id + '&nonce=' + stm_wpcfto_nonces['wpcfto_regenerate_fonts'];
      this.$http.post(url).then(function (response) {
        var _response$data;

        vm.loading = false;

        if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.reload) {
          location.reload();
        }
      });
    }
  },
  watch: {
    value: function value(_value) {
      this.$emit('wpcfto-get-value', _value);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWdWUiLCJjb21wb25lbnQiLCJwcm9wcyIsImRhdGEiLCJ0cmFuc2xhdGlvbnMiLCJ3cGNmdG9fZ2xvYmFsX3NldHRpbmdzIiwibG9hZGluZyIsInZhbHVlIiwicmVnZW5lcmF0ZV90ZXh0cyIsImxhYmVsIiwicmVnZW5lcmF0ZV9mb250c190aXRsZSIsImRlc2NyaXB0aW9uIiwicmVnZW5lcmF0ZV9mb250c19ub3RpY2UiLCJmb250c19kb3dubG9hZF9zZXR0aW5nX3RleHRzIiwiZm9udHNfZG93bmxvYWRfc2V0dGluZ19sYWJlbCIsImZvbnRzX2Rvd25sb2FkX3NldHRpbmdfZGVzY3JpcHRpb24iLCJ0ZW1wbGF0ZSIsIm1vdW50ZWQiLCJmaWVsZF92YWx1ZSIsIm1ldGhvZHMiLCJyZWdlbmVyYXRlRm9udHMiLCJ2bSIsInVybCIsInN0bV93cGNmdG9fYWpheHVybCIsIm9wdGlvbl9pZCIsInN0bV93cGNmdG9fbm9uY2VzIiwiJGh0dHAiLCJwb3N0IiwidGhlbiIsInJlc3BvbnNlIiwiX3Jlc3BvbnNlJGRhdGEiLCJyZWxvYWQiLCJsb2NhdGlvbiIsIndhdGNoIiwiX3ZhbHVlIiwiJGVtaXQiXSwic291cmNlcyI6WyJmYWtlXzFjZTI5MzUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cblZ1ZS5jb21wb25lbnQoJ2ZvbnRzX2Rvd25sb2FkX3NldHRpbmdzJywge1xuICBwcm9wczogWydmaWVsZHMnLCAnZmllbGRfbGFiZWwnLCAnZmllbGRfbmFtZScsICdmaWVsZF9pZCcsICdmaWVsZF92YWx1ZScsICdvcHRpb25faWQnXSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNsYXRpb25zOiB3cGNmdG9fZ2xvYmFsX3NldHRpbmdzWyd0cmFuc2xhdGlvbnMnXSxcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgdmFsdWU6ICcnLFxuICAgICAgcmVnZW5lcmF0ZV90ZXh0czoge1xuICAgICAgICBsYWJlbDogd3BjZnRvX2dsb2JhbF9zZXR0aW5nc1sndHJhbnNsYXRpb25zJ10ucmVnZW5lcmF0ZV9mb250c190aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHdwY2Z0b19nbG9iYWxfc2V0dGluZ3NbJ3RyYW5zbGF0aW9ucyddLnJlZ2VuZXJhdGVfZm9udHNfbm90aWNlXG4gICAgICB9LFxuICAgICAgZm9udHNfZG93bmxvYWRfc2V0dGluZ190ZXh0czoge1xuICAgICAgICBsYWJlbDogd3BjZnRvX2dsb2JhbF9zZXR0aW5nc1sndHJhbnNsYXRpb25zJ10uZm9udHNfZG93bmxvYWRfc2V0dGluZ19sYWJlbCxcbiAgICAgICAgZGVzY3JpcHRpb246IHdwY2Z0b19nbG9iYWxfc2V0dGluZ3NbJ3RyYW5zbGF0aW9ucyddLmZvbnRzX2Rvd25sb2FkX3NldHRpbmdfZGVzY3JpcHRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICB0ZW1wbGF0ZTogXCJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIndwY2Z0b19mb250c19kb3dubG9hZF9zZXR0aW5nc1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvX2VuYWJsZV9mb250c1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIndwY2Z0b19nZW5lcmljX2ZpZWxkIHdwY2Z0b19nZW5lcmljX2NoZWNrYm94IHdwY2Z0b19nZW5lcmljX2ZpZWxkX3JlZ2VuZXJhdGVfZm9udHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHdwY2Z0b19maWVsZHNfYXNpZGVfYmVmb3JlIDpmaWVsZHM9XFxcImZvbnRzX2Rvd25sb2FkX3NldHRpbmdfdGV4dHNcXFwiIDpmaWVsZF9sYWJlbD1cXFwiZm9udHNfZG93bmxvYWRfc2V0dGluZ190ZXh0cy5sYWJlbFxcXCI+PC93cGNmdG9fZmllbGRzX2FzaWRlX2JlZm9yZT5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIndwY2Z0by1maWVsZC1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ3cGNmdG8tYWRtaW4tY2hlY2tib3ggd3BjZnRvX2VuYWJsZV9mb250c19jaGVja2JveFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIndwY2Z0by1hZG1pbi1jaGVja2JveC13cmFwcGVyIGlzX3RvZ2dsZVxcXCIgdi1iaW5kOmNsYXNzPVxcXCJ7J2FjdGl2ZScgOiB2YWx1ZX1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIndwY2Z0by1jaGVja2JveC1zd2l0Y2hlclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bmFtZT1cXFwiZmllbGRfbmFtZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmlkPVxcXCJmaWVsZF9pZFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cXFwidmFsdWVcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgdi1zaG93PVxcXCJ2YWx1ZVxcXCIgY2xhc3M9XFxcIndwY2Z0b19yZWdlbmVyYXRlX2ZvbnRzX2ZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid3BjZnRvX2dlbmVyaWNfZmllbGQgd3BjZnRvX2dlbmVyaWNfZmllbGRfZmxleF9pbnB1dCB3cGNmdG9fZ2VuZXJpY19maWVsZF9yZWdlbmVyYXRlX2ZvbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDx3cGNmdG9fZmllbGRzX2FzaWRlX2JlZm9yZSA6ZmllbGRzPVxcXCJyZWdlbmVyYXRlX3RleHRzXFxcIiA6ZmllbGRfbGFiZWw9XFxcInJlZ2VuZXJhdGVfdGV4dHMubGFiZWxcXFwiPjwvd3BjZnRvX2ZpZWxkc19hc2lkZV9iZWZvcmU+XFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCIjXFxcIiB2LWJpbmQ6Y2xhc3M9XFxcInsnbG9hZGluZyc6IGxvYWRpbmd9XFxcIiBjbGFzcz1cXFwiYnV0dG9uXFxcIiBAY2xpY2sucHJldmVudD1cXFwicmVnZW5lcmF0ZUZvbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyB0cmFuc2xhdGlvbnMucmVnZW5lcmF0ZV9mb250c19idG4gfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImxuciBsbnItc3luY1xcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICBcIixcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5maWVsZF92YWx1ZTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlZ2VuZXJhdGVGb250czogZnVuY3Rpb24gcmVnZW5lcmF0ZUZvbnRzKCkge1xuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgdmFyIHVybCA9IHN0bV93cGNmdG9fYWpheHVybCArICc/YWN0aW9uPXdwY2Z0b19yZWdlbmVyYXRlX2ZvbnRzJm5hbWU9JyArIHZtLm9wdGlvbl9pZCArICcmbm9uY2U9JyArIHN0bV93cGNmdG9fbm9uY2VzWyd3cGNmdG9fcmVnZW5lcmF0ZV9mb250cyddO1xuICAgICAgdGhpcy4kaHR0cC5wb3N0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9yZXNwb25zZSRkYXRhO1xuXG4gICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAocmVzcG9uc2UgIT09IG51bGwgJiYgcmVzcG9uc2UgIT09IHZvaWQgMCAmJiAoX3Jlc3BvbnNlJGRhdGEgPSByZXNwb25zZS5kYXRhKSAhPT0gbnVsbCAmJiBfcmVzcG9uc2UkZGF0YSAhPT0gdm9pZCAwICYmIF9yZXNwb25zZSRkYXRhLnJlbG9hZCkge1xuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgdGhpcy4kZW1pdCgnd3BjZnRvLWdldC12YWx1ZScsIF92YWx1ZSk7XG4gICAgfVxuICB9XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxHQUFHLENBQUNDLFNBQUosQ0FBYyx5QkFBZCxFQUF5QztFQUN2Q0MsS0FBSyxFQUFFLENBQUMsUUFBRCxFQUFXLGFBQVgsRUFBMEIsWUFBMUIsRUFBd0MsVUFBeEMsRUFBb0QsYUFBcEQsRUFBbUUsV0FBbkUsQ0FEZ0M7RUFFdkNDLElBQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0lBQ3BCLE9BQU87TUFDTEMsWUFBWSxFQUFFQyxzQkFBc0IsQ0FBQyxjQUFELENBRC9CO01BRUxDLE9BQU8sRUFBRSxLQUZKO01BR0xDLEtBQUssRUFBRSxFQUhGO01BSUxDLGdCQUFnQixFQUFFO1FBQ2hCQyxLQUFLLEVBQUVKLHNCQUFzQixDQUFDLGNBQUQsQ0FBdEIsQ0FBdUNLLHNCQUQ5QjtRQUVoQkMsV0FBVyxFQUFFTixzQkFBc0IsQ0FBQyxjQUFELENBQXRCLENBQXVDTztNQUZwQyxDQUpiO01BUUxDLDRCQUE0QixFQUFFO1FBQzVCSixLQUFLLEVBQUVKLHNCQUFzQixDQUFDLGNBQUQsQ0FBdEIsQ0FBdUNTLDRCQURsQjtRQUU1QkgsV0FBVyxFQUFFTixzQkFBc0IsQ0FBQyxjQUFELENBQXRCLENBQXVDVTtNQUZ4QjtJQVJ6QixDQUFQO0VBYUQsQ0FoQnNDO0VBaUJ2Q0MsUUFBUSxFQUFFLGk3REFqQjZCO0VBa0J2Q0MsT0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7SUFDMUIsS0FBS1YsS0FBTCxHQUFhLEtBQUtXLFdBQWxCO0VBQ0QsQ0FwQnNDO0VBcUJ2Q0MsT0FBTyxFQUFFO0lBQ1BDLGVBQWUsRUFBRSxTQUFTQSxlQUFULEdBQTJCO01BQzFDLElBQUlDLEVBQUUsR0FBRyxJQUFUO01BQ0FBLEVBQUUsQ0FBQ2YsT0FBSCxHQUFhLElBQWI7TUFDQSxJQUFJZ0IsR0FBRyxHQUFHQyxrQkFBa0IsR0FBRyx1Q0FBckIsR0FBK0RGLEVBQUUsQ0FBQ0csU0FBbEUsR0FBOEUsU0FBOUUsR0FBMEZDLGlCQUFpQixDQUFDLHlCQUFELENBQXJIO01BQ0EsS0FBS0MsS0FBTCxDQUFXQyxJQUFYLENBQWdCTCxHQUFoQixFQUFxQk0sSUFBckIsQ0FBMEIsVUFBVUMsUUFBVixFQUFvQjtRQUM1QyxJQUFJQyxjQUFKOztRQUVBVCxFQUFFLENBQUNmLE9BQUgsR0FBYSxLQUFiOztRQUVBLElBQUl1QixRQUFRLEtBQUssSUFBYixJQUFxQkEsUUFBUSxLQUFLLEtBQUssQ0FBdkMsSUFBNEMsQ0FBQ0MsY0FBYyxHQUFHRCxRQUFRLENBQUMxQixJQUEzQixNQUFxQyxJQUFqRixJQUF5RjJCLGNBQWMsS0FBSyxLQUFLLENBQWpILElBQXNIQSxjQUFjLENBQUNDLE1BQXpJLEVBQWlKO1VBQy9JQyxRQUFRLENBQUNELE1BQVQ7UUFDRDtNQUNGLENBUkQ7SUFTRDtFQWRNLENBckI4QjtFQXFDdkNFLEtBQUssRUFBRTtJQUNMMUIsS0FBSyxFQUFFLFNBQVNBLEtBQVQsQ0FBZTJCLE1BQWYsRUFBdUI7TUFDNUIsS0FBS0MsS0FBTCxDQUFXLGtCQUFYLEVBQStCRCxNQUEvQjtJQUNEO0VBSEk7QUFyQ2dDLENBQXpDIn0=
},{}]},{},[1])