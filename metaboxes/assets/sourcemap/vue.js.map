{"version":3,"names":[],"mappings":"","sources":["vue.js"],"sourcesContent":["/*!\r\n * Vue.js v2.6.12\r\n * (c) 2014-2020 Evan You\r\n * Released under the MIT License.\r\n */\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = global || self, global.Vue = factory());\r\n}(this, function () { 'use strict';\r\n\r\n  /*  */\r\n\r\n  var emptyObject = Object.freeze({});\r\n\r\n  // These helpers produce better VM code in JS engines due to their\r\n  // explicitness and function inlining.\r\n  function isUndef (v) {\r\n    return v === undefined || v === null\r\n  }\r\n\r\n  function isDef (v) {\r\n    return v !== undefined && v !== null\r\n  }\r\n\r\n  function isTrue (v) {\r\n    return v === true\r\n  }\r\n\r\n  function isFalse (v) {\r\n    return v === false\r\n  }\r\n\r\n  /**\r\n   * Check if value is primitive.\r\n   */\r\n  function isPrimitive (value) {\r\n    return (\r\n      typeof value === 'string' ||\r\n      typeof value === 'number' ||\r\n      // $flow-disable-line\r\n      typeof value === 'symbol' ||\r\n      typeof value === 'boolean'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Quick object check - this is primarily used to tell\r\n   * Objects from primitive values when we know the value\r\n   * is a JSON-compliant type.\r\n   */\r\n  function isObject (obj) {\r\n    return obj !== null && typeof obj === 'object'\r\n  }\r\n\r\n  /**\r\n   * Get the raw type string of a value, e.g., [object Object].\r\n   */\r\n  var _toString = Object.prototype.toString;\r\n\r\n  function toRawType (value) {\r\n    return _toString.call(value).slice(8, -1)\r\n  }\r\n\r\n  /**\r\n   * Strict object type check. Only returns true\r\n   * for plain JavaScript objects.\r\n   */\r\n  function isPlainObject (obj) {\r\n    return _toString.call(obj) === '[object Object]'\r\n  }\r\n\r\n  function isRegExp (v) {\r\n    return _toString.call(v) === '[object RegExp]'\r\n  }\r\n\r\n  /**\r\n   * Check if val is a valid array index.\r\n   */\r\n  function isValidArrayIndex (val) {\r\n    var n = parseFloat(String(val));\r\n    return n >= 0 && Math.floor(n) === n && isFinite(val)\r\n  }\r\n\r\n  function isPromise (val) {\r\n    return (\r\n      isDef(val) &&\r\n      typeof val.then === 'function' &&\r\n      typeof val.catch === 'function'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Convert a value to a string that is actually rendered.\r\n   */\r\n  function toString (val) {\r\n    return val == null\r\n      ? ''\r\n      : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\r\n        ? JSON.stringify(val, null, 2)\r\n        : String(val)\r\n  }\r\n\r\n  /**\r\n   * Convert an input value to a number for persistence.\r\n   * If the conversion fails, return original string.\r\n   */\r\n  function toNumber (val) {\r\n    var n = parseFloat(val);\r\n    return isNaN(n) ? val : n\r\n  }\r\n\r\n  /**\r\n   * Make a map and return a function for checking if a key\r\n   * is in that map.\r\n   */\r\n  function makeMap (\r\n    str,\r\n    expectsLowerCase\r\n  ) {\r\n    var map = Object.create(null);\r\n    var list = str.split(',');\r\n    for (var i = 0; i < list.length; i++) {\r\n      map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase\r\n      ? function (val) { return map[val.toLowerCase()]; }\r\n      : function (val) { return map[val]; }\r\n  }\r\n\r\n  /**\r\n   * Check if a tag is a built-in tag.\r\n   */\r\n  var isBuiltInTag = makeMap('slot,component', true);\r\n\r\n  /**\r\n   * Check if an attribute is a reserved attribute.\r\n   */\r\n  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\r\n\r\n  /**\r\n   * Remove an item from an array.\r\n   */\r\n  function remove (arr, item) {\r\n    if (arr.length) {\r\n      var index = arr.indexOf(item);\r\n      if (index > -1) {\r\n        return arr.splice(index, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether an object has the property.\r\n   */\r\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n  function hasOwn (obj, key) {\r\n    return hasOwnProperty.call(obj, key)\r\n  }\r\n\r\n  /**\r\n   * Create a cached version of a pure function.\r\n   */\r\n  function cached (fn) {\r\n    var cache = Object.create(null);\r\n    return (function cachedFn (str) {\r\n      var hit = cache[str];\r\n      return hit || (cache[str] = fn(str))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Camelize a hyphen-delimited string.\r\n   */\r\n  var camelizeRE = /-(\\w)/g;\r\n  var camelize = cached(function (str) {\r\n    return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\r\n  });\r\n\r\n  /**\r\n   * Capitalize a string.\r\n   */\r\n  var capitalize = cached(function (str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n  });\r\n\r\n  /**\r\n   * Hyphenate a camelCase string.\r\n   */\r\n  var hyphenateRE = /\\B([A-Z])/g;\r\n  var hyphenate = cached(function (str) {\r\n    return str.replace(hyphenateRE, '-$1').toLowerCase()\r\n  });\r\n\r\n  /**\r\n   * Simple bind polyfill for environments that do not support it,\r\n   * e.g., PhantomJS 1.x. Technically, we don't need this anymore\r\n   * since native bind is now performant enough in most browsers.\r\n   * But removing it would mean breaking code that was able to run in\r\n   * PhantomJS 1.x, so this must be kept for backward compatibility.\r\n   */\r\n\r\n  /* istanbul ignore next */\r\n  function polyfillBind (fn, ctx) {\r\n    function boundFn (a) {\r\n      var l = arguments.length;\r\n      return l\r\n        ? l > 1\r\n          ? fn.apply(ctx, arguments)\r\n          : fn.call(ctx, a)\r\n        : fn.call(ctx)\r\n    }\r\n\r\n    boundFn._length = fn.length;\r\n    return boundFn\r\n  }\r\n\r\n  function nativeBind (fn, ctx) {\r\n    return fn.bind(ctx)\r\n  }\r\n\r\n  var bind = Function.prototype.bind\r\n    ? nativeBind\r\n    : polyfillBind;\r\n\r\n  /**\r\n   * Convert an Array-like object to a real Array.\r\n   */\r\n  function toArray (list, start) {\r\n    start = start || 0;\r\n    var i = list.length - start;\r\n    var ret = new Array(i);\r\n    while (i--) {\r\n      ret[i] = list[i + start];\r\n    }\r\n    return ret\r\n  }\r\n\r\n  /**\r\n   * Mix properties into target object.\r\n   */\r\n  function extend (to, _from) {\r\n    for (var key in _from) {\r\n      to[key] = _from[key];\r\n    }\r\n    return to\r\n  }\r\n\r\n  /**\r\n   * Merge an Array of Objects into a single Object.\r\n   */\r\n  function toObject (arr) {\r\n    var res = {};\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i]) {\r\n        extend(res, arr[i]);\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /* eslint-disable no-unused-vars */\r\n\r\n  /**\r\n   * Perform no operation.\r\n   * Stubbing args to make Flow happy without leaving useless transpiled code\r\n   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\r\n   */\r\n  function noop (a, b, c) {}\r\n\r\n  /**\r\n   * Always return false.\r\n   */\r\n  var no = function (a, b, c) { return false; };\r\n\r\n  /* eslint-enable no-unused-vars */\r\n\r\n  /**\r\n   * Return the same value.\r\n   */\r\n  var identity = function (_) { return _; };\r\n\r\n  /**\r\n   * Generate a string containing static keys from compiler modules.\r\n   */\r\n  function genStaticKeys (modules) {\r\n    return modules.reduce(function (keys, m) {\r\n      return keys.concat(m.staticKeys || [])\r\n    }, []).join(',')\r\n  }\r\n\r\n  /**\r\n   * Check if two values are loosely equal - that is,\r\n   * if they are plain objects, do they have the same shape?\r\n   */\r\n  function looseEqual (a, b) {\r\n    if (a === b) { return true }\r\n    var isObjectA = isObject(a);\r\n    var isObjectB = isObject(b);\r\n    if (isObjectA && isObjectB) {\r\n      try {\r\n        var isArrayA = Array.isArray(a);\r\n        var isArrayB = Array.isArray(b);\r\n        if (isArrayA && isArrayB) {\r\n          return a.length === b.length && a.every(function (e, i) {\r\n            return looseEqual(e, b[i])\r\n          })\r\n        } else if (a instanceof Date && b instanceof Date) {\r\n          return a.getTime() === b.getTime()\r\n        } else if (!isArrayA && !isArrayB) {\r\n          var keysA = Object.keys(a);\r\n          var keysB = Object.keys(b);\r\n          return keysA.length === keysB.length && keysA.every(function (key) {\r\n            return looseEqual(a[key], b[key])\r\n          })\r\n        } else {\r\n          /* istanbul ignore next */\r\n          return false\r\n        }\r\n      } catch (e) {\r\n        /* istanbul ignore next */\r\n        return false\r\n      }\r\n    } else if (!isObjectA && !isObjectB) {\r\n      return String(a) === String(b)\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the first index at which a loosely equal value can be\r\n   * found in the array (if value is a plain object, the array must\r\n   * contain an object of the same shape), or -1 if it is not present.\r\n   */\r\n  function looseIndexOf (arr, val) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (looseEqual(arr[i], val)) { return i }\r\n    }\r\n    return -1\r\n  }\r\n\r\n  /**\r\n   * Ensure a function is called only once.\r\n   */\r\n  function once (fn) {\r\n    var called = false;\r\n    return function () {\r\n      if (!called) {\r\n        called = true;\r\n        fn.apply(this, arguments);\r\n      }\r\n    }\r\n  }\r\n\r\n  var SSR_ATTR = 'data-server-rendered';\r\n\r\n  var ASSET_TYPES = [\r\n    'component',\r\n    'directive',\r\n    'filter'\r\n  ];\r\n\r\n  var LIFECYCLE_HOOKS = [\r\n    'beforeCreate',\r\n    'created',\r\n    'beforeMount',\r\n    'mounted',\r\n    'beforeUpdate',\r\n    'updated',\r\n    'beforeDestroy',\r\n    'destroyed',\r\n    'activated',\r\n    'deactivated',\r\n    'errorCaptured',\r\n    'serverPrefetch'\r\n  ];\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  var config = ({\r\n    /**\r\n     * Option merge strategies (used in core/util/options)\r\n     */\r\n    // $flow-disable-line\r\n    optionMergeStrategies: Object.create(null),\r\n\r\n    /**\r\n     * Whether to suppress warnings.\r\n     */\r\n    silent: false,\r\n\r\n    /**\r\n     * Show production mode tip message on boot?\r\n     */\r\n    productionTip: \"development\" !== 'production',\r\n\r\n    /**\r\n     * Whether to enable devtools\r\n     */\r\n    devtools: \"development\" !== 'production',\r\n\r\n    /**\r\n     * Whether to record perf\r\n     */\r\n    performance: false,\r\n\r\n    /**\r\n     * Error handler for watcher errors\r\n     */\r\n    errorHandler: null,\r\n\r\n    /**\r\n     * Warn handler for watcher warns\r\n     */\r\n    warnHandler: null,\r\n\r\n    /**\r\n     * Ignore certain custom elements\r\n     */\r\n    ignoredElements: [],\r\n\r\n    /**\r\n     * Custom user key aliases for v-on\r\n     */\r\n    // $flow-disable-line\r\n    keyCodes: Object.create(null),\r\n\r\n    /**\r\n     * Check if a tag is reserved so that it cannot be registered as a\r\n     * component. This is platform-dependent and may be overwritten.\r\n     */\r\n    isReservedTag: no,\r\n\r\n    /**\r\n     * Check if an attribute is reserved so that it cannot be used as a component\r\n     * prop. This is platform-dependent and may be overwritten.\r\n     */\r\n    isReservedAttr: no,\r\n\r\n    /**\r\n     * Check if a tag is an unknown element.\r\n     * Platform-dependent.\r\n     */\r\n    isUnknownElement: no,\r\n\r\n    /**\r\n     * Get the namespace of an element\r\n     */\r\n    getTagNamespace: noop,\r\n\r\n    /**\r\n     * Parse the real tag name for the specific platform.\r\n     */\r\n    parsePlatformTagName: identity,\r\n\r\n    /**\r\n     * Check if an attribute must be bound using property, e.g. value\r\n     * Platform-dependent.\r\n     */\r\n    mustUseProp: no,\r\n\r\n    /**\r\n     * Perform updates asynchronously. Intended to be used by Vue Test Utils\r\n     * This will significantly reduce performance if set to false.\r\n     */\r\n    async: true,\r\n\r\n    /**\r\n     * Exposed for legacy reasons\r\n     */\r\n    _lifecycleHooks: LIFECYCLE_HOOKS\r\n  });\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * unicode letters used for parsing html tags, component names and property paths.\r\n   * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\r\n   * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\r\n   */\r\n  var unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\r\n\r\n  /**\r\n   * Check if a string starts with $ or _\r\n   */\r\n  function isReserved (str) {\r\n    var c = (str + '').charCodeAt(0);\r\n    return c === 0x24 || c === 0x5F\r\n  }\r\n\r\n  /**\r\n   * Define a property.\r\n   */\r\n  function def (obj, key, val, enumerable) {\r\n    Object.defineProperty(obj, key, {\r\n      value: val,\r\n      enumerable: !!enumerable,\r\n      writable: true,\r\n      configurable: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse simple path.\r\n   */\r\n  var bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\r\n  function parsePath (path) {\r\n    if (bailRE.test(path)) {\r\n      return\r\n    }\r\n    var segments = path.split('.');\r\n    return function (obj) {\r\n      for (var i = 0; i < segments.length; i++) {\r\n        if (!obj) { return }\r\n        obj = obj[segments[i]];\r\n      }\r\n      return obj\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  // can we use __proto__?\r\n  var hasProto = '__proto__' in {};\r\n\r\n  // Browser environment sniffing\r\n  var inBrowser = typeof window !== 'undefined';\r\n  var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\r\n  var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\r\n  var UA = inBrowser && window.navigator.userAgent.toLowerCase();\r\n  var isIE = UA && /msie|trident/.test(UA);\r\n  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;\r\n  var isEdge = UA && UA.indexOf('edge/') > 0;\r\n  var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\r\n  var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\r\n  var isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\r\n  var isPhantomJS = UA && /phantomjs/.test(UA);\r\n  var isFF = UA && UA.match(/firefox\\/(\\d+)/);\r\n\r\n  // Firefox has a \"watch\" function on Object.prototype...\r\n  var nativeWatch = ({}).watch;\r\n\r\n  var supportsPassive = false;\r\n  if (inBrowser) {\r\n    try {\r\n      var opts = {};\r\n      Object.defineProperty(opts, 'passive', ({\r\n        get: function get () {\r\n          /* istanbul ignore next */\r\n          supportsPassive = true;\r\n        }\r\n      })); // https://github.com/facebook/flow/issues/285\r\n      window.addEventListener('test-passive', null, opts);\r\n    } catch (e) {}\r\n  }\r\n\r\n  // this needs to be lazy-evaled because vue may be required before\r\n  // vue-server-renderer can set VUE_ENV\r\n  var _isServer;\r\n  var isServerRendering = function () {\r\n    if (_isServer === undefined) {\r\n      /* istanbul ignore if */\r\n      if (!inBrowser && !inWeex && typeof global !== 'undefined') {\r\n        // detect presence of vue-server-renderer and avoid\r\n        // Webpack shimming the process\r\n        _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\r\n      } else {\r\n        _isServer = false;\r\n      }\r\n    }\r\n    return _isServer\r\n  };\r\n\r\n  // detect devtools\r\n  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\r\n\r\n  /* istanbul ignore next */\r\n  function isNative (Ctor) {\r\n    return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\r\n  }\r\n\r\n  var hasSymbol =\r\n    typeof Symbol !== 'undefined' && isNative(Symbol) &&\r\n    typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\r\n\r\n  var _Set;\r\n  /* istanbul ignore if */ // $flow-disable-line\r\n  if (typeof Set !== 'undefined' && isNative(Set)) {\r\n    // use native Set when available.\r\n    _Set = Set;\r\n  } else {\r\n    // a non-standard Set polyfill that only works with primitive keys.\r\n    _Set = /*@__PURE__*/(function () {\r\n      function Set () {\r\n        this.set = Object.create(null);\r\n      }\r\n      Set.prototype.has = function has (key) {\r\n        return this.set[key] === true\r\n      };\r\n      Set.prototype.add = function add (key) {\r\n        this.set[key] = true;\r\n      };\r\n      Set.prototype.clear = function clear () {\r\n        this.set = Object.create(null);\r\n      };\r\n\r\n      return Set;\r\n    }());\r\n  }\r\n\r\n  /*  */\r\n\r\n  var warn = noop;\r\n  var tip = noop;\r\n  var generateComponentTrace = (noop); // work around flow check\r\n  var formatComponentName = (noop);\r\n\r\n  {\r\n    var hasConsole = typeof console !== 'undefined';\r\n    var classifyRE = /(?:^|[-_])(\\w)/g;\r\n    var classify = function (str) { return str\r\n      .replace(classifyRE, function (c) { return c.toUpperCase(); })\r\n      .replace(/[-_]/g, ''); };\r\n\r\n    warn = function (msg, vm) {\r\n      var trace = vm ? generateComponentTrace(vm) : '';\r\n\r\n      if (config.warnHandler) {\r\n        config.warnHandler.call(null, msg, vm, trace);\r\n      } else if (hasConsole && (!config.silent)) {\r\n        console.error((\"[Vue warn]: \" + msg + trace));\r\n      }\r\n    };\r\n\r\n    tip = function (msg, vm) {\r\n      if (hasConsole && (!config.silent)) {\r\n        console.warn(\"[Vue tip]: \" + msg + (\r\n          vm ? generateComponentTrace(vm) : ''\r\n        ));\r\n      }\r\n    };\r\n\r\n    formatComponentName = function (vm, includeFile) {\r\n      if (vm.$root === vm) {\r\n        return '<Root>'\r\n      }\r\n      var options = typeof vm === 'function' && vm.cid != null\r\n        ? vm.options\r\n        : vm._isVue\r\n          ? vm.$options || vm.constructor.options\r\n          : vm;\r\n      var name = options.name || options._componentTag;\r\n      var file = options.__file;\r\n      if (!name && file) {\r\n        var match = file.match(/([^/\\\\]+)\\.vue$/);\r\n        name = match && match[1];\r\n      }\r\n\r\n      return (\r\n        (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\r\n        (file && includeFile !== false ? (\" at \" + file) : '')\r\n      )\r\n    };\r\n\r\n    var repeat = function (str, n) {\r\n      var res = '';\r\n      while (n) {\r\n        if (n % 2 === 1) { res += str; }\r\n        if (n > 1) { str += str; }\r\n        n >>= 1;\r\n      }\r\n      return res\r\n    };\r\n\r\n    generateComponentTrace = function (vm) {\r\n      if (vm._isVue && vm.$parent) {\r\n        var tree = [];\r\n        var currentRecursiveSequence = 0;\r\n        while (vm) {\r\n          if (tree.length > 0) {\r\n            var last = tree[tree.length - 1];\r\n            if (last.constructor === vm.constructor) {\r\n              currentRecursiveSequence++;\r\n              vm = vm.$parent;\r\n              continue\r\n            } else if (currentRecursiveSequence > 0) {\r\n              tree[tree.length - 1] = [last, currentRecursiveSequence];\r\n              currentRecursiveSequence = 0;\r\n            }\r\n          }\r\n          tree.push(vm);\r\n          vm = vm.$parent;\r\n        }\r\n        return '\\n\\nfound in\\n\\n' + tree\r\n          .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\r\n              ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\r\n              : formatComponentName(vm))); })\r\n          .join('\\n')\r\n      } else {\r\n        return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\r\n      }\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  var uid = 0;\r\n\r\n  /**\r\n   * A dep is an observable that can have multiple\r\n   * directives subscribing to it.\r\n   */\r\n  var Dep = function Dep () {\r\n    this.id = uid++;\r\n    this.subs = [];\r\n  };\r\n\r\n  Dep.prototype.addSub = function addSub (sub) {\r\n    this.subs.push(sub);\r\n  };\r\n\r\n  Dep.prototype.removeSub = function removeSub (sub) {\r\n    remove(this.subs, sub);\r\n  };\r\n\r\n  Dep.prototype.depend = function depend () {\r\n    if (Dep.target) {\r\n      Dep.target.addDep(this);\r\n    }\r\n  };\r\n\r\n  Dep.prototype.notify = function notify () {\r\n    // stabilize the subscriber list first\r\n    var subs = this.subs.slice();\r\n    if (!config.async) {\r\n      // subs aren't sorted in scheduler if not running async\r\n      // we need to sort them now to make sure they fire in correct\r\n      // order\r\n      subs.sort(function (a, b) { return a.id - b.id; });\r\n    }\r\n    for (var i = 0, l = subs.length; i < l; i++) {\r\n      subs[i].update();\r\n    }\r\n  };\r\n\r\n  // The current target watcher being evaluated.\r\n  // This is globally unique because only one watcher\r\n  // can be evaluated at a time.\r\n  Dep.target = null;\r\n  var targetStack = [];\r\n\r\n  function pushTarget (target) {\r\n    targetStack.push(target);\r\n    Dep.target = target;\r\n  }\r\n\r\n  function popTarget () {\r\n    targetStack.pop();\r\n    Dep.target = targetStack[targetStack.length - 1];\r\n  }\r\n\r\n  /*  */\r\n\r\n  var VNode = function VNode (\r\n    tag,\r\n    data,\r\n    children,\r\n    text,\r\n    elm,\r\n    context,\r\n    componentOptions,\r\n    asyncFactory\r\n  ) {\r\n    this.tag = tag;\r\n    this.data = data;\r\n    this.children = children;\r\n    this.text = text;\r\n    this.elm = elm;\r\n    this.ns = undefined;\r\n    this.context = context;\r\n    this.fnContext = undefined;\r\n    this.fnOptions = undefined;\r\n    this.fnScopeId = undefined;\r\n    this.key = data && data.key;\r\n    this.componentOptions = componentOptions;\r\n    this.componentInstance = undefined;\r\n    this.parent = undefined;\r\n    this.raw = false;\r\n    this.isStatic = false;\r\n    this.isRootInsert = true;\r\n    this.isComment = false;\r\n    this.isCloned = false;\r\n    this.isOnce = false;\r\n    this.asyncFactory = asyncFactory;\r\n    this.asyncMeta = undefined;\r\n    this.isAsyncPlaceholder = false;\r\n  };\r\n\r\n  var prototypeAccessors = { child: { configurable: true } };\r\n\r\n  // DEPRECATED: alias for componentInstance for backwards compat.\r\n  /* istanbul ignore next */\r\n  prototypeAccessors.child.get = function () {\r\n    return this.componentInstance\r\n  };\r\n\r\n  Object.defineProperties( VNode.prototype, prototypeAccessors );\r\n\r\n  var createEmptyVNode = function (text) {\r\n    if ( text === void 0 ) text = '';\r\n\r\n    var node = new VNode();\r\n    node.text = text;\r\n    node.isComment = true;\r\n    return node\r\n  };\r\n\r\n  function createTextVNode (val) {\r\n    return new VNode(undefined, undefined, undefined, String(val))\r\n  }\r\n\r\n  // optimized shallow clone\r\n  // used for static nodes and slot nodes because they may be reused across\r\n  // multiple renders, cloning them avoids errors when DOM manipulations rely\r\n  // on their elm reference.\r\n  function cloneVNode (vnode) {\r\n    var cloned = new VNode(\r\n      vnode.tag,\r\n      vnode.data,\r\n      // #7975\r\n      // clone children array to avoid mutating original in case of cloning\r\n      // a child.\r\n      vnode.children && vnode.children.slice(),\r\n      vnode.text,\r\n      vnode.elm,\r\n      vnode.context,\r\n      vnode.componentOptions,\r\n      vnode.asyncFactory\r\n    );\r\n    cloned.ns = vnode.ns;\r\n    cloned.isStatic = vnode.isStatic;\r\n    cloned.key = vnode.key;\r\n    cloned.isComment = vnode.isComment;\r\n    cloned.fnContext = vnode.fnContext;\r\n    cloned.fnOptions = vnode.fnOptions;\r\n    cloned.fnScopeId = vnode.fnScopeId;\r\n    cloned.asyncMeta = vnode.asyncMeta;\r\n    cloned.isCloned = true;\r\n    return cloned\r\n  }\r\n\r\n  /*\r\n   * not type checking this file because flow doesn't play well with\r\n   * dynamically accessing methods on Array prototype\r\n   */\r\n\r\n  var arrayProto = Array.prototype;\r\n  var arrayMethods = Object.create(arrayProto);\r\n\r\n  var methodsToPatch = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'splice',\r\n    'sort',\r\n    'reverse'\r\n  ];\r\n\r\n  /**\r\n   * Intercept mutating methods and emit events\r\n   */\r\n  methodsToPatch.forEach(function (method) {\r\n    // cache original method\r\n    var original = arrayProto[method];\r\n    def(arrayMethods, method, function mutator () {\r\n      var args = [], len = arguments.length;\r\n      while ( len-- ) args[ len ] = arguments[ len ];\r\n\r\n      var result = original.apply(this, args);\r\n      var ob = this.__ob__;\r\n      var inserted;\r\n      switch (method) {\r\n        case 'push':\r\n        case 'unshift':\r\n          inserted = args;\r\n          break\r\n        case 'splice':\r\n          inserted = args.slice(2);\r\n          break\r\n      }\r\n      if (inserted) { ob.observeArray(inserted); }\r\n      // notify change\r\n      ob.dep.notify();\r\n      return result\r\n    });\r\n  });\r\n\r\n  /*  */\r\n\r\n  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\r\n\r\n  /**\r\n   * In some cases we may want to disable observation inside a component's\r\n   * update computation.\r\n   */\r\n  var shouldObserve = true;\r\n\r\n  function toggleObserving (value) {\r\n    shouldObserve = value;\r\n  }\r\n\r\n  /**\r\n   * Observer class that is attached to each observed\r\n   * object. Once attached, the observer converts the target\r\n   * object's property keys into getter/setters that\r\n   * collect dependencies and dispatch updates.\r\n   */\r\n  var Observer = function Observer (value) {\r\n    this.value = value;\r\n    this.dep = new Dep();\r\n    this.vmCount = 0;\r\n    def(value, '__ob__', this);\r\n    if (Array.isArray(value)) {\r\n      if (hasProto) {\r\n        protoAugment(value, arrayMethods);\r\n      } else {\r\n        copyAugment(value, arrayMethods, arrayKeys);\r\n      }\r\n      this.observeArray(value);\r\n    } else {\r\n      this.walk(value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Walk through all properties and convert them into\r\n   * getter/setters. This method should only be called when\r\n   * value type is Object.\r\n   */\r\n  Observer.prototype.walk = function walk (obj) {\r\n    var keys = Object.keys(obj);\r\n    for (var i = 0; i < keys.length; i++) {\r\n      defineReactive$$1(obj, keys[i]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Observe a list of Array items.\r\n   */\r\n  Observer.prototype.observeArray = function observeArray (items) {\r\n    for (var i = 0, l = items.length; i < l; i++) {\r\n      observe(items[i]);\r\n    }\r\n  };\r\n\r\n  // helpers\r\n\r\n  /**\r\n   * Augment a target Object or Array by intercepting\r\n   * the prototype chain using __proto__\r\n   */\r\n  function protoAugment (target, src) {\r\n    /* eslint-disable no-proto */\r\n    target.__proto__ = src;\r\n    /* eslint-enable no-proto */\r\n  }\r\n\r\n  /**\r\n   * Augment a target Object or Array by defining\r\n   * hidden properties.\r\n   */\r\n  /* istanbul ignore next */\r\n  function copyAugment (target, src, keys) {\r\n    for (var i = 0, l = keys.length; i < l; i++) {\r\n      var key = keys[i];\r\n      def(target, key, src[key]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempt to create an observer instance for a value,\r\n   * returns the new observer if successfully observed,\r\n   * or the existing observer if the value already has one.\r\n   */\r\n  function observe (value, asRootData) {\r\n    if (!isObject(value) || value instanceof VNode) {\r\n      return\r\n    }\r\n    var ob;\r\n    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n      ob = value.__ob__;\r\n    } else if (\r\n      shouldObserve &&\r\n      !isServerRendering() &&\r\n      (Array.isArray(value) || isPlainObject(value)) &&\r\n      Object.isExtensible(value) &&\r\n      !value._isVue\r\n    ) {\r\n      ob = new Observer(value);\r\n    }\r\n    if (asRootData && ob) {\r\n      ob.vmCount++;\r\n    }\r\n    return ob\r\n  }\r\n\r\n  /**\r\n   * Define a reactive property on an Object.\r\n   */\r\n  function defineReactive$$1 (\r\n    obj,\r\n    key,\r\n    val,\r\n    customSetter,\r\n    shallow\r\n  ) {\r\n    var dep = new Dep();\r\n\r\n    var property = Object.getOwnPropertyDescriptor(obj, key);\r\n    if (property && property.configurable === false) {\r\n      return\r\n    }\r\n\r\n    // cater for pre-defined getter/setters\r\n    var getter = property && property.get;\r\n    var setter = property && property.set;\r\n    if ((!getter || setter) && arguments.length === 2) {\r\n      val = obj[key];\r\n    }\r\n\r\n    var childOb = !shallow && observe(val);\r\n    Object.defineProperty(obj, key, {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get: function reactiveGetter () {\r\n        var value = getter ? getter.call(obj) : val;\r\n        if (Dep.target) {\r\n          dep.depend();\r\n          if (childOb) {\r\n            childOb.dep.depend();\r\n            if (Array.isArray(value)) {\r\n              dependArray(value);\r\n            }\r\n          }\r\n        }\r\n        return value\r\n      },\r\n      set: function reactiveSetter (newVal) {\r\n        var value = getter ? getter.call(obj) : val;\r\n        /* eslint-disable no-self-compare */\r\n        if (newVal === value || (newVal !== newVal && value !== value)) {\r\n          return\r\n        }\r\n        /* eslint-enable no-self-compare */\r\n        if (customSetter) {\r\n          customSetter();\r\n        }\r\n        // #7981: for accessor properties without setter\r\n        if (getter && !setter) { return }\r\n        if (setter) {\r\n          setter.call(obj, newVal);\r\n        } else {\r\n          val = newVal;\r\n        }\r\n        childOb = !shallow && observe(newVal);\r\n        dep.notify();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set a property on an object. Adds the new property and\r\n   * triggers change notification if the property doesn't\r\n   * already exist.\r\n   */\r\n  function set (target, key, val) {\r\n    if (isUndef(target) || isPrimitive(target)\r\n    ) {\r\n      warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\r\n    }\r\n    if (Array.isArray(target) && isValidArrayIndex(key)) {\r\n      target.length = Math.max(target.length, key);\r\n      target.splice(key, 1, val);\r\n      return val\r\n    }\r\n    if (key in target && !(key in Object.prototype)) {\r\n      target[key] = val;\r\n      return val\r\n    }\r\n    var ob = (target).__ob__;\r\n    if (target._isVue || (ob && ob.vmCount)) {\r\n      warn(\r\n        'Avoid adding reactive properties to a Vue instance or its root $data ' +\r\n        'at runtime - declare it upfront in the data option.'\r\n      );\r\n      return val\r\n    }\r\n    if (!ob) {\r\n      target[key] = val;\r\n      return val\r\n    }\r\n    defineReactive$$1(ob.value, key, val);\r\n    ob.dep.notify();\r\n    return val\r\n  }\r\n\r\n  /**\r\n   * Delete a property and trigger change if necessary.\r\n   */\r\n  function del (target, key) {\r\n    if (isUndef(target) || isPrimitive(target)\r\n    ) {\r\n      warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\r\n    }\r\n    if (Array.isArray(target) && isValidArrayIndex(key)) {\r\n      target.splice(key, 1);\r\n      return\r\n    }\r\n    var ob = (target).__ob__;\r\n    if (target._isVue || (ob && ob.vmCount)) {\r\n      warn(\r\n        'Avoid deleting properties on a Vue instance or its root $data ' +\r\n        '- just set it to null.'\r\n      );\r\n      return\r\n    }\r\n    if (!hasOwn(target, key)) {\r\n      return\r\n    }\r\n    delete target[key];\r\n    if (!ob) {\r\n      return\r\n    }\r\n    ob.dep.notify();\r\n  }\r\n\r\n  /**\r\n   * Collect dependencies on array elements when the array is touched, since\r\n   * we cannot intercept array element access like property getters.\r\n   */\r\n  function dependArray (value) {\r\n    for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\r\n      e = value[i];\r\n      e && e.__ob__ && e.__ob__.dep.depend();\r\n      if (Array.isArray(e)) {\r\n        dependArray(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Option overwriting strategies are functions that handle\r\n   * how to merge a parent option value and a child option\r\n   * value into the final value.\r\n   */\r\n  var strats = config.optionMergeStrategies;\r\n\r\n  /**\r\n   * Options with restrictions\r\n   */\r\n  {\r\n    strats.el = strats.propsData = function (parent, child, vm, key) {\r\n      if (!vm) {\r\n        warn(\r\n          \"option \\\"\" + key + \"\\\" can only be used during instance \" +\r\n          'creation with the `new` keyword.'\r\n        );\r\n      }\r\n      return defaultStrat(parent, child)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper that recursively merges two data objects together.\r\n   */\r\n  function mergeData (to, from) {\r\n    if (!from) { return to }\r\n    var key, toVal, fromVal;\r\n\r\n    var keys = hasSymbol\r\n      ? Reflect.ownKeys(from)\r\n      : Object.keys(from);\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n      key = keys[i];\r\n      // in case the object is already observed...\r\n      if (key === '__ob__') { continue }\r\n      toVal = to[key];\r\n      fromVal = from[key];\r\n      if (!hasOwn(to, key)) {\r\n        set(to, key, fromVal);\r\n      } else if (\r\n        toVal !== fromVal &&\r\n        isPlainObject(toVal) &&\r\n        isPlainObject(fromVal)\r\n      ) {\r\n        mergeData(toVal, fromVal);\r\n      }\r\n    }\r\n    return to\r\n  }\r\n\r\n  /**\r\n   * Data\r\n   */\r\n  function mergeDataOrFn (\r\n    parentVal,\r\n    childVal,\r\n    vm\r\n  ) {\r\n    if (!vm) {\r\n      // in a Vue.extend merge, both should be functions\r\n      if (!childVal) {\r\n        return parentVal\r\n      }\r\n      if (!parentVal) {\r\n        return childVal\r\n      }\r\n      // when parentVal & childVal are both present,\r\n      // we need to return a function that returns the\r\n      // merged result of both functions... no need to\r\n      // check if parentVal is a function here because\r\n      // it has to be a function to pass previous merges.\r\n      return function mergedDataFn () {\r\n        return mergeData(\r\n          typeof childVal === 'function' ? childVal.call(this, this) : childVal,\r\n          typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\r\n        )\r\n      }\r\n    } else {\r\n      return function mergedInstanceDataFn () {\r\n        // instance merge\r\n        var instanceData = typeof childVal === 'function'\r\n          ? childVal.call(vm, vm)\r\n          : childVal;\r\n        var defaultData = typeof parentVal === 'function'\r\n          ? parentVal.call(vm, vm)\r\n          : parentVal;\r\n        if (instanceData) {\r\n          return mergeData(instanceData, defaultData)\r\n        } else {\r\n          return defaultData\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  strats.data = function (\r\n    parentVal,\r\n    childVal,\r\n    vm\r\n  ) {\r\n    if (!vm) {\r\n      if (childVal && typeof childVal !== 'function') {\r\n        warn(\r\n          'The \"data\" option should be a function ' +\r\n          'that returns a per-instance value in component ' +\r\n          'definitions.',\r\n          vm\r\n        );\r\n\r\n        return parentVal\r\n      }\r\n      return mergeDataOrFn(parentVal, childVal)\r\n    }\r\n\r\n    return mergeDataOrFn(parentVal, childVal, vm)\r\n  };\r\n\r\n  /**\r\n   * Hooks and props are merged as arrays.\r\n   */\r\n  function mergeHook (\r\n    parentVal,\r\n    childVal\r\n  ) {\r\n    var res = childVal\r\n      ? parentVal\r\n        ? parentVal.concat(childVal)\r\n        : Array.isArray(childVal)\r\n          ? childVal\r\n          : [childVal]\r\n      : parentVal;\r\n    return res\r\n      ? dedupeHooks(res)\r\n      : res\r\n  }\r\n\r\n  function dedupeHooks (hooks) {\r\n    var res = [];\r\n    for (var i = 0; i < hooks.length; i++) {\r\n      if (res.indexOf(hooks[i]) === -1) {\r\n        res.push(hooks[i]);\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  LIFECYCLE_HOOKS.forEach(function (hook) {\r\n    strats[hook] = mergeHook;\r\n  });\r\n\r\n  /**\r\n   * Assets\r\n   *\r\n   * When a vm is present (instance creation), we need to do\r\n   * a three-way merge between constructor options, instance\r\n   * options and parent options.\r\n   */\r\n  function mergeAssets (\r\n    parentVal,\r\n    childVal,\r\n    vm,\r\n    key\r\n  ) {\r\n    var res = Object.create(parentVal || null);\r\n    if (childVal) {\r\n      assertObjectType(key, childVal, vm);\r\n      return extend(res, childVal)\r\n    } else {\r\n      return res\r\n    }\r\n  }\r\n\r\n  ASSET_TYPES.forEach(function (type) {\r\n    strats[type + 's'] = mergeAssets;\r\n  });\r\n\r\n  /**\r\n   * Watchers.\r\n   *\r\n   * Watchers hashes should not overwrite one\r\n   * another, so we merge them as arrays.\r\n   */\r\n  strats.watch = function (\r\n    parentVal,\r\n    childVal,\r\n    vm,\r\n    key\r\n  ) {\r\n    // work around Firefox's Object.prototype.watch...\r\n    if (parentVal === nativeWatch) { parentVal = undefined; }\r\n    if (childVal === nativeWatch) { childVal = undefined; }\r\n    /* istanbul ignore if */\r\n    if (!childVal) { return Object.create(parentVal || null) }\r\n    {\r\n      assertObjectType(key, childVal, vm);\r\n    }\r\n    if (!parentVal) { return childVal }\r\n    var ret = {};\r\n    extend(ret, parentVal);\r\n    for (var key$1 in childVal) {\r\n      var parent = ret[key$1];\r\n      var child = childVal[key$1];\r\n      if (parent && !Array.isArray(parent)) {\r\n        parent = [parent];\r\n      }\r\n      ret[key$1] = parent\r\n        ? parent.concat(child)\r\n        : Array.isArray(child) ? child : [child];\r\n    }\r\n    return ret\r\n  };\r\n\r\n  /**\r\n   * Other object hashes.\r\n   */\r\n  strats.props =\r\n  strats.methods =\r\n  strats.inject =\r\n  strats.computed = function (\r\n    parentVal,\r\n    childVal,\r\n    vm,\r\n    key\r\n  ) {\r\n    if (childVal && \"development\" !== 'production') {\r\n      assertObjectType(key, childVal, vm);\r\n    }\r\n    if (!parentVal) { return childVal }\r\n    var ret = Object.create(null);\r\n    extend(ret, parentVal);\r\n    if (childVal) { extend(ret, childVal); }\r\n    return ret\r\n  };\r\n  strats.provide = mergeDataOrFn;\r\n\r\n  /**\r\n   * Default strategy.\r\n   */\r\n  var defaultStrat = function (parentVal, childVal) {\r\n    return childVal === undefined\r\n      ? parentVal\r\n      : childVal\r\n  };\r\n\r\n  /**\r\n   * Validate component names\r\n   */\r\n  function checkComponents (options) {\r\n    for (var key in options.components) {\r\n      validateComponentName(key);\r\n    }\r\n  }\r\n\r\n  function validateComponentName (name) {\r\n    if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\r\n      warn(\r\n        'Invalid component name: \"' + name + '\". Component names ' +\r\n        'should conform to valid custom element name in html5 specification.'\r\n      );\r\n    }\r\n    if (isBuiltInTag(name) || config.isReservedTag(name)) {\r\n      warn(\r\n        'Do not use built-in or reserved HTML elements as component ' +\r\n        'id: ' + name\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure all props option syntax are normalized into the\r\n   * Object-based format.\r\n   */\r\n  function normalizeProps (options, vm) {\r\n    var props = options.props;\r\n    if (!props) { return }\r\n    var res = {};\r\n    var i, val, name;\r\n    if (Array.isArray(props)) {\r\n      i = props.length;\r\n      while (i--) {\r\n        val = props[i];\r\n        if (typeof val === 'string') {\r\n          name = camelize(val);\r\n          res[name] = { type: null };\r\n        } else {\r\n          warn('props must be strings when using array syntax.');\r\n        }\r\n      }\r\n    } else if (isPlainObject(props)) {\r\n      for (var key in props) {\r\n        val = props[key];\r\n        name = camelize(key);\r\n        res[name] = isPlainObject(val)\r\n          ? val\r\n          : { type: val };\r\n      }\r\n    } else {\r\n      warn(\r\n        \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\r\n        \"but got \" + (toRawType(props)) + \".\",\r\n        vm\r\n      );\r\n    }\r\n    options.props = res;\r\n  }\r\n\r\n  /**\r\n   * Normalize all injections into Object-based format\r\n   */\r\n  function normalizeInject (options, vm) {\r\n    var inject = options.inject;\r\n    if (!inject) { return }\r\n    var normalized = options.inject = {};\r\n    if (Array.isArray(inject)) {\r\n      for (var i = 0; i < inject.length; i++) {\r\n        normalized[inject[i]] = { from: inject[i] };\r\n      }\r\n    } else if (isPlainObject(inject)) {\r\n      for (var key in inject) {\r\n        var val = inject[key];\r\n        normalized[key] = isPlainObject(val)\r\n          ? extend({ from: key }, val)\r\n          : { from: val };\r\n      }\r\n    } else {\r\n      warn(\r\n        \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\r\n        \"but got \" + (toRawType(inject)) + \".\",\r\n        vm\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize raw function directives into object format.\r\n   */\r\n  function normalizeDirectives (options) {\r\n    var dirs = options.directives;\r\n    if (dirs) {\r\n      for (var key in dirs) {\r\n        var def$$1 = dirs[key];\r\n        if (typeof def$$1 === 'function') {\r\n          dirs[key] = { bind: def$$1, update: def$$1 };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function assertObjectType (name, value, vm) {\r\n    if (!isPlainObject(value)) {\r\n      warn(\r\n        \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\r\n        \"but got \" + (toRawType(value)) + \".\",\r\n        vm\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merge two option objects into a new one.\r\n   * Core utility used in both instantiation and inheritance.\r\n   */\r\n  function mergeOptions (\r\n    parent,\r\n    child,\r\n    vm\r\n  ) {\r\n    {\r\n      checkComponents(child);\r\n    }\r\n\r\n    if (typeof child === 'function') {\r\n      child = child.options;\r\n    }\r\n\r\n    normalizeProps(child, vm);\r\n    normalizeInject(child, vm);\r\n    normalizeDirectives(child);\r\n\r\n    // Apply extends and mixins on the child options,\r\n    // but only if it is a raw options object that isn't\r\n    // the result of another mergeOptions call.\r\n    // Only merged options has the _base property.\r\n    if (!child._base) {\r\n      if (child.extends) {\r\n        parent = mergeOptions(parent, child.extends, vm);\r\n      }\r\n      if (child.mixins) {\r\n        for (var i = 0, l = child.mixins.length; i < l; i++) {\r\n          parent = mergeOptions(parent, child.mixins[i], vm);\r\n        }\r\n      }\r\n    }\r\n\r\n    var options = {};\r\n    var key;\r\n    for (key in parent) {\r\n      mergeField(key);\r\n    }\r\n    for (key in child) {\r\n      if (!hasOwn(parent, key)) {\r\n        mergeField(key);\r\n      }\r\n    }\r\n    function mergeField (key) {\r\n      var strat = strats[key] || defaultStrat;\r\n      options[key] = strat(parent[key], child[key], vm, key);\r\n    }\r\n    return options\r\n  }\r\n\r\n  /**\r\n   * Resolve an asset.\r\n   * This function is used because child instances need access\r\n   * to assets defined in its ancestor chain.\r\n   */\r\n  function resolveAsset (\r\n    options,\r\n    type,\r\n    id,\r\n    warnMissing\r\n  ) {\r\n    /* istanbul ignore if */\r\n    if (typeof id !== 'string') {\r\n      return\r\n    }\r\n    var assets = options[type];\r\n    // check local registration variations first\r\n    if (hasOwn(assets, id)) { return assets[id] }\r\n    var camelizedId = camelize(id);\r\n    if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\r\n    var PascalCaseId = capitalize(camelizedId);\r\n    if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\r\n    // fallback to prototype chain\r\n    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\r\n    if (warnMissing && !res) {\r\n      warn(\r\n        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\r\n        options\r\n      );\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  function validateProp (\r\n    key,\r\n    propOptions,\r\n    propsData,\r\n    vm\r\n  ) {\r\n    var prop = propOptions[key];\r\n    var absent = !hasOwn(propsData, key);\r\n    var value = propsData[key];\r\n    // boolean casting\r\n    var booleanIndex = getTypeIndex(Boolean, prop.type);\r\n    if (booleanIndex > -1) {\r\n      if (absent && !hasOwn(prop, 'default')) {\r\n        value = false;\r\n      } else if (value === '' || value === hyphenate(key)) {\r\n        // only cast empty string / same name to boolean if\r\n        // boolean has higher priority\r\n        var stringIndex = getTypeIndex(String, prop.type);\r\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\r\n          value = true;\r\n        }\r\n      }\r\n    }\r\n    // check default value\r\n    if (value === undefined) {\r\n      value = getPropDefaultValue(vm, prop, key);\r\n      // since the default value is a fresh copy,\r\n      // make sure to observe it.\r\n      var prevShouldObserve = shouldObserve;\r\n      toggleObserving(true);\r\n      observe(value);\r\n      toggleObserving(prevShouldObserve);\r\n    }\r\n    {\r\n      assertProp(prop, key, value, vm, absent);\r\n    }\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * Get the default value of a prop.\r\n   */\r\n  function getPropDefaultValue (vm, prop, key) {\r\n    // no default, return undefined\r\n    if (!hasOwn(prop, 'default')) {\r\n      return undefined\r\n    }\r\n    var def = prop.default;\r\n    // warn against non-factory defaults for Object & Array\r\n    if (isObject(def)) {\r\n      warn(\r\n        'Invalid default value for prop \"' + key + '\": ' +\r\n        'Props with type Object/Array must use a factory function ' +\r\n        'to return the default value.',\r\n        vm\r\n      );\r\n    }\r\n    // the raw prop value was also undefined from previous render,\r\n    // return previous default value to avoid unnecessary watcher trigger\r\n    if (vm && vm.$options.propsData &&\r\n      vm.$options.propsData[key] === undefined &&\r\n      vm._props[key] !== undefined\r\n    ) {\r\n      return vm._props[key]\r\n    }\r\n    // call factory function for non-Function types\r\n    // a value is Function if its prototype is function even across different execution context\r\n    return typeof def === 'function' && getType(prop.type) !== 'Function'\r\n      ? def.call(vm)\r\n      : def\r\n  }\r\n\r\n  /**\r\n   * Assert whether a prop is valid.\r\n   */\r\n  function assertProp (\r\n    prop,\r\n    name,\r\n    value,\r\n    vm,\r\n    absent\r\n  ) {\r\n    if (prop.required && absent) {\r\n      warn(\r\n        'Missing required prop: \"' + name + '\"',\r\n        vm\r\n      );\r\n      return\r\n    }\r\n    if (value == null && !prop.required) {\r\n      return\r\n    }\r\n    var type = prop.type;\r\n    var valid = !type || type === true;\r\n    var expectedTypes = [];\r\n    if (type) {\r\n      if (!Array.isArray(type)) {\r\n        type = [type];\r\n      }\r\n      for (var i = 0; i < type.length && !valid; i++) {\r\n        var assertedType = assertType(value, type[i]);\r\n        expectedTypes.push(assertedType.expectedType || '');\r\n        valid = assertedType.valid;\r\n      }\r\n    }\r\n\r\n    if (!valid) {\r\n      warn(\r\n        getInvalidTypeMessage(name, value, expectedTypes),\r\n        vm\r\n      );\r\n      return\r\n    }\r\n    var validator = prop.validator;\r\n    if (validator) {\r\n      if (!validator(value)) {\r\n        warn(\r\n          'Invalid prop: custom validator check failed for prop \"' + name + '\".',\r\n          vm\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\r\n\r\n  function assertType (value, type) {\r\n    var valid;\r\n    var expectedType = getType(type);\r\n    if (simpleCheckRE.test(expectedType)) {\r\n      var t = typeof value;\r\n      valid = t === expectedType.toLowerCase();\r\n      // for primitive wrapper objects\r\n      if (!valid && t === 'object') {\r\n        valid = value instanceof type;\r\n      }\r\n    } else if (expectedType === 'Object') {\r\n      valid = isPlainObject(value);\r\n    } else if (expectedType === 'Array') {\r\n      valid = Array.isArray(value);\r\n    } else {\r\n      valid = value instanceof type;\r\n    }\r\n    return {\r\n      valid: valid,\r\n      expectedType: expectedType\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use function string name to check built-in types,\r\n   * because a simple equality check will fail when running\r\n   * across different vms / iframes.\r\n   */\r\n  function getType (fn) {\r\n    var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : ''\r\n  }\r\n\r\n  function isSameType (a, b) {\r\n    return getType(a) === getType(b)\r\n  }\r\n\r\n  function getTypeIndex (type, expectedTypes) {\r\n    if (!Array.isArray(expectedTypes)) {\r\n      return isSameType(expectedTypes, type) ? 0 : -1\r\n    }\r\n    for (var i = 0, len = expectedTypes.length; i < len; i++) {\r\n      if (isSameType(expectedTypes[i], type)) {\r\n        return i\r\n      }\r\n    }\r\n    return -1\r\n  }\r\n\r\n  function getInvalidTypeMessage (name, value, expectedTypes) {\r\n    var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\r\n      \" Expected \" + (expectedTypes.map(capitalize).join(', '));\r\n    var expectedType = expectedTypes[0];\r\n    var receivedType = toRawType(value);\r\n    var expectedValue = styleValue(value, expectedType);\r\n    var receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n      message += \" with value \" + expectedValue;\r\n    }\r\n    message += \", got \" + receivedType + \" \";\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n      message += \"with value \" + receivedValue + \".\";\r\n    }\r\n    return message\r\n  }\r\n\r\n  function styleValue (value, type) {\r\n    if (type === 'String') {\r\n      return (\"\\\"\" + value + \"\\\"\")\r\n    } else if (type === 'Number') {\r\n      return (\"\" + (Number(value)))\r\n    } else {\r\n      return (\"\" + value)\r\n    }\r\n  }\r\n\r\n  function isExplicable (value) {\r\n    var explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\r\n  }\r\n\r\n  function isBoolean () {\r\n    var args = [], len = arguments.length;\r\n    while ( len-- ) args[ len ] = arguments[ len ];\r\n\r\n    return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\r\n  }\r\n\r\n  /*  */\r\n\r\n  function handleError (err, vm, info) {\r\n    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\r\n    // See: https://github.com/vuejs/vuex/issues/1505\r\n    pushTarget();\r\n    try {\r\n      if (vm) {\r\n        var cur = vm;\r\n        while ((cur = cur.$parent)) {\r\n          var hooks = cur.$options.errorCaptured;\r\n          if (hooks) {\r\n            for (var i = 0; i < hooks.length; i++) {\r\n              try {\r\n                var capture = hooks[i].call(cur, err, vm, info) === false;\r\n                if (capture) { return }\r\n              } catch (e) {\r\n                globalHandleError(e, cur, 'errorCaptured hook');\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      globalHandleError(err, vm, info);\r\n    } finally {\r\n      popTarget();\r\n    }\r\n  }\r\n\r\n  function invokeWithErrorHandling (\r\n    handler,\r\n    context,\r\n    args,\r\n    vm,\r\n    info\r\n  ) {\r\n    var res;\r\n    try {\r\n      res = args ? handler.apply(context, args) : handler.call(context);\r\n      if (res && !res._isVue && isPromise(res) && !res._handled) {\r\n        res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\r\n        // issue #9511\r\n        // avoid catch triggering multiple times when nested calls\r\n        res._handled = true;\r\n      }\r\n    } catch (e) {\r\n      handleError(e, vm, info);\r\n    }\r\n    return res\r\n  }\r\n\r\n  function globalHandleError (err, vm, info) {\r\n    if (config.errorHandler) {\r\n      try {\r\n        return config.errorHandler.call(null, err, vm, info)\r\n      } catch (e) {\r\n        // if the user intentionally throws the original error in the handler,\r\n        // do not log it twice\r\n        if (e !== err) {\r\n          logError(e, null, 'config.errorHandler');\r\n        }\r\n      }\r\n    }\r\n    logError(err, vm, info);\r\n  }\r\n\r\n  function logError (err, vm, info) {\r\n    {\r\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\r\n    }\r\n    /* istanbul ignore else */\r\n    if ((inBrowser || inWeex) && typeof console !== 'undefined') {\r\n      console.error(err);\r\n    } else {\r\n      throw err\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var isUsingMicroTask = false;\r\n\r\n  var callbacks = [];\r\n  var pending = false;\r\n\r\n  function flushCallbacks () {\r\n    pending = false;\r\n    var copies = callbacks.slice(0);\r\n    callbacks.length = 0;\r\n    for (var i = 0; i < copies.length; i++) {\r\n      copies[i]();\r\n    }\r\n  }\r\n\r\n  // Here we have async deferring wrappers using microtasks.\r\n  // In 2.5 we used (macro) tasks (in combination with microtasks).\r\n  // However, it has subtle problems when state is changed right before repaint\r\n  // (e.g. #6813, out-in transitions).\r\n  // Also, using (macro) tasks in event handler would cause some weird behaviors\r\n  // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\r\n  // So we now use microtasks everywhere, again.\r\n  // A major drawback of this tradeoff is that there are some scenarios\r\n  // where microtasks have too high a priority and fire in between supposedly\r\n  // sequential events (e.g. #4521, #6690, which have workarounds)\r\n  // or even between bubbling of the same event (#6566).\r\n  var timerFunc;\r\n\r\n  // The nextTick behavior leverages the microtask queue, which can be accessed\r\n  // via either native Promise.then or MutationObserver.\r\n  // MutationObserver has wider support, however it is seriously bugged in\r\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\r\n  // completely stops working after triggering a few times... so, if native\r\n  // Promise is available, we will use it:\r\n  /* istanbul ignore next, $flow-disable-line */\r\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\r\n    var p = Promise.resolve();\r\n    timerFunc = function () {\r\n      p.then(flushCallbacks);\r\n      // In problematic UIWebViews, Promise.then doesn't completely break, but\r\n      // it can get stuck in a weird state where callbacks are pushed into the\r\n      // microtask queue but the queue isn't being flushed, until the browser\r\n      // needs to do some other work, e.g. handle a timer. Therefore we can\r\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\r\n      if (isIOS) { setTimeout(noop); }\r\n    };\r\n    isUsingMicroTask = true;\r\n  } else if (!isIE && typeof MutationObserver !== 'undefined' && (\r\n    isNative(MutationObserver) ||\r\n    // PhantomJS and iOS 7.x\r\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\r\n  )) {\r\n    // Use MutationObserver where native Promise is not available,\r\n    // e.g. PhantomJS, iOS7, Android 4.4\r\n    // (#6466 MutationObserver is unreliable in IE11)\r\n    var counter = 1;\r\n    var observer = new MutationObserver(flushCallbacks);\r\n    var textNode = document.createTextNode(String(counter));\r\n    observer.observe(textNode, {\r\n      characterData: true\r\n    });\r\n    timerFunc = function () {\r\n      counter = (counter + 1) % 2;\r\n      textNode.data = String(counter);\r\n    };\r\n    isUsingMicroTask = true;\r\n  } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\r\n    // Fallback to setImmediate.\r\n    // Technically it leverages the (macro) task queue,\r\n    // but it is still a better choice than setTimeout.\r\n    timerFunc = function () {\r\n      setImmediate(flushCallbacks);\r\n    };\r\n  } else {\r\n    // Fallback to setTimeout.\r\n    timerFunc = function () {\r\n      setTimeout(flushCallbacks, 0);\r\n    };\r\n  }\r\n\r\n  function nextTick (cb, ctx) {\r\n    var _resolve;\r\n    callbacks.push(function () {\r\n      if (cb) {\r\n        try {\r\n          cb.call(ctx);\r\n        } catch (e) {\r\n          handleError(e, ctx, 'nextTick');\r\n        }\r\n      } else if (_resolve) {\r\n        _resolve(ctx);\r\n      }\r\n    });\r\n    if (!pending) {\r\n      pending = true;\r\n      timerFunc();\r\n    }\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n      return new Promise(function (resolve) {\r\n        _resolve = resolve;\r\n      })\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var mark;\r\n  var measure;\r\n\r\n  {\r\n    var perf = inBrowser && window.performance;\r\n    /* istanbul ignore if */\r\n    if (\r\n      perf &&\r\n      perf.mark &&\r\n      perf.measure &&\r\n      perf.clearMarks &&\r\n      perf.clearMeasures\r\n    ) {\r\n      mark = function (tag) { return perf.mark(tag); };\r\n      measure = function (name, startTag, endTag) {\r\n        perf.measure(name, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n        // perf.clearMeasures(name)\r\n      };\r\n    }\r\n  }\r\n\r\n  /* not type checking this file because flow doesn't play well with Proxy */\r\n\r\n  var initProxy;\r\n\r\n  {\r\n    var allowedGlobals = makeMap(\r\n      'Infinity,undefined,NaN,isFinite,isNaN,' +\r\n      'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\r\n      'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\r\n      'require' // for Webpack/Browserify\r\n    );\r\n\r\n    var warnNonPresent = function (target, key) {\r\n      warn(\r\n        \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\r\n        'referenced during render. Make sure that this property is reactive, ' +\r\n        'either in the data option, or for class-based components, by ' +\r\n        'initializing the property. ' +\r\n        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\r\n        target\r\n      );\r\n    };\r\n\r\n    var warnReservedPrefix = function (target, key) {\r\n      warn(\r\n        \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\r\n        'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\r\n        'prevent conflicts with Vue internals. ' +\r\n        'See: https://vuejs.org/v2/api/#data',\r\n        target\r\n      );\r\n    };\r\n\r\n    var hasProxy =\r\n      typeof Proxy !== 'undefined' && isNative(Proxy);\r\n\r\n    if (hasProxy) {\r\n      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\r\n      config.keyCodes = new Proxy(config.keyCodes, {\r\n        set: function set (target, key, value) {\r\n          if (isBuiltInModifier(key)) {\r\n            warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\r\n            return false\r\n          } else {\r\n            target[key] = value;\r\n            return true\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    var hasHandler = {\r\n      has: function has (target, key) {\r\n        var has = key in target;\r\n        var isAllowed = allowedGlobals(key) ||\r\n          (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\r\n        if (!has && !isAllowed) {\r\n          if (key in target.$data) { warnReservedPrefix(target, key); }\r\n          else { warnNonPresent(target, key); }\r\n        }\r\n        return has || !isAllowed\r\n      }\r\n    };\r\n\r\n    var getHandler = {\r\n      get: function get (target, key) {\r\n        if (typeof key === 'string' && !(key in target)) {\r\n          if (key in target.$data) { warnReservedPrefix(target, key); }\r\n          else { warnNonPresent(target, key); }\r\n        }\r\n        return target[key]\r\n      }\r\n    };\r\n\r\n    initProxy = function initProxy (vm) {\r\n      if (hasProxy) {\r\n        // determine which proxy handler to use\r\n        var options = vm.$options;\r\n        var handlers = options.render && options.render._withStripped\r\n          ? getHandler\r\n          : hasHandler;\r\n        vm._renderProxy = new Proxy(vm, handlers);\r\n      } else {\r\n        vm._renderProxy = vm;\r\n      }\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  var seenObjects = new _Set();\r\n\r\n  /**\r\n   * Recursively traverse an object to evoke all converted\r\n   * getters, so that every nested property inside the object\r\n   * is collected as a \"deep\" dependency.\r\n   */\r\n  function traverse (val) {\r\n    _traverse(val, seenObjects);\r\n    seenObjects.clear();\r\n  }\r\n\r\n  function _traverse (val, seen) {\r\n    var i, keys;\r\n    var isA = Array.isArray(val);\r\n    if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\r\n      return\r\n    }\r\n    if (val.__ob__) {\r\n      var depId = val.__ob__.dep.id;\r\n      if (seen.has(depId)) {\r\n        return\r\n      }\r\n      seen.add(depId);\r\n    }\r\n    if (isA) {\r\n      i = val.length;\r\n      while (i--) { _traverse(val[i], seen); }\r\n    } else {\r\n      keys = Object.keys(val);\r\n      i = keys.length;\r\n      while (i--) { _traverse(val[keys[i]], seen); }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var normalizeEvent = cached(function (name) {\r\n    var passive = name.charAt(0) === '&';\r\n    name = passive ? name.slice(1) : name;\r\n    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\r\n    name = once$$1 ? name.slice(1) : name;\r\n    var capture = name.charAt(0) === '!';\r\n    name = capture ? name.slice(1) : name;\r\n    return {\r\n      name: name,\r\n      once: once$$1,\r\n      capture: capture,\r\n      passive: passive\r\n    }\r\n  });\r\n\r\n  function createFnInvoker (fns, vm) {\r\n    function invoker () {\r\n      var arguments$1 = arguments;\r\n\r\n      var fns = invoker.fns;\r\n      if (Array.isArray(fns)) {\r\n        var cloned = fns.slice();\r\n        for (var i = 0; i < cloned.length; i++) {\r\n          invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\r\n        }\r\n      } else {\r\n        // return handler return value for single handlers\r\n        return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\r\n      }\r\n    }\r\n    invoker.fns = fns;\r\n    return invoker\r\n  }\r\n\r\n  function updateListeners (\r\n    on,\r\n    oldOn,\r\n    add,\r\n    remove$$1,\r\n    createOnceHandler,\r\n    vm\r\n  ) {\r\n    var name, def$$1, cur, old, event;\r\n    for (name in on) {\r\n      def$$1 = cur = on[name];\r\n      old = oldOn[name];\r\n      event = normalizeEvent(name);\r\n      if (isUndef(cur)) {\r\n        warn(\r\n          \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\r\n          vm\r\n        );\r\n      } else if (isUndef(old)) {\r\n        if (isUndef(cur.fns)) {\r\n          cur = on[name] = createFnInvoker(cur, vm);\r\n        }\r\n        if (isTrue(event.once)) {\r\n          cur = on[name] = createOnceHandler(event.name, cur, event.capture);\r\n        }\r\n        add(event.name, cur, event.capture, event.passive, event.params);\r\n      } else if (cur !== old) {\r\n        old.fns = cur;\r\n        on[name] = old;\r\n      }\r\n    }\r\n    for (name in oldOn) {\r\n      if (isUndef(on[name])) {\r\n        event = normalizeEvent(name);\r\n        remove$$1(event.name, oldOn[name], event.capture);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function mergeVNodeHook (def, hookKey, hook) {\r\n    if (def instanceof VNode) {\r\n      def = def.data.hook || (def.data.hook = {});\r\n    }\r\n    var invoker;\r\n    var oldHook = def[hookKey];\r\n\r\n    function wrappedHook () {\r\n      hook.apply(this, arguments);\r\n      // important: remove merged hook to ensure it's called only once\r\n      // and prevent memory leak\r\n      remove(invoker.fns, wrappedHook);\r\n    }\r\n\r\n    if (isUndef(oldHook)) {\r\n      // no existing hook\r\n      invoker = createFnInvoker([wrappedHook]);\r\n    } else {\r\n      /* istanbul ignore if */\r\n      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\r\n        // already a merged invoker\r\n        invoker = oldHook;\r\n        invoker.fns.push(wrappedHook);\r\n      } else {\r\n        // existing plain hook\r\n        invoker = createFnInvoker([oldHook, wrappedHook]);\r\n      }\r\n    }\r\n\r\n    invoker.merged = true;\r\n    def[hookKey] = invoker;\r\n  }\r\n\r\n  /*  */\r\n\r\n  function extractPropsFromVNodeData (\r\n    data,\r\n    Ctor,\r\n    tag\r\n  ) {\r\n    // we are only extracting raw values here.\r\n    // validation and default values are handled in the child\r\n    // component itself.\r\n    var propOptions = Ctor.options.props;\r\n    if (isUndef(propOptions)) {\r\n      return\r\n    }\r\n    var res = {};\r\n    var attrs = data.attrs;\r\n    var props = data.props;\r\n    if (isDef(attrs) || isDef(props)) {\r\n      for (var key in propOptions) {\r\n        var altKey = hyphenate(key);\r\n        {\r\n          var keyInLowerCase = key.toLowerCase();\r\n          if (\r\n            key !== keyInLowerCase &&\r\n            attrs && hasOwn(attrs, keyInLowerCase)\r\n          ) {\r\n            tip(\r\n              \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\r\n              (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\r\n              \" \\\"\" + key + \"\\\". \" +\r\n              \"Note that HTML attributes are case-insensitive and camelCased \" +\r\n              \"props need to use their kebab-case equivalents when using in-DOM \" +\r\n              \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\r\n            );\r\n          }\r\n        }\r\n        checkProp(res, props, key, altKey, true) ||\r\n        checkProp(res, attrs, key, altKey, false);\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  function checkProp (\r\n    res,\r\n    hash,\r\n    key,\r\n    altKey,\r\n    preserve\r\n  ) {\r\n    if (isDef(hash)) {\r\n      if (hasOwn(hash, key)) {\r\n        res[key] = hash[key];\r\n        if (!preserve) {\r\n          delete hash[key];\r\n        }\r\n        return true\r\n      } else if (hasOwn(hash, altKey)) {\r\n        res[key] = hash[altKey];\r\n        if (!preserve) {\r\n          delete hash[altKey];\r\n        }\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /*  */\r\n\r\n  // The template compiler attempts to minimize the need for normalization by\r\n  // statically analyzing the template at compile time.\r\n  //\r\n  // For plain HTML markup, normalization can be completely skipped because the\r\n  // generated render function is guaranteed to return Array<VNode>. There are\r\n  // two cases where extra normalization is needed:\r\n\r\n  // 1. When the children contains components - because a functional component\r\n  // may return an Array instead of a single root. In this case, just a simple\r\n  // normalization is needed - if any child is an Array, we flatten the whole\r\n  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\r\n  // because functional components already normalize their own children.\r\n  function simpleNormalizeChildren (children) {\r\n    for (var i = 0; i < children.length; i++) {\r\n      if (Array.isArray(children[i])) {\r\n        return Array.prototype.concat.apply([], children)\r\n      }\r\n    }\r\n    return children\r\n  }\r\n\r\n  // 2. When the children contains constructs that always generated nested Arrays,\r\n  // e.g. <template>, <slot>, v-for, or when the children is provided by user\r\n  // with hand-written render functions / JSX. In such cases a full normalization\r\n  // is needed to cater to all possible types of children values.\r\n  function normalizeChildren (children) {\r\n    return isPrimitive(children)\r\n      ? [createTextVNode(children)]\r\n      : Array.isArray(children)\r\n        ? normalizeArrayChildren(children)\r\n        : undefined\r\n  }\r\n\r\n  function isTextNode (node) {\r\n    return isDef(node) && isDef(node.text) && isFalse(node.isComment)\r\n  }\r\n\r\n  function normalizeArrayChildren (children, nestedIndex) {\r\n    var res = [];\r\n    var i, c, lastIndex, last;\r\n    for (i = 0; i < children.length; i++) {\r\n      c = children[i];\r\n      if (isUndef(c) || typeof c === 'boolean') { continue }\r\n      lastIndex = res.length - 1;\r\n      last = res[lastIndex];\r\n      //  nested\r\n      if (Array.isArray(c)) {\r\n        if (c.length > 0) {\r\n          c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\r\n          // merge adjacent text nodes\r\n          if (isTextNode(c[0]) && isTextNode(last)) {\r\n            res[lastIndex] = createTextVNode(last.text + (c[0]).text);\r\n            c.shift();\r\n          }\r\n          res.push.apply(res, c);\r\n        }\r\n      } else if (isPrimitive(c)) {\r\n        if (isTextNode(last)) {\r\n          // merge adjacent text nodes\r\n          // this is necessary for SSR hydration because text nodes are\r\n          // essentially merged when rendered to HTML strings\r\n          res[lastIndex] = createTextVNode(last.text + c);\r\n        } else if (c !== '') {\r\n          // convert primitive to vnode\r\n          res.push(createTextVNode(c));\r\n        }\r\n      } else {\r\n        if (isTextNode(c) && isTextNode(last)) {\r\n          // merge adjacent text nodes\r\n          res[lastIndex] = createTextVNode(last.text + c.text);\r\n        } else {\r\n          // default key for nested array children (likely generated by v-for)\r\n          if (isTrue(children._isVList) &&\r\n            isDef(c.tag) &&\r\n            isUndef(c.key) &&\r\n            isDef(nestedIndex)) {\r\n            c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\r\n          }\r\n          res.push(c);\r\n        }\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*  */\r\n\r\n  function initProvide (vm) {\r\n    var provide = vm.$options.provide;\r\n    if (provide) {\r\n      vm._provided = typeof provide === 'function'\r\n        ? provide.call(vm)\r\n        : provide;\r\n    }\r\n  }\r\n\r\n  function initInjections (vm) {\r\n    var result = resolveInject(vm.$options.inject, vm);\r\n    if (result) {\r\n      toggleObserving(false);\r\n      Object.keys(result).forEach(function (key) {\r\n        /* istanbul ignore else */\r\n        {\r\n          defineReactive$$1(vm, key, result[key], function () {\r\n            warn(\r\n              \"Avoid mutating an injected value directly since the changes will be \" +\r\n              \"overwritten whenever the provided component re-renders. \" +\r\n              \"injection being mutated: \\\"\" + key + \"\\\"\",\r\n              vm\r\n            );\r\n          });\r\n        }\r\n      });\r\n      toggleObserving(true);\r\n    }\r\n  }\r\n\r\n  function resolveInject (inject, vm) {\r\n    if (inject) {\r\n      // inject is :any because flow is not smart enough to figure out cached\r\n      var result = Object.create(null);\r\n      var keys = hasSymbol\r\n        ? Reflect.ownKeys(inject)\r\n        : Object.keys(inject);\r\n\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var key = keys[i];\r\n        // #6574 in case the inject object is observed...\r\n        if (key === '__ob__') { continue }\r\n        var provideKey = inject[key].from;\r\n        var source = vm;\r\n        while (source) {\r\n          if (source._provided && hasOwn(source._provided, provideKey)) {\r\n            result[key] = source._provided[provideKey];\r\n            break\r\n          }\r\n          source = source.$parent;\r\n        }\r\n        if (!source) {\r\n          if ('default' in inject[key]) {\r\n            var provideDefault = inject[key].default;\r\n            result[key] = typeof provideDefault === 'function'\r\n              ? provideDefault.call(vm)\r\n              : provideDefault;\r\n          } else {\r\n            warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\r\n          }\r\n        }\r\n      }\r\n      return result\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  /**\r\n   * Runtime helper for resolving raw children VNodes into a slot object.\r\n   */\r\n  function resolveSlots (\r\n    children,\r\n    context\r\n  ) {\r\n    if (!children || !children.length) {\r\n      return {}\r\n    }\r\n    var slots = {};\r\n    for (var i = 0, l = children.length; i < l; i++) {\r\n      var child = children[i];\r\n      var data = child.data;\r\n      // remove slot attribute if the node is resolved as a Vue slot node\r\n      if (data && data.attrs && data.attrs.slot) {\r\n        delete data.attrs.slot;\r\n      }\r\n      // named slots should only be respected if the vnode was rendered in the\r\n      // same context.\r\n      if ((child.context === context || child.fnContext === context) &&\r\n        data && data.slot != null\r\n      ) {\r\n        var name = data.slot;\r\n        var slot = (slots[name] || (slots[name] = []));\r\n        if (child.tag === 'template') {\r\n          slot.push.apply(slot, child.children || []);\r\n        } else {\r\n          slot.push(child);\r\n        }\r\n      } else {\r\n        (slots.default || (slots.default = [])).push(child);\r\n      }\r\n    }\r\n    // ignore slots that contains only whitespace\r\n    for (var name$1 in slots) {\r\n      if (slots[name$1].every(isWhitespace)) {\r\n        delete slots[name$1];\r\n      }\r\n    }\r\n    return slots\r\n  }\r\n\r\n  function isWhitespace (node) {\r\n    return (node.isComment && !node.asyncFactory) || node.text === ' '\r\n  }\r\n\r\n  /*  */\r\n\r\n  function normalizeScopedSlots (\r\n    slots,\r\n    normalSlots,\r\n    prevSlots\r\n  ) {\r\n    var res;\r\n    var hasNormalSlots = Object.keys(normalSlots).length > 0;\r\n    var isStable = slots ? !!slots.$stable : !hasNormalSlots;\r\n    var key = slots && slots.$key;\r\n    if (!slots) {\r\n      res = {};\r\n    } else if (slots._normalized) {\r\n      // fast path 1: child component re-render only, parent did not change\r\n      return slots._normalized\r\n    } else if (\r\n      isStable &&\r\n      prevSlots &&\r\n      prevSlots !== emptyObject &&\r\n      key === prevSlots.$key &&\r\n      !hasNormalSlots &&\r\n      !prevSlots.$hasNormal\r\n    ) {\r\n      // fast path 2: stable scoped slots w/ no normal slots to proxy,\r\n      // only need to normalize once\r\n      return prevSlots\r\n    } else {\r\n      res = {};\r\n      for (var key$1 in slots) {\r\n        if (slots[key$1] && key$1[0] !== '$') {\r\n          res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\r\n        }\r\n      }\r\n    }\r\n    // expose normal slots on scopedSlots\r\n    for (var key$2 in normalSlots) {\r\n      if (!(key$2 in res)) {\r\n        res[key$2] = proxyNormalSlot(normalSlots, key$2);\r\n      }\r\n    }\r\n    // avoriaz seems to mock a non-extensible $scopedSlots object\r\n    // and when that is passed down this would cause an error\r\n    if (slots && Object.isExtensible(slots)) {\r\n      (slots)._normalized = res;\r\n    }\r\n    def(res, '$stable', isStable);\r\n    def(res, '$key', key);\r\n    def(res, '$hasNormal', hasNormalSlots);\r\n    return res\r\n  }\r\n\r\n  function normalizeScopedSlot(normalSlots, key, fn) {\r\n    var normalized = function () {\r\n      var res = arguments.length ? fn.apply(null, arguments) : fn({});\r\n      res = res && typeof res === 'object' && !Array.isArray(res)\r\n        ? [res] // single vnode\r\n        : normalizeChildren(res);\r\n      return res && (\r\n        res.length === 0 ||\r\n        (res.length === 1 && res[0].isComment) // #9658\r\n      ) ? undefined\r\n        : res\r\n    };\r\n    // this is a slot using the new v-slot syntax without scope. although it is\r\n    // compiled as a scoped slot, render fn users would expect it to be present\r\n    // on this.$slots because the usage is semantically a normal slot.\r\n    if (fn.proxy) {\r\n      Object.defineProperty(normalSlots, key, {\r\n        get: normalized,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n    return normalized\r\n  }\r\n\r\n  function proxyNormalSlot(slots, key) {\r\n    return function () { return slots[key]; }\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Runtime helper for rendering v-for lists.\r\n   */\r\n  function renderList (\r\n    val,\r\n    render\r\n  ) {\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val) || typeof val === 'string') {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = render(val[i], i);\r\n      }\r\n    } else if (typeof val === 'number') {\r\n      ret = new Array(val);\r\n      for (i = 0; i < val; i++) {\r\n        ret[i] = render(i + 1, i);\r\n      }\r\n    } else if (isObject(val)) {\r\n      if (hasSymbol && val[Symbol.iterator]) {\r\n        ret = [];\r\n        var iterator = val[Symbol.iterator]();\r\n        var result = iterator.next();\r\n        while (!result.done) {\r\n          ret.push(render(result.value, ret.length));\r\n          result = iterator.next();\r\n        }\r\n      } else {\r\n        keys = Object.keys(val);\r\n        ret = new Array(keys.length);\r\n        for (i = 0, l = keys.length; i < l; i++) {\r\n          key = keys[i];\r\n          ret[i] = render(val[key], key, i);\r\n        }\r\n      }\r\n    }\r\n    if (!isDef(ret)) {\r\n      ret = [];\r\n    }\r\n    (ret)._isVList = true;\r\n    return ret\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Runtime helper for rendering <slot>\r\n   */\r\n  function renderSlot (\r\n    name,\r\n    fallback,\r\n    props,\r\n    bindObject\r\n  ) {\r\n    var scopedSlotFn = this.$scopedSlots[name];\r\n    var nodes;\r\n    if (scopedSlotFn) { // scoped slot\r\n      props = props || {};\r\n      if (bindObject) {\r\n        if (!isObject(bindObject)) {\r\n          warn(\r\n            'slot v-bind without argument expects an Object',\r\n            this\r\n          );\r\n        }\r\n        props = extend(extend({}, bindObject), props);\r\n      }\r\n      nodes = scopedSlotFn(props) || fallback;\r\n    } else {\r\n      nodes = this.$slots[name] || fallback;\r\n    }\r\n\r\n    var target = props && props.slot;\r\n    if (target) {\r\n      return this.$createElement('template', { slot: target }, nodes)\r\n    } else {\r\n      return nodes\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Runtime helper for resolving filters\r\n   */\r\n  function resolveFilter (id) {\r\n    return resolveAsset(this.$options, 'filters', id, true) || identity\r\n  }\r\n\r\n  /*  */\r\n\r\n  function isKeyNotMatch (expect, actual) {\r\n    if (Array.isArray(expect)) {\r\n      return expect.indexOf(actual) === -1\r\n    } else {\r\n      return expect !== actual\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runtime helper for checking keyCodes from config.\r\n   * exposed as Vue.prototype._k\r\n   * passing in eventKeyName as last argument separately for backwards compat\r\n   */\r\n  function checkKeyCodes (\r\n    eventKeyCode,\r\n    key,\r\n    builtInKeyCode,\r\n    eventKeyName,\r\n    builtInKeyName\r\n  ) {\r\n    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\r\n    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\r\n      return isKeyNotMatch(builtInKeyName, eventKeyName)\r\n    } else if (mappedKeyCode) {\r\n      return isKeyNotMatch(mappedKeyCode, eventKeyCode)\r\n    } else if (eventKeyName) {\r\n      return hyphenate(eventKeyName) !== key\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Runtime helper for merging v-bind=\"object\" into a VNode's data.\r\n   */\r\n  function bindObjectProps (\r\n    data,\r\n    tag,\r\n    value,\r\n    asProp,\r\n    isSync\r\n  ) {\r\n    if (value) {\r\n      if (!isObject(value)) {\r\n        warn(\r\n          'v-bind without argument expects an Object or Array value',\r\n          this\r\n        );\r\n      } else {\r\n        if (Array.isArray(value)) {\r\n          value = toObject(value);\r\n        }\r\n        var hash;\r\n        var loop = function ( key ) {\r\n          if (\r\n            key === 'class' ||\r\n            key === 'style' ||\r\n            isReservedAttribute(key)\r\n          ) {\r\n            hash = data;\r\n          } else {\r\n            var type = data.attrs && data.attrs.type;\r\n            hash = asProp || config.mustUseProp(tag, type, key)\r\n              ? data.domProps || (data.domProps = {})\r\n              : data.attrs || (data.attrs = {});\r\n          }\r\n          var camelizedKey = camelize(key);\r\n          var hyphenatedKey = hyphenate(key);\r\n          if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\r\n            hash[key] = value[key];\r\n\r\n            if (isSync) {\r\n              var on = data.on || (data.on = {});\r\n              on[(\"update:\" + key)] = function ($event) {\r\n                value[key] = $event;\r\n              };\r\n            }\r\n          }\r\n        };\r\n\r\n        for (var key in value) loop( key );\r\n      }\r\n    }\r\n    return data\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Runtime helper for rendering static trees.\r\n   */\r\n  function renderStatic (\r\n    index,\r\n    isInFor\r\n  ) {\r\n    var cached = this._staticTrees || (this._staticTrees = []);\r\n    var tree = cached[index];\r\n    // if has already-rendered static tree and not inside v-for,\r\n    // we can reuse the same tree.\r\n    if (tree && !isInFor) {\r\n      return tree\r\n    }\r\n    // otherwise, render a fresh tree.\r\n    tree = cached[index] = this.$options.staticRenderFns[index].call(\r\n      this._renderProxy,\r\n      null,\r\n      this // for render fns generated for functional component templates\r\n    );\r\n    markStatic(tree, (\"__static__\" + index), false);\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * Runtime helper for v-once.\r\n   * Effectively it means marking the node as static with a unique key.\r\n   */\r\n  function markOnce (\r\n    tree,\r\n    index,\r\n    key\r\n  ) {\r\n    markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\r\n    return tree\r\n  }\r\n\r\n  function markStatic (\r\n    tree,\r\n    key,\r\n    isOnce\r\n  ) {\r\n    if (Array.isArray(tree)) {\r\n      for (var i = 0; i < tree.length; i++) {\r\n        if (tree[i] && typeof tree[i] !== 'string') {\r\n          markStaticNode(tree[i], (key + \"_\" + i), isOnce);\r\n        }\r\n      }\r\n    } else {\r\n      markStaticNode(tree, key, isOnce);\r\n    }\r\n  }\r\n\r\n  function markStaticNode (node, key, isOnce) {\r\n    node.isStatic = true;\r\n    node.key = key;\r\n    node.isOnce = isOnce;\r\n  }\r\n\r\n  /*  */\r\n\r\n  function bindObjectListeners (data, value) {\r\n    if (value) {\r\n      if (!isPlainObject(value)) {\r\n        warn(\r\n          'v-on without argument expects an Object value',\r\n          this\r\n        );\r\n      } else {\r\n        var on = data.on = data.on ? extend({}, data.on) : {};\r\n        for (var key in value) {\r\n          var existing = on[key];\r\n          var ours = value[key];\r\n          on[key] = existing ? [].concat(existing, ours) : ours;\r\n        }\r\n      }\r\n    }\r\n    return data\r\n  }\r\n\r\n  /*  */\r\n\r\n  function resolveScopedSlots (\r\n    fns, // see flow/vnode\r\n    res,\r\n    // the following are added in 2.6\r\n    hasDynamicKeys,\r\n    contentHashKey\r\n  ) {\r\n    res = res || { $stable: !hasDynamicKeys };\r\n    for (var i = 0; i < fns.length; i++) {\r\n      var slot = fns[i];\r\n      if (Array.isArray(slot)) {\r\n        resolveScopedSlots(slot, res, hasDynamicKeys);\r\n      } else if (slot) {\r\n        // marker for reverse proxying v-slot without scope on this.$slots\r\n        if (slot.proxy) {\r\n          slot.fn.proxy = true;\r\n        }\r\n        res[slot.key] = slot.fn;\r\n      }\r\n    }\r\n    if (contentHashKey) {\r\n      (res).$key = contentHashKey;\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*  */\r\n\r\n  function bindDynamicKeys (baseObj, values) {\r\n    for (var i = 0; i < values.length; i += 2) {\r\n      var key = values[i];\r\n      if (typeof key === 'string' && key) {\r\n        baseObj[values[i]] = values[i + 1];\r\n      } else if (key !== '' && key !== null) {\r\n        // null is a special value for explicitly removing a binding\r\n        warn(\r\n          (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\r\n          this\r\n        );\r\n      }\r\n    }\r\n    return baseObj\r\n  }\r\n\r\n  // helper to dynamically append modifier runtime markers to event names.\r\n  // ensure only append when value is already string, otherwise it will be cast\r\n  // to string and cause the type check to miss.\r\n  function prependModifier (value, symbol) {\r\n    return typeof value === 'string' ? symbol + value : value\r\n  }\r\n\r\n  /*  */\r\n\r\n  function installRenderHelpers (target) {\r\n    target._o = markOnce;\r\n    target._n = toNumber;\r\n    target._s = toString;\r\n    target._l = renderList;\r\n    target._t = renderSlot;\r\n    target._q = looseEqual;\r\n    target._i = looseIndexOf;\r\n    target._m = renderStatic;\r\n    target._f = resolveFilter;\r\n    target._k = checkKeyCodes;\r\n    target._b = bindObjectProps;\r\n    target._v = createTextVNode;\r\n    target._e = createEmptyVNode;\r\n    target._u = resolveScopedSlots;\r\n    target._g = bindObjectListeners;\r\n    target._d = bindDynamicKeys;\r\n    target._p = prependModifier;\r\n  }\r\n\r\n  /*  */\r\n\r\n  function FunctionalRenderContext (\r\n    data,\r\n    props,\r\n    children,\r\n    parent,\r\n    Ctor\r\n  ) {\r\n    var this$1 = this;\r\n\r\n    var options = Ctor.options;\r\n    // ensure the createElement function in functional components\r\n    // gets a unique context - this is necessary for correct named slot check\r\n    var contextVm;\r\n    if (hasOwn(parent, '_uid')) {\r\n      contextVm = Object.create(parent);\r\n      // $flow-disable-line\r\n      contextVm._original = parent;\r\n    } else {\r\n      // the context vm passed in is a functional context as well.\r\n      // in this case we want to make sure we are able to get a hold to the\r\n      // real context instance.\r\n      contextVm = parent;\r\n      // $flow-disable-line\r\n      parent = parent._original;\r\n    }\r\n    var isCompiled = isTrue(options._compiled);\r\n    var needNormalization = !isCompiled;\r\n\r\n    this.data = data;\r\n    this.props = props;\r\n    this.children = children;\r\n    this.parent = parent;\r\n    this.listeners = data.on || emptyObject;\r\n    this.injections = resolveInject(options.inject, parent);\r\n    this.slots = function () {\r\n      if (!this$1.$slots) {\r\n        normalizeScopedSlots(\r\n          data.scopedSlots,\r\n          this$1.$slots = resolveSlots(children, parent)\r\n        );\r\n      }\r\n      return this$1.$slots\r\n    };\r\n\r\n    Object.defineProperty(this, 'scopedSlots', ({\r\n      enumerable: true,\r\n      get: function get () {\r\n        return normalizeScopedSlots(data.scopedSlots, this.slots())\r\n      }\r\n    }));\r\n\r\n    // support for compiled functional template\r\n    if (isCompiled) {\r\n      // exposing $options for renderStatic()\r\n      this.$options = options;\r\n      // pre-resolve slots for renderSlot()\r\n      this.$slots = this.slots();\r\n      this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\r\n    }\r\n\r\n    if (options._scopeId) {\r\n      this._c = function (a, b, c, d) {\r\n        var vnode = createElement(contextVm, a, b, c, d, needNormalization);\r\n        if (vnode && !Array.isArray(vnode)) {\r\n          vnode.fnScopeId = options._scopeId;\r\n          vnode.fnContext = parent;\r\n        }\r\n        return vnode\r\n      };\r\n    } else {\r\n      this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\r\n    }\r\n  }\r\n\r\n  installRenderHelpers(FunctionalRenderContext.prototype);\r\n\r\n  function createFunctionalComponent (\r\n    Ctor,\r\n    propsData,\r\n    data,\r\n    contextVm,\r\n    children\r\n  ) {\r\n    var options = Ctor.options;\r\n    var props = {};\r\n    var propOptions = options.props;\r\n    if (isDef(propOptions)) {\r\n      for (var key in propOptions) {\r\n        props[key] = validateProp(key, propOptions, propsData || emptyObject);\r\n      }\r\n    } else {\r\n      if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\r\n      if (isDef(data.props)) { mergeProps(props, data.props); }\r\n    }\r\n\r\n    var renderContext = new FunctionalRenderContext(\r\n      data,\r\n      props,\r\n      children,\r\n      contextVm,\r\n      Ctor\r\n    );\r\n\r\n    var vnode = options.render.call(null, renderContext._c, renderContext);\r\n\r\n    if (vnode instanceof VNode) {\r\n      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\r\n    } else if (Array.isArray(vnode)) {\r\n      var vnodes = normalizeChildren(vnode) || [];\r\n      var res = new Array(vnodes.length);\r\n      for (var i = 0; i < vnodes.length; i++) {\r\n        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\r\n      }\r\n      return res\r\n    }\r\n  }\r\n\r\n  function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\r\n    // #7817 clone node before setting fnContext, otherwise if the node is reused\r\n    // (e.g. it was from a cached normal slot) the fnContext causes named slots\r\n    // that should not be matched to match.\r\n    var clone = cloneVNode(vnode);\r\n    clone.fnContext = contextVm;\r\n    clone.fnOptions = options;\r\n    {\r\n      (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\r\n    }\r\n    if (data.slot) {\r\n      (clone.data || (clone.data = {})).slot = data.slot;\r\n    }\r\n    return clone\r\n  }\r\n\r\n  function mergeProps (to, from) {\r\n    for (var key in from) {\r\n      to[camelize(key)] = from[key];\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  /*  */\r\n\r\n  /*  */\r\n\r\n  /*  */\r\n\r\n  // inline hooks to be invoked on component VNodes during patch\r\n  var componentVNodeHooks = {\r\n    init: function init (vnode, hydrating) {\r\n      if (\r\n        vnode.componentInstance &&\r\n        !vnode.componentInstance._isDestroyed &&\r\n        vnode.data.keepAlive\r\n      ) {\r\n        // kept-alive components, treat as a patch\r\n        var mountedNode = vnode; // work around flow\r\n        componentVNodeHooks.prepatch(mountedNode, mountedNode);\r\n      } else {\r\n        var child = vnode.componentInstance = createComponentInstanceForVnode(\r\n          vnode,\r\n          activeInstance\r\n        );\r\n        child.$mount(hydrating ? vnode.elm : undefined, hydrating);\r\n      }\r\n    },\r\n\r\n    prepatch: function prepatch (oldVnode, vnode) {\r\n      var options = vnode.componentOptions;\r\n      var child = vnode.componentInstance = oldVnode.componentInstance;\r\n      updateChildComponent(\r\n        child,\r\n        options.propsData, // updated props\r\n        options.listeners, // updated listeners\r\n        vnode, // new parent vnode\r\n        options.children // new children\r\n      );\r\n    },\r\n\r\n    insert: function insert (vnode) {\r\n      var context = vnode.context;\r\n      var componentInstance = vnode.componentInstance;\r\n      if (!componentInstance._isMounted) {\r\n        componentInstance._isMounted = true;\r\n        callHook(componentInstance, 'mounted');\r\n      }\r\n      if (vnode.data.keepAlive) {\r\n        if (context._isMounted) {\r\n          // vue-router#1212\r\n          // During updates, a kept-alive component's child components may\r\n          // change, so directly walking the tree here may call activated hooks\r\n          // on incorrect children. Instead we push them into a queue which will\r\n          // be processed after the whole patch process ended.\r\n          queueActivatedComponent(componentInstance);\r\n        } else {\r\n          activateChildComponent(componentInstance, true /* direct */);\r\n        }\r\n      }\r\n    },\r\n\r\n    destroy: function destroy (vnode) {\r\n      var componentInstance = vnode.componentInstance;\r\n      if (!componentInstance._isDestroyed) {\r\n        if (!vnode.data.keepAlive) {\r\n          componentInstance.$destroy();\r\n        } else {\r\n          deactivateChildComponent(componentInstance, true /* direct */);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  var hooksToMerge = Object.keys(componentVNodeHooks);\r\n\r\n  function createComponent (\r\n    Ctor,\r\n    data,\r\n    context,\r\n    children,\r\n    tag\r\n  ) {\r\n    if (isUndef(Ctor)) {\r\n      return\r\n    }\r\n\r\n    var baseCtor = context.$options._base;\r\n\r\n    // plain options object: turn it into a constructor\r\n    if (isObject(Ctor)) {\r\n      Ctor = baseCtor.extend(Ctor);\r\n    }\r\n\r\n    // if at this stage it's not a constructor or an async component factory,\r\n    // reject.\r\n    if (typeof Ctor !== 'function') {\r\n      {\r\n        warn((\"Invalid Component definition: \" + (String(Ctor))), context);\r\n      }\r\n      return\r\n    }\r\n\r\n    // async component\r\n    var asyncFactory;\r\n    if (isUndef(Ctor.cid)) {\r\n      asyncFactory = Ctor;\r\n      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\r\n      if (Ctor === undefined) {\r\n        // return a placeholder node for async component, which is rendered\r\n        // as a comment node but preserves all the raw information for the node.\r\n        // the information will be used for async server-rendering and hydration.\r\n        return createAsyncPlaceholder(\r\n          asyncFactory,\r\n          data,\r\n          context,\r\n          children,\r\n          tag\r\n        )\r\n      }\r\n    }\r\n\r\n    data = data || {};\r\n\r\n    // resolve constructor options in case global mixins are applied after\r\n    // component constructor creation\r\n    resolveConstructorOptions(Ctor);\r\n\r\n    // transform component v-model data into props & events\r\n    if (isDef(data.model)) {\r\n      transformModel(Ctor.options, data);\r\n    }\r\n\r\n    // extract props\r\n    var propsData = extractPropsFromVNodeData(data, Ctor, tag);\r\n\r\n    // functional component\r\n    if (isTrue(Ctor.options.functional)) {\r\n      return createFunctionalComponent(Ctor, propsData, data, context, children)\r\n    }\r\n\r\n    // extract listeners, since these needs to be treated as\r\n    // child component listeners instead of DOM listeners\r\n    var listeners = data.on;\r\n    // replace with listeners with .native modifier\r\n    // so it gets processed during parent component patch.\r\n    data.on = data.nativeOn;\r\n\r\n    if (isTrue(Ctor.options.abstract)) {\r\n      // abstract components do not keep anything\r\n      // other than props & listeners & slot\r\n\r\n      // work around flow\r\n      var slot = data.slot;\r\n      data = {};\r\n      if (slot) {\r\n        data.slot = slot;\r\n      }\r\n    }\r\n\r\n    // install component management hooks onto the placeholder node\r\n    installComponentHooks(data);\r\n\r\n    // return a placeholder vnode\r\n    var name = Ctor.options.name || tag;\r\n    var vnode = new VNode(\r\n      (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\r\n      data, undefined, undefined, undefined, context,\r\n      { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\r\n      asyncFactory\r\n    );\r\n\r\n    return vnode\r\n  }\r\n\r\n  function createComponentInstanceForVnode (\r\n    vnode, // we know it's MountedComponentVNode but flow doesn't\r\n    parent // activeInstance in lifecycle state\r\n  ) {\r\n    var options = {\r\n      _isComponent: true,\r\n      _parentVnode: vnode,\r\n      parent: parent\r\n    };\r\n    // check inline-template render functions\r\n    var inlineTemplate = vnode.data.inlineTemplate;\r\n    if (isDef(inlineTemplate)) {\r\n      options.render = inlineTemplate.render;\r\n      options.staticRenderFns = inlineTemplate.staticRenderFns;\r\n    }\r\n    return new vnode.componentOptions.Ctor(options)\r\n  }\r\n\r\n  function installComponentHooks (data) {\r\n    var hooks = data.hook || (data.hook = {});\r\n    for (var i = 0; i < hooksToMerge.length; i++) {\r\n      var key = hooksToMerge[i];\r\n      var existing = hooks[key];\r\n      var toMerge = componentVNodeHooks[key];\r\n      if (existing !== toMerge && !(existing && existing._merged)) {\r\n        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\r\n      }\r\n    }\r\n  }\r\n\r\n  function mergeHook$1 (f1, f2) {\r\n    var merged = function (a, b) {\r\n      // flow complains about extra args which is why we use any\r\n      f1(a, b);\r\n      f2(a, b);\r\n    };\r\n    merged._merged = true;\r\n    return merged\r\n  }\r\n\r\n  // transform component v-model info (value and callback) into\r\n  // prop and event handler respectively.\r\n  function transformModel (options, data) {\r\n    var prop = (options.model && options.model.prop) || 'value';\r\n    var event = (options.model && options.model.event) || 'input'\r\n    ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\r\n    var on = data.on || (data.on = {});\r\n    var existing = on[event];\r\n    var callback = data.model.callback;\r\n    if (isDef(existing)) {\r\n      if (\r\n        Array.isArray(existing)\r\n          ? existing.indexOf(callback) === -1\r\n          : existing !== callback\r\n      ) {\r\n        on[event] = [callback].concat(existing);\r\n      }\r\n    } else {\r\n      on[event] = callback;\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var SIMPLE_NORMALIZE = 1;\r\n  var ALWAYS_NORMALIZE = 2;\r\n\r\n  // wrapper function for providing a more flexible interface\r\n  // without getting yelled at by flow\r\n  function createElement (\r\n    context,\r\n    tag,\r\n    data,\r\n    children,\r\n    normalizationType,\r\n    alwaysNormalize\r\n  ) {\r\n    if (Array.isArray(data) || isPrimitive(data)) {\r\n      normalizationType = children;\r\n      children = data;\r\n      data = undefined;\r\n    }\r\n    if (isTrue(alwaysNormalize)) {\r\n      normalizationType = ALWAYS_NORMALIZE;\r\n    }\r\n    return _createElement(context, tag, data, children, normalizationType)\r\n  }\r\n\r\n  function _createElement (\r\n    context,\r\n    tag,\r\n    data,\r\n    children,\r\n    normalizationType\r\n  ) {\r\n    if (isDef(data) && isDef((data).__ob__)) {\r\n      warn(\r\n        \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\r\n        'Always create fresh vnode data objects in each render!',\r\n        context\r\n      );\r\n      return createEmptyVNode()\r\n    }\r\n    // object syntax in v-bind\r\n    if (isDef(data) && isDef(data.is)) {\r\n      tag = data.is;\r\n    }\r\n    if (!tag) {\r\n      // in case of component :is set to falsy value\r\n      return createEmptyVNode()\r\n    }\r\n    // warn against non-primitive key\r\n    if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)\r\n    ) {\r\n      {\r\n        warn(\r\n          'Avoid using non-primitive value as key, ' +\r\n          'use string/number value instead.',\r\n          context\r\n        );\r\n      }\r\n    }\r\n    // support single function children as default scoped slot\r\n    if (Array.isArray(children) &&\r\n      typeof children[0] === 'function'\r\n    ) {\r\n      data = data || {};\r\n      data.scopedSlots = { default: children[0] };\r\n      children.length = 0;\r\n    }\r\n    if (normalizationType === ALWAYS_NORMALIZE) {\r\n      children = normalizeChildren(children);\r\n    } else if (normalizationType === SIMPLE_NORMALIZE) {\r\n      children = simpleNormalizeChildren(children);\r\n    }\r\n    var vnode, ns;\r\n    if (typeof tag === 'string') {\r\n      var Ctor;\r\n      ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\r\n      if (config.isReservedTag(tag)) {\r\n        // platform built-in elements\r\n        if (isDef(data) && isDef(data.nativeOn)) {\r\n          warn(\r\n            (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\r\n            context\r\n          );\r\n        }\r\n        vnode = new VNode(\r\n          config.parsePlatformTagName(tag), data, children,\r\n          undefined, undefined, context\r\n        );\r\n      } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\r\n        // component\r\n        vnode = createComponent(Ctor, data, context, children, tag);\r\n      } else {\r\n        // unknown or unlisted namespaced elements\r\n        // check at runtime because it may get assigned a namespace when its\r\n        // parent normalizes children\r\n        vnode = new VNode(\r\n          tag, data, children,\r\n          undefined, undefined, context\r\n        );\r\n      }\r\n    } else {\r\n      // direct component options / constructor\r\n      vnode = createComponent(tag, data, context, children);\r\n    }\r\n    if (Array.isArray(vnode)) {\r\n      return vnode\r\n    } else if (isDef(vnode)) {\r\n      if (isDef(ns)) { applyNS(vnode, ns); }\r\n      if (isDef(data)) { registerDeepBindings(data); }\r\n      return vnode\r\n    } else {\r\n      return createEmptyVNode()\r\n    }\r\n  }\r\n\r\n  function applyNS (vnode, ns, force) {\r\n    vnode.ns = ns;\r\n    if (vnode.tag === 'foreignObject') {\r\n      // use default namespace inside foreignObject\r\n      ns = undefined;\r\n      force = true;\r\n    }\r\n    if (isDef(vnode.children)) {\r\n      for (var i = 0, l = vnode.children.length; i < l; i++) {\r\n        var child = vnode.children[i];\r\n        if (isDef(child.tag) && (\r\n          isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\r\n          applyNS(child, ns, force);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ref #5318\r\n  // necessary to ensure parent re-render when deep bindings like :style and\r\n  // :class are used on slot nodes\r\n  function registerDeepBindings (data) {\r\n    if (isObject(data.style)) {\r\n      traverse(data.style);\r\n    }\r\n    if (isObject(data.class)) {\r\n      traverse(data.class);\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function initRender (vm) {\r\n    vm._vnode = null; // the root of the child tree\r\n    vm._staticTrees = null; // v-once cached trees\r\n    var options = vm.$options;\r\n    var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\r\n    var renderContext = parentVnode && parentVnode.context;\r\n    vm.$slots = resolveSlots(options._renderChildren, renderContext);\r\n    vm.$scopedSlots = emptyObject;\r\n    // bind the createElement fn to this instance\r\n    // so that we get proper render context inside it.\r\n    // args order: tag, data, children, normalizationType, alwaysNormalize\r\n    // internal version is used by render functions compiled from templates\r\n    vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\r\n    // normalization is always applied for the public version, used in\r\n    // user-written render functions.\r\n    vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\r\n\r\n    // $attrs & $listeners are exposed for easier HOC creation.\r\n    // they need to be reactive so that HOCs using them are always updated\r\n    var parentData = parentVnode && parentVnode.data;\r\n\r\n    /* istanbul ignore else */\r\n    {\r\n      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\r\n        !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\r\n      }, true);\r\n      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\r\n        !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\r\n      }, true);\r\n    }\r\n  }\r\n\r\n  var currentRenderingInstance = null;\r\n\r\n  function renderMixin (Vue) {\r\n    // install runtime convenience helpers\r\n    installRenderHelpers(Vue.prototype);\r\n\r\n    Vue.prototype.$nextTick = function (fn) {\r\n      return nextTick(fn, this)\r\n    };\r\n\r\n    Vue.prototype._render = function () {\r\n      var vm = this;\r\n      var ref = vm.$options;\r\n      var render = ref.render;\r\n      var _parentVnode = ref._parentVnode;\r\n\r\n      if (_parentVnode) {\r\n        vm.$scopedSlots = normalizeScopedSlots(\r\n          _parentVnode.data.scopedSlots,\r\n          vm.$slots,\r\n          vm.$scopedSlots\r\n        );\r\n      }\r\n\r\n      // set parent vnode. this allows render functions to have access\r\n      // to the data on the placeholder node.\r\n      vm.$vnode = _parentVnode;\r\n      // render self\r\n      var vnode;\r\n      try {\r\n        // There's no need to maintain a stack because all render fns are called\r\n        // separately from one another. Nested component's render fns are called\r\n        // when parent component is patched.\r\n        currentRenderingInstance = vm;\r\n        vnode = render.call(vm._renderProxy, vm.$createElement);\r\n      } catch (e) {\r\n        handleError(e, vm, \"render\");\r\n        // return error render result,\r\n        // or previous vnode to prevent render error causing blank component\r\n        /* istanbul ignore else */\r\n        if (vm.$options.renderError) {\r\n          try {\r\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\r\n          } catch (e) {\r\n            handleError(e, vm, \"renderError\");\r\n            vnode = vm._vnode;\r\n          }\r\n        } else {\r\n          vnode = vm._vnode;\r\n        }\r\n      } finally {\r\n        currentRenderingInstance = null;\r\n      }\r\n      // if the returned array contains only a single node, allow it\r\n      if (Array.isArray(vnode) && vnode.length === 1) {\r\n        vnode = vnode[0];\r\n      }\r\n      // return empty vnode in case the render function errored out\r\n      if (!(vnode instanceof VNode)) {\r\n        if (Array.isArray(vnode)) {\r\n          warn(\r\n            'Multiple root nodes returned from render function. Render function ' +\r\n            'should return a single root node.',\r\n            vm\r\n          );\r\n        }\r\n        vnode = createEmptyVNode();\r\n      }\r\n      // set parent\r\n      vnode.parent = _parentVnode;\r\n      return vnode\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  function ensureCtor (comp, base) {\r\n    if (\r\n      comp.__esModule ||\r\n      (hasSymbol && comp[Symbol.toStringTag] === 'Module')\r\n    ) {\r\n      comp = comp.default;\r\n    }\r\n    return isObject(comp)\r\n      ? base.extend(comp)\r\n      : comp\r\n  }\r\n\r\n  function createAsyncPlaceholder (\r\n    factory,\r\n    data,\r\n    context,\r\n    children,\r\n    tag\r\n  ) {\r\n    var node = createEmptyVNode();\r\n    node.asyncFactory = factory;\r\n    node.asyncMeta = { data: data, context: context, children: children, tag: tag };\r\n    return node\r\n  }\r\n\r\n  function resolveAsyncComponent (\r\n    factory,\r\n    baseCtor\r\n  ) {\r\n    if (isTrue(factory.error) && isDef(factory.errorComp)) {\r\n      return factory.errorComp\r\n    }\r\n\r\n    if (isDef(factory.resolved)) {\r\n      return factory.resolved\r\n    }\r\n\r\n    var owner = currentRenderingInstance;\r\n    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\r\n      // already pending\r\n      factory.owners.push(owner);\r\n    }\r\n\r\n    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\r\n      return factory.loadingComp\r\n    }\r\n\r\n    if (owner && !isDef(factory.owners)) {\r\n      var owners = factory.owners = [owner];\r\n      var sync = true;\r\n      var timerLoading = null;\r\n      var timerTimeout = null\r\n\r\n      ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\r\n\r\n      var forceRender = function (renderCompleted) {\r\n        for (var i = 0, l = owners.length; i < l; i++) {\r\n          (owners[i]).$forceUpdate();\r\n        }\r\n\r\n        if (renderCompleted) {\r\n          owners.length = 0;\r\n          if (timerLoading !== null) {\r\n            clearTimeout(timerLoading);\r\n            timerLoading = null;\r\n          }\r\n          if (timerTimeout !== null) {\r\n            clearTimeout(timerTimeout);\r\n            timerTimeout = null;\r\n          }\r\n        }\r\n      };\r\n\r\n      var resolve = once(function (res) {\r\n        // cache resolved\r\n        factory.resolved = ensureCtor(res, baseCtor);\r\n        // invoke callbacks only if this is not a synchronous resolve\r\n        // (async resolves are shimmed as synchronous during SSR)\r\n        if (!sync) {\r\n          forceRender(true);\r\n        } else {\r\n          owners.length = 0;\r\n        }\r\n      });\r\n\r\n      var reject = once(function (reason) {\r\n        warn(\r\n          \"Failed to resolve async component: \" + (String(factory)) +\r\n          (reason ? (\"\\nReason: \" + reason) : '')\r\n        );\r\n        if (isDef(factory.errorComp)) {\r\n          factory.error = true;\r\n          forceRender(true);\r\n        }\r\n      });\r\n\r\n      var res = factory(resolve, reject);\r\n\r\n      if (isObject(res)) {\r\n        if (isPromise(res)) {\r\n          // () => Promise\r\n          if (isUndef(factory.resolved)) {\r\n            res.then(resolve, reject);\r\n          }\r\n        } else if (isPromise(res.component)) {\r\n          res.component.then(resolve, reject);\r\n\r\n          if (isDef(res.error)) {\r\n            factory.errorComp = ensureCtor(res.error, baseCtor);\r\n          }\r\n\r\n          if (isDef(res.loading)) {\r\n            factory.loadingComp = ensureCtor(res.loading, baseCtor);\r\n            if (res.delay === 0) {\r\n              factory.loading = true;\r\n            } else {\r\n              timerLoading = setTimeout(function () {\r\n                timerLoading = null;\r\n                if (isUndef(factory.resolved) && isUndef(factory.error)) {\r\n                  factory.loading = true;\r\n                  forceRender(false);\r\n                }\r\n              }, res.delay || 200);\r\n            }\r\n          }\r\n\r\n          if (isDef(res.timeout)) {\r\n            timerTimeout = setTimeout(function () {\r\n              timerTimeout = null;\r\n              if (isUndef(factory.resolved)) {\r\n                reject(\r\n                  \"timeout (\" + (res.timeout) + \"ms)\"\r\n                );\r\n              }\r\n            }, res.timeout);\r\n          }\r\n        }\r\n      }\r\n\r\n      sync = false;\r\n      // return in case resolved synchronously\r\n      return factory.loading\r\n        ? factory.loadingComp\r\n        : factory.resolved\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function isAsyncPlaceholder (node) {\r\n    return node.isComment && node.asyncFactory\r\n  }\r\n\r\n  /*  */\r\n\r\n  function getFirstComponentChild (children) {\r\n    if (Array.isArray(children)) {\r\n      for (var i = 0; i < children.length; i++) {\r\n        var c = children[i];\r\n        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\r\n          return c\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  /*  */\r\n\r\n  function initEvents (vm) {\r\n    vm._events = Object.create(null);\r\n    vm._hasHookEvent = false;\r\n    // init parent attached events\r\n    var listeners = vm.$options._parentListeners;\r\n    if (listeners) {\r\n      updateComponentListeners(vm, listeners);\r\n    }\r\n  }\r\n\r\n  var target;\r\n\r\n  function add (event, fn) {\r\n    target.$on(event, fn);\r\n  }\r\n\r\n  function remove$1 (event, fn) {\r\n    target.$off(event, fn);\r\n  }\r\n\r\n  function createOnceHandler (event, fn) {\r\n    var _target = target;\r\n    return function onceHandler () {\r\n      var res = fn.apply(null, arguments);\r\n      if (res !== null) {\r\n        _target.$off(event, onceHandler);\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateComponentListeners (\r\n    vm,\r\n    listeners,\r\n    oldListeners\r\n  ) {\r\n    target = vm;\r\n    updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\r\n    target = undefined;\r\n  }\r\n\r\n  function eventsMixin (Vue) {\r\n    var hookRE = /^hook:/;\r\n    Vue.prototype.$on = function (event, fn) {\r\n      var vm = this;\r\n      if (Array.isArray(event)) {\r\n        for (var i = 0, l = event.length; i < l; i++) {\r\n          vm.$on(event[i], fn);\r\n        }\r\n      } else {\r\n        (vm._events[event] || (vm._events[event] = [])).push(fn);\r\n        // optimize hook:event cost by using a boolean flag marked at registration\r\n        // instead of a hash lookup\r\n        if (hookRE.test(event)) {\r\n          vm._hasHookEvent = true;\r\n        }\r\n      }\r\n      return vm\r\n    };\r\n\r\n    Vue.prototype.$once = function (event, fn) {\r\n      var vm = this;\r\n      function on () {\r\n        vm.$off(event, on);\r\n        fn.apply(vm, arguments);\r\n      }\r\n      on.fn = fn;\r\n      vm.$on(event, on);\r\n      return vm\r\n    };\r\n\r\n    Vue.prototype.$off = function (event, fn) {\r\n      var vm = this;\r\n      // all\r\n      if (!arguments.length) {\r\n        vm._events = Object.create(null);\r\n        return vm\r\n      }\r\n      // array of events\r\n      if (Array.isArray(event)) {\r\n        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\r\n          vm.$off(event[i$1], fn);\r\n        }\r\n        return vm\r\n      }\r\n      // specific event\r\n      var cbs = vm._events[event];\r\n      if (!cbs) {\r\n        return vm\r\n      }\r\n      if (!fn) {\r\n        vm._events[event] = null;\r\n        return vm\r\n      }\r\n      // specific handler\r\n      var cb;\r\n      var i = cbs.length;\r\n      while (i--) {\r\n        cb = cbs[i];\r\n        if (cb === fn || cb.fn === fn) {\r\n          cbs.splice(i, 1);\r\n          break\r\n        }\r\n      }\r\n      return vm\r\n    };\r\n\r\n    Vue.prototype.$emit = function (event) {\r\n      var vm = this;\r\n      {\r\n        var lowerCaseEvent = event.toLowerCase();\r\n        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\r\n          tip(\r\n            \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\r\n            (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\r\n            \"Note that HTML attributes are case-insensitive and you cannot use \" +\r\n            \"v-on to listen to camelCase events when using in-DOM templates. \" +\r\n            \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\r\n          );\r\n        }\r\n      }\r\n      var cbs = vm._events[event];\r\n      if (cbs) {\r\n        cbs = cbs.length > 1 ? toArray(cbs) : cbs;\r\n        var args = toArray(arguments, 1);\r\n        var info = \"event handler for \\\"\" + event + \"\\\"\";\r\n        for (var i = 0, l = cbs.length; i < l; i++) {\r\n          invokeWithErrorHandling(cbs[i], vm, args, vm, info);\r\n        }\r\n      }\r\n      return vm\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  var activeInstance = null;\r\n  var isUpdatingChildComponent = false;\r\n\r\n  function setActiveInstance(vm) {\r\n    var prevActiveInstance = activeInstance;\r\n    activeInstance = vm;\r\n    return function () {\r\n      activeInstance = prevActiveInstance;\r\n    }\r\n  }\r\n\r\n  function initLifecycle (vm) {\r\n    var options = vm.$options;\r\n\r\n    // locate first non-abstract parent\r\n    var parent = options.parent;\r\n    if (parent && !options.abstract) {\r\n      while (parent.$options.abstract && parent.$parent) {\r\n        parent = parent.$parent;\r\n      }\r\n      parent.$children.push(vm);\r\n    }\r\n\r\n    vm.$parent = parent;\r\n    vm.$root = parent ? parent.$root : vm;\r\n\r\n    vm.$children = [];\r\n    vm.$refs = {};\r\n\r\n    vm._watcher = null;\r\n    vm._inactive = null;\r\n    vm._directInactive = false;\r\n    vm._isMounted = false;\r\n    vm._isDestroyed = false;\r\n    vm._isBeingDestroyed = false;\r\n  }\r\n\r\n  function lifecycleMixin (Vue) {\r\n    Vue.prototype._update = function (vnode, hydrating) {\r\n      var vm = this;\r\n      var prevEl = vm.$el;\r\n      var prevVnode = vm._vnode;\r\n      var restoreActiveInstance = setActiveInstance(vm);\r\n      vm._vnode = vnode;\r\n      // Vue.prototype.__patch__ is injected in entry points\r\n      // based on the rendering backend used.\r\n      if (!prevVnode) {\r\n        // initial render\r\n        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\r\n      } else {\r\n        // updates\r\n        vm.$el = vm.__patch__(prevVnode, vnode);\r\n      }\r\n      restoreActiveInstance();\r\n      // update __vue__ reference\r\n      if (prevEl) {\r\n        prevEl.__vue__ = null;\r\n      }\r\n      if (vm.$el) {\r\n        vm.$el.__vue__ = vm;\r\n      }\r\n      // if parent is an HOC, update its $el as well\r\n      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\r\n        vm.$parent.$el = vm.$el;\r\n      }\r\n      // updated hook is called by the scheduler to ensure that children are\r\n      // updated in a parent's updated hook.\r\n    };\r\n\r\n    Vue.prototype.$forceUpdate = function () {\r\n      var vm = this;\r\n      if (vm._watcher) {\r\n        vm._watcher.update();\r\n      }\r\n    };\r\n\r\n    Vue.prototype.$destroy = function () {\r\n      var vm = this;\r\n      if (vm._isBeingDestroyed) {\r\n        return\r\n      }\r\n      callHook(vm, 'beforeDestroy');\r\n      vm._isBeingDestroyed = true;\r\n      // remove self from parent\r\n      var parent = vm.$parent;\r\n      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\r\n        remove(parent.$children, vm);\r\n      }\r\n      // teardown watchers\r\n      if (vm._watcher) {\r\n        vm._watcher.teardown();\r\n      }\r\n      var i = vm._watchers.length;\r\n      while (i--) {\r\n        vm._watchers[i].teardown();\r\n      }\r\n      // remove reference from data ob\r\n      // frozen object may not have observer.\r\n      if (vm._data.__ob__) {\r\n        vm._data.__ob__.vmCount--;\r\n      }\r\n      // call the last hook...\r\n      vm._isDestroyed = true;\r\n      // invoke destroy hooks on current rendered tree\r\n      vm.__patch__(vm._vnode, null);\r\n      // fire destroyed hook\r\n      callHook(vm, 'destroyed');\r\n      // turn off all instance listeners.\r\n      vm.$off();\r\n      // remove __vue__ reference\r\n      if (vm.$el) {\r\n        vm.$el.__vue__ = null;\r\n      }\r\n      // release circular reference (#6759)\r\n      if (vm.$vnode) {\r\n        vm.$vnode.parent = null;\r\n      }\r\n    };\r\n  }\r\n\r\n  function mountComponent (\r\n    vm,\r\n    el,\r\n    hydrating\r\n  ) {\r\n    vm.$el = el;\r\n    if (!vm.$options.render) {\r\n      vm.$options.render = createEmptyVNode;\r\n      {\r\n        /* istanbul ignore if */\r\n        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\r\n          vm.$options.el || el) {\r\n          warn(\r\n            'You are using the runtime-only build of Vue where the template ' +\r\n            'compiler is not available. Either pre-compile the templates into ' +\r\n            'render functions, or use the compiler-included build.',\r\n            vm\r\n          );\r\n        } else {\r\n          warn(\r\n            'Failed to mount component: template or render function not defined.',\r\n            vm\r\n          );\r\n        }\r\n      }\r\n    }\r\n    callHook(vm, 'beforeMount');\r\n\r\n    var updateComponent;\r\n    /* istanbul ignore if */\r\n    if (config.performance && mark) {\r\n      updateComponent = function () {\r\n        var name = vm._name;\r\n        var id = vm._uid;\r\n        var startTag = \"vue-perf-start:\" + id;\r\n        var endTag = \"vue-perf-end:\" + id;\r\n\r\n        mark(startTag);\r\n        var vnode = vm._render();\r\n        mark(endTag);\r\n        measure((\"vue \" + name + \" render\"), startTag, endTag);\r\n\r\n        mark(startTag);\r\n        vm._update(vnode, hydrating);\r\n        mark(endTag);\r\n        measure((\"vue \" + name + \" patch\"), startTag, endTag);\r\n      };\r\n    } else {\r\n      updateComponent = function () {\r\n        vm._update(vm._render(), hydrating);\r\n      };\r\n    }\r\n\r\n    // we set this to vm._watcher inside the watcher's constructor\r\n    // since the watcher's initial patch may call $forceUpdate (e.g. inside child\r\n    // component's mounted hook), which relies on vm._watcher being already defined\r\n    new Watcher(vm, updateComponent, noop, {\r\n      before: function before () {\r\n        if (vm._isMounted && !vm._isDestroyed) {\r\n          callHook(vm, 'beforeUpdate');\r\n        }\r\n      }\r\n    }, true /* isRenderWatcher */);\r\n    hydrating = false;\r\n\r\n    // manually mounted instance, call mounted on self\r\n    // mounted is called for render-created child components in its inserted hook\r\n    if (vm.$vnode == null) {\r\n      vm._isMounted = true;\r\n      callHook(vm, 'mounted');\r\n    }\r\n    return vm\r\n  }\r\n\r\n  function updateChildComponent (\r\n    vm,\r\n    propsData,\r\n    listeners,\r\n    parentVnode,\r\n    renderChildren\r\n  ) {\r\n    {\r\n      isUpdatingChildComponent = true;\r\n    }\r\n\r\n    // determine whether component has slot children\r\n    // we need to do this before overwriting $options._renderChildren.\r\n\r\n    // check if there are dynamic scopedSlots (hand-written or compiled but with\r\n    // dynamic slot names). Static scoped slots compiled from template has the\r\n    // \"$stable\" marker.\r\n    var newScopedSlots = parentVnode.data.scopedSlots;\r\n    var oldScopedSlots = vm.$scopedSlots;\r\n    var hasDynamicScopedSlot = !!(\r\n      (newScopedSlots && !newScopedSlots.$stable) ||\r\n      (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\r\n      (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\r\n    );\r\n\r\n    // Any static slot children from the parent may have changed during parent's\r\n    // update. Dynamic scoped slots may also have changed. In such cases, a forced\r\n    // update is necessary to ensure correctness.\r\n    var needsForceUpdate = !!(\r\n      renderChildren ||               // has new static slots\r\n      vm.$options._renderChildren ||  // has old static slots\r\n      hasDynamicScopedSlot\r\n    );\r\n\r\n    vm.$options._parentVnode = parentVnode;\r\n    vm.$vnode = parentVnode; // update vm's placeholder node without re-render\r\n\r\n    if (vm._vnode) { // update child tree's parent\r\n      vm._vnode.parent = parentVnode;\r\n    }\r\n    vm.$options._renderChildren = renderChildren;\r\n\r\n    // update $attrs and $listeners hash\r\n    // these are also reactive so they may trigger child update if the child\r\n    // used them during render\r\n    vm.$attrs = parentVnode.data.attrs || emptyObject;\r\n    vm.$listeners = listeners || emptyObject;\r\n\r\n    // update props\r\n    if (propsData && vm.$options.props) {\r\n      toggleObserving(false);\r\n      var props = vm._props;\r\n      var propKeys = vm.$options._propKeys || [];\r\n      for (var i = 0; i < propKeys.length; i++) {\r\n        var key = propKeys[i];\r\n        var propOptions = vm.$options.props; // wtf flow?\r\n        props[key] = validateProp(key, propOptions, propsData, vm);\r\n      }\r\n      toggleObserving(true);\r\n      // keep a copy of raw propsData\r\n      vm.$options.propsData = propsData;\r\n    }\r\n\r\n    // update listeners\r\n    listeners = listeners || emptyObject;\r\n    var oldListeners = vm.$options._parentListeners;\r\n    vm.$options._parentListeners = listeners;\r\n    updateComponentListeners(vm, listeners, oldListeners);\r\n\r\n    // resolve slots + force update if has children\r\n    if (needsForceUpdate) {\r\n      vm.$slots = resolveSlots(renderChildren, parentVnode.context);\r\n      vm.$forceUpdate();\r\n    }\r\n\r\n    {\r\n      isUpdatingChildComponent = false;\r\n    }\r\n  }\r\n\r\n  function isInInactiveTree (vm) {\r\n    while (vm && (vm = vm.$parent)) {\r\n      if (vm._inactive) { return true }\r\n    }\r\n    return false\r\n  }\r\n\r\n  function activateChildComponent (vm, direct) {\r\n    if (direct) {\r\n      vm._directInactive = false;\r\n      if (isInInactiveTree(vm)) {\r\n        return\r\n      }\r\n    } else if (vm._directInactive) {\r\n      return\r\n    }\r\n    if (vm._inactive || vm._inactive === null) {\r\n      vm._inactive = false;\r\n      for (var i = 0; i < vm.$children.length; i++) {\r\n        activateChildComponent(vm.$children[i]);\r\n      }\r\n      callHook(vm, 'activated');\r\n    }\r\n  }\r\n\r\n  function deactivateChildComponent (vm, direct) {\r\n    if (direct) {\r\n      vm._directInactive = true;\r\n      if (isInInactiveTree(vm)) {\r\n        return\r\n      }\r\n    }\r\n    if (!vm._inactive) {\r\n      vm._inactive = true;\r\n      for (var i = 0; i < vm.$children.length; i++) {\r\n        deactivateChildComponent(vm.$children[i]);\r\n      }\r\n      callHook(vm, 'deactivated');\r\n    }\r\n  }\r\n\r\n  function callHook (vm, hook) {\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        invokeWithErrorHandling(handlers[i], vm, null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n  }\r\n\r\n  /*  */\r\n\r\n  var MAX_UPDATE_COUNT = 100;\r\n\r\n  var queue = [];\r\n  var activatedChildren = [];\r\n  var has = {};\r\n  var circular = {};\r\n  var waiting = false;\r\n  var flushing = false;\r\n  var index = 0;\r\n\r\n  /**\r\n   * Reset the scheduler's state.\r\n   */\r\n  function resetSchedulerState () {\r\n    index = queue.length = activatedChildren.length = 0;\r\n    has = {};\r\n    {\r\n      circular = {};\r\n    }\r\n    waiting = flushing = false;\r\n  }\r\n\r\n  // Async edge case #6566 requires saving the timestamp when event listeners are\r\n  // attached. However, calling performance.now() has a perf overhead especially\r\n  // if the page has thousands of event listeners. Instead, we take a timestamp\r\n  // every time the scheduler flushes and use that for all event listeners\r\n  // attached during that flush.\r\n  var currentFlushTimestamp = 0;\r\n\r\n  // Async edge case fix requires storing an event listener's attach timestamp.\r\n  var getNow = Date.now;\r\n\r\n  // Determine what event timestamp the browser is using. Annoyingly, the\r\n  // timestamp can either be hi-res (relative to page load) or low-res\r\n  // (relative to UNIX epoch), so in order to compare time we have to use the\r\n  // same timestamp type when saving the flush timestamp.\r\n  // All IE versions use low-res event timestamps, and have problematic clock\r\n  // implementations (#9632)\r\n  if (inBrowser && !isIE) {\r\n    var performance = window.performance;\r\n    if (\r\n      performance &&\r\n      typeof performance.now === 'function' &&\r\n      getNow() > document.createEvent('Event').timeStamp\r\n    ) {\r\n      // if the event timestamp, although evaluated AFTER the Date.now(), is\r\n      // smaller than it, it means the event is using a hi-res timestamp,\r\n      // and we need to use the hi-res version for event listener timestamps as\r\n      // well.\r\n      getNow = function () { return performance.now(); };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush both queues and run the watchers.\r\n   */\r\n  function flushSchedulerQueue () {\r\n    currentFlushTimestamp = getNow();\r\n    flushing = true;\r\n    var watcher, id;\r\n\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child)\r\n    // 2. A component's user watchers are run before its render watcher (because\r\n    //    user watchers are created before the render watcher)\r\n    // 3. If a component is destroyed during a parent component's watcher run,\r\n    //    its watchers can be skipped.\r\n    queue.sort(function (a, b) { return a.id - b.id; });\r\n\r\n    // do not cache length because more watchers might be pushed\r\n    // as we run existing watchers\r\n    for (index = 0; index < queue.length; index++) {\r\n      watcher = queue[index];\r\n      if (watcher.before) {\r\n        watcher.before();\r\n      }\r\n      id = watcher.id;\r\n      has[id] = null;\r\n      watcher.run();\r\n      // in dev build, check and stop circular updates.\r\n      if (has[id] != null) {\r\n        circular[id] = (circular[id] || 0) + 1;\r\n        if (circular[id] > MAX_UPDATE_COUNT) {\r\n          warn(\r\n            'You may have an infinite update loop ' + (\r\n              watcher.user\r\n                ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\r\n                : \"in a component render function.\"\r\n            ),\r\n            watcher.vm\r\n          );\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    // keep copies of post queues before resetting state\r\n    var activatedQueue = activatedChildren.slice();\r\n    var updatedQueue = queue.slice();\r\n\r\n    resetSchedulerState();\r\n\r\n    // call component updated and activated hooks\r\n    callActivatedHooks(activatedQueue);\r\n    callUpdatedHooks(updatedQueue);\r\n\r\n    // devtool hook\r\n    /* istanbul ignore if */\r\n    if (devtools && config.devtools) {\r\n      devtools.emit('flush');\r\n    }\r\n  }\r\n\r\n  function callUpdatedHooks (queue) {\r\n    var i = queue.length;\r\n    while (i--) {\r\n      var watcher = queue[i];\r\n      var vm = watcher.vm;\r\n      if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\r\n        callHook(vm, 'updated');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queue a kept-alive component that was activated during patch.\r\n   * The queue will be processed after the entire tree has been patched.\r\n   */\r\n  function queueActivatedComponent (vm) {\r\n    // setting _inactive to false here so that a render function can\r\n    // rely on checking whether it's in an inactive tree (e.g. router-view)\r\n    vm._inactive = false;\r\n    activatedChildren.push(vm);\r\n  }\r\n\r\n  function callActivatedHooks (queue) {\r\n    for (var i = 0; i < queue.length; i++) {\r\n      queue[i]._inactive = true;\r\n      activateChildComponent(queue[i], true /* true */);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Push a watcher into the watcher queue.\r\n   * Jobs with duplicate IDs will be skipped unless it's\r\n   * pushed when the queue is being flushed.\r\n   */\r\n  function queueWatcher (watcher) {\r\n    var id = watcher.id;\r\n    if (has[id] == null) {\r\n      has[id] = true;\r\n      if (!flushing) {\r\n        queue.push(watcher);\r\n      } else {\r\n        // if already flushing, splice the watcher based on its id\r\n        // if already past its id, it will be run next immediately.\r\n        var i = queue.length - 1;\r\n        while (i > index && queue[i].id > watcher.id) {\r\n          i--;\r\n        }\r\n        queue.splice(i + 1, 0, watcher);\r\n      }\r\n      // queue the flush\r\n      if (!waiting) {\r\n        waiting = true;\r\n\r\n        if (!config.async) {\r\n          flushSchedulerQueue();\r\n          return\r\n        }\r\n        nextTick(flushSchedulerQueue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  var uid$2 = 0;\r\n\r\n  /**\r\n   * A watcher parses an expression, collects dependencies,\r\n   * and fires callback when the expression value changes.\r\n   * This is used for both the $watch() api and directives.\r\n   */\r\n  var Watcher = function Watcher (\r\n    vm,\r\n    expOrFn,\r\n    cb,\r\n    options,\r\n    isRenderWatcher\r\n  ) {\r\n    this.vm = vm;\r\n    if (isRenderWatcher) {\r\n      vm._watcher = this;\r\n    }\r\n    vm._watchers.push(this);\r\n    // options\r\n    if (options) {\r\n      this.deep = !!options.deep;\r\n      this.user = !!options.user;\r\n      this.lazy = !!options.lazy;\r\n      this.sync = !!options.sync;\r\n      this.before = options.before;\r\n    } else {\r\n      this.deep = this.user = this.lazy = this.sync = false;\r\n    }\r\n    this.cb = cb;\r\n    this.id = ++uid$2; // uid for batching\r\n    this.active = true;\r\n    this.dirty = this.lazy; // for lazy watchers\r\n    this.deps = [];\r\n    this.newDeps = [];\r\n    this.depIds = new _Set();\r\n    this.newDepIds = new _Set();\r\n    this.expression = expOrFn.toString();\r\n    // parse expression for getter\r\n    if (typeof expOrFn === 'function') {\r\n      this.getter = expOrFn;\r\n    } else {\r\n      this.getter = parsePath(expOrFn);\r\n      if (!this.getter) {\r\n        this.getter = noop;\r\n        warn(\r\n          \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\r\n          'Watcher only accepts simple dot-delimited paths. ' +\r\n          'For full control, use a function instead.',\r\n          vm\r\n        );\r\n      }\r\n    }\r\n    this.value = this.lazy\r\n      ? undefined\r\n      : this.get();\r\n  };\r\n\r\n  /**\r\n   * Evaluate the getter, and re-collect dependencies.\r\n   */\r\n  Watcher.prototype.get = function get () {\r\n    pushTarget(this);\r\n    var value;\r\n    var vm = this.vm;\r\n    try {\r\n      value = this.getter.call(vm, vm);\r\n    } catch (e) {\r\n      if (this.user) {\r\n        handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\r\n      } else {\r\n        throw e\r\n      }\r\n    } finally {\r\n      // \"touch\" every property so they are all tracked as\r\n      // dependencies for deep watching\r\n      if (this.deep) {\r\n        traverse(value);\r\n      }\r\n      popTarget();\r\n      this.cleanupDeps();\r\n    }\r\n    return value\r\n  };\r\n\r\n  /**\r\n   * Add a dependency to this directive.\r\n   */\r\n  Watcher.prototype.addDep = function addDep (dep) {\r\n    var id = dep.id;\r\n    if (!this.newDepIds.has(id)) {\r\n      this.newDepIds.add(id);\r\n      this.newDeps.push(dep);\r\n      if (!this.depIds.has(id)) {\r\n        dep.addSub(this);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clean up for dependency collection.\r\n   */\r\n  Watcher.prototype.cleanupDeps = function cleanupDeps () {\r\n    var i = this.deps.length;\r\n    while (i--) {\r\n      var dep = this.deps[i];\r\n      if (!this.newDepIds.has(dep.id)) {\r\n        dep.removeSub(this);\r\n      }\r\n    }\r\n    var tmp = this.depIds;\r\n    this.depIds = this.newDepIds;\r\n    this.newDepIds = tmp;\r\n    this.newDepIds.clear();\r\n    tmp = this.deps;\r\n    this.deps = this.newDeps;\r\n    this.newDeps = tmp;\r\n    this.newDeps.length = 0;\r\n  };\r\n\r\n  /**\r\n   * Subscriber interface.\r\n   * Will be called when a dependency changes.\r\n   */\r\n  Watcher.prototype.update = function update () {\r\n    /* istanbul ignore else */\r\n    if (this.lazy) {\r\n      this.dirty = true;\r\n    } else if (this.sync) {\r\n      this.run();\r\n    } else {\r\n      queueWatcher(this);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Scheduler job interface.\r\n   * Will be called by the scheduler.\r\n   */\r\n  Watcher.prototype.run = function run () {\r\n    if (this.active) {\r\n      var value = this.get();\r\n      if (\r\n        value !== this.value ||\r\n        // Deep watchers and watchers on Object/Arrays should fire even\r\n        // when the value is the same, because the value may\r\n        // have mutated.\r\n        isObject(value) ||\r\n        this.deep\r\n      ) {\r\n        // set new value\r\n        var oldValue = this.value;\r\n        this.value = value;\r\n        if (this.user) {\r\n          try {\r\n            this.cb.call(this.vm, value, oldValue);\r\n          } catch (e) {\r\n            handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\r\n          }\r\n        } else {\r\n          this.cb.call(this.vm, value, oldValue);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Evaluate the value of the watcher.\r\n   * This only gets called for lazy watchers.\r\n   */\r\n  Watcher.prototype.evaluate = function evaluate () {\r\n    this.value = this.get();\r\n    this.dirty = false;\r\n  };\r\n\r\n  /**\r\n   * Depend on all deps collected by this watcher.\r\n   */\r\n  Watcher.prototype.depend = function depend () {\r\n    var i = this.deps.length;\r\n    while (i--) {\r\n      this.deps[i].depend();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Remove self from all dependencies' subscriber list.\r\n   */\r\n  Watcher.prototype.teardown = function teardown () {\r\n    if (this.active) {\r\n      // remove self from vm's watcher list\r\n      // this is a somewhat expensive operation so we skip it\r\n      // if the vm is being destroyed.\r\n      if (!this.vm._isBeingDestroyed) {\r\n        remove(this.vm._watchers, this);\r\n      }\r\n      var i = this.deps.length;\r\n      while (i--) {\r\n        this.deps[i].removeSub(this);\r\n      }\r\n      this.active = false;\r\n    }\r\n  };\r\n\r\n  /*  */\r\n\r\n  var sharedPropertyDefinition = {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: noop,\r\n    set: noop\r\n  };\r\n\r\n  function proxy (target, sourceKey, key) {\r\n    sharedPropertyDefinition.get = function proxyGetter () {\r\n      return this[sourceKey][key]\r\n    };\r\n    sharedPropertyDefinition.set = function proxySetter (val) {\r\n      this[sourceKey][key] = val;\r\n    };\r\n    Object.defineProperty(target, key, sharedPropertyDefinition);\r\n  }\r\n\r\n  function initState (vm) {\r\n    vm._watchers = [];\r\n    var opts = vm.$options;\r\n    if (opts.props) { initProps(vm, opts.props); }\r\n    if (opts.methods) { initMethods(vm, opts.methods); }\r\n    if (opts.data) {\r\n      initData(vm);\r\n    } else {\r\n      observe(vm._data = {}, true /* asRootData */);\r\n    }\r\n    if (opts.computed) { initComputed(vm, opts.computed); }\r\n    if (opts.watch && opts.watch !== nativeWatch) {\r\n      initWatch(vm, opts.watch);\r\n    }\r\n  }\r\n\r\n  function initProps (vm, propsOptions) {\r\n    var propsData = vm.$options.propsData || {};\r\n    var props = vm._props = {};\r\n    // cache prop keys so that future props updates can iterate using Array\r\n    // instead of dynamic object key enumeration.\r\n    var keys = vm.$options._propKeys = [];\r\n    var isRoot = !vm.$parent;\r\n    // root instance props should be converted\r\n    if (!isRoot) {\r\n      toggleObserving(false);\r\n    }\r\n    var loop = function ( key ) {\r\n      keys.push(key);\r\n      var value = validateProp(key, propsOptions, propsData, vm);\r\n      /* istanbul ignore else */\r\n      {\r\n        var hyphenatedKey = hyphenate(key);\r\n        if (isReservedAttribute(hyphenatedKey) ||\r\n            config.isReservedAttr(hyphenatedKey)) {\r\n          warn(\r\n            (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\r\n            vm\r\n          );\r\n        }\r\n        defineReactive$$1(props, key, value, function () {\r\n          if (!isRoot && !isUpdatingChildComponent) {\r\n            warn(\r\n              \"Avoid mutating a prop directly since the value will be \" +\r\n              \"overwritten whenever the parent component re-renders. \" +\r\n              \"Instead, use a data or computed property based on the prop's \" +\r\n              \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\r\n              vm\r\n            );\r\n          }\r\n        });\r\n      }\r\n      // static props are already proxied on the component's prototype\r\n      // during Vue.extend(). We only need to proxy props defined at\r\n      // instantiation here.\r\n      if (!(key in vm)) {\r\n        proxy(vm, \"_props\", key);\r\n      }\r\n    };\r\n\r\n    for (var key in propsOptions) loop( key );\r\n    toggleObserving(true);\r\n  }\r\n\r\n  function initData (vm) {\r\n    var data = vm.$options.data;\r\n    data = vm._data = typeof data === 'function'\r\n      ? getData(data, vm)\r\n      : data || {};\r\n    if (!isPlainObject(data)) {\r\n      data = {};\r\n      warn(\r\n        'data functions should return an object:\\n' +\r\n        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\r\n        vm\r\n      );\r\n    }\r\n    // proxy data on instance\r\n    var keys = Object.keys(data);\r\n    var props = vm.$options.props;\r\n    var methods = vm.$options.methods;\r\n    var i = keys.length;\r\n    while (i--) {\r\n      var key = keys[i];\r\n      {\r\n        if (methods && hasOwn(methods, key)) {\r\n          warn(\r\n            (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\r\n            vm\r\n          );\r\n        }\r\n      }\r\n      if (props && hasOwn(props, key)) {\r\n        warn(\r\n          \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\r\n          \"Use prop default value instead.\",\r\n          vm\r\n        );\r\n      } else if (!isReserved(key)) {\r\n        proxy(vm, \"_data\", key);\r\n      }\r\n    }\r\n    // observe data\r\n    observe(data, true /* asRootData */);\r\n  }\r\n\r\n  function getData (data, vm) {\r\n    // #7573 disable dep collection when invoking data getters\r\n    pushTarget();\r\n    try {\r\n      return data.call(vm, vm)\r\n    } catch (e) {\r\n      handleError(e, vm, \"data()\");\r\n      return {}\r\n    } finally {\r\n      popTarget();\r\n    }\r\n  }\r\n\r\n  var computedWatcherOptions = { lazy: true };\r\n\r\n  function initComputed (vm, computed) {\r\n    // $flow-disable-line\r\n    var watchers = vm._computedWatchers = Object.create(null);\r\n    // computed properties are just getters during SSR\r\n    var isSSR = isServerRendering();\r\n\r\n    for (var key in computed) {\r\n      var userDef = computed[key];\r\n      var getter = typeof userDef === 'function' ? userDef : userDef.get;\r\n      if (getter == null) {\r\n        warn(\r\n          (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\r\n          vm\r\n        );\r\n      }\r\n\r\n      if (!isSSR) {\r\n        // create internal watcher for the computed property.\r\n        watchers[key] = new Watcher(\r\n          vm,\r\n          getter || noop,\r\n          noop,\r\n          computedWatcherOptions\r\n        );\r\n      }\r\n\r\n      // component-defined computed properties are already defined on the\r\n      // component prototype. We only need to define computed properties defined\r\n      // at instantiation here.\r\n      if (!(key in vm)) {\r\n        defineComputed(vm, key, userDef);\r\n      } else {\r\n        if (key in vm.$data) {\r\n          warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\r\n        } else if (vm.$options.props && key in vm.$options.props) {\r\n          warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function defineComputed (\r\n    target,\r\n    key,\r\n    userDef\r\n  ) {\r\n    var shouldCache = !isServerRendering();\r\n    if (typeof userDef === 'function') {\r\n      sharedPropertyDefinition.get = shouldCache\r\n        ? createComputedGetter(key)\r\n        : createGetterInvoker(userDef);\r\n      sharedPropertyDefinition.set = noop;\r\n    } else {\r\n      sharedPropertyDefinition.get = userDef.get\r\n        ? shouldCache && userDef.cache !== false\r\n          ? createComputedGetter(key)\r\n          : createGetterInvoker(userDef.get)\r\n        : noop;\r\n      sharedPropertyDefinition.set = userDef.set || noop;\r\n    }\r\n    if (sharedPropertyDefinition.set === noop) {\r\n      sharedPropertyDefinition.set = function () {\r\n        warn(\r\n          (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\r\n          this\r\n        );\r\n      };\r\n    }\r\n    Object.defineProperty(target, key, sharedPropertyDefinition);\r\n  }\r\n\r\n  function createComputedGetter (key) {\r\n    return function computedGetter () {\r\n      var watcher = this._computedWatchers && this._computedWatchers[key];\r\n      if (watcher) {\r\n        if (watcher.dirty) {\r\n          watcher.evaluate();\r\n        }\r\n        if (Dep.target) {\r\n          watcher.depend();\r\n        }\r\n        return watcher.value\r\n      }\r\n    }\r\n  }\r\n\r\n  function createGetterInvoker(fn) {\r\n    return function computedGetter () {\r\n      return fn.call(this, this)\r\n    }\r\n  }\r\n\r\n  function initMethods (vm, methods) {\r\n    var props = vm.$options.props;\r\n    for (var key in methods) {\r\n      {\r\n        if (typeof methods[key] !== 'function') {\r\n          warn(\r\n            \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\r\n            \"Did you reference the function correctly?\",\r\n            vm\r\n          );\r\n        }\r\n        if (props && hasOwn(props, key)) {\r\n          warn(\r\n            (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\r\n            vm\r\n          );\r\n        }\r\n        if ((key in vm) && isReserved(key)) {\r\n          warn(\r\n            \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\r\n            \"Avoid defining component methods that start with _ or $.\"\r\n          );\r\n        }\r\n      }\r\n      vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\r\n    }\r\n  }\r\n\r\n  function initWatch (vm, watch) {\r\n    for (var key in watch) {\r\n      var handler = watch[key];\r\n      if (Array.isArray(handler)) {\r\n        for (var i = 0; i < handler.length; i++) {\r\n          createWatcher(vm, key, handler[i]);\r\n        }\r\n      } else {\r\n        createWatcher(vm, key, handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  function createWatcher (\r\n    vm,\r\n    expOrFn,\r\n    handler,\r\n    options\r\n  ) {\r\n    if (isPlainObject(handler)) {\r\n      options = handler;\r\n      handler = handler.handler;\r\n    }\r\n    if (typeof handler === 'string') {\r\n      handler = vm[handler];\r\n    }\r\n    return vm.$watch(expOrFn, handler, options)\r\n  }\r\n\r\n  function stateMixin (Vue) {\r\n    // flow somehow has problems with directly declared definition object\r\n    // when using Object.defineProperty, so we have to procedurally build up\r\n    // the object here.\r\n    var dataDef = {};\r\n    dataDef.get = function () { return this._data };\r\n    var propsDef = {};\r\n    propsDef.get = function () { return this._props };\r\n    {\r\n      dataDef.set = function () {\r\n        warn(\r\n          'Avoid replacing instance root $data. ' +\r\n          'Use nested data properties instead.',\r\n          this\r\n        );\r\n      };\r\n      propsDef.set = function () {\r\n        warn(\"$props is readonly.\", this);\r\n      };\r\n    }\r\n    Object.defineProperty(Vue.prototype, '$data', dataDef);\r\n    Object.defineProperty(Vue.prototype, '$props', propsDef);\r\n\r\n    Vue.prototype.$set = set;\r\n    Vue.prototype.$delete = del;\r\n\r\n    Vue.prototype.$watch = function (\r\n      expOrFn,\r\n      cb,\r\n      options\r\n    ) {\r\n      var vm = this;\r\n      if (isPlainObject(cb)) {\r\n        return createWatcher(vm, expOrFn, cb, options)\r\n      }\r\n      options = options || {};\r\n      options.user = true;\r\n      var watcher = new Watcher(vm, expOrFn, cb, options);\r\n      if (options.immediate) {\r\n        try {\r\n          cb.call(vm, watcher.value);\r\n        } catch (error) {\r\n          handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\r\n        }\r\n      }\r\n      return function unwatchFn () {\r\n        watcher.teardown();\r\n      }\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  var uid$3 = 0;\r\n\r\n  function initMixin (Vue) {\r\n    Vue.prototype._init = function (options) {\r\n      var vm = this;\r\n      // a uid\r\n      vm._uid = uid$3++;\r\n\r\n      var startTag, endTag;\r\n      /* istanbul ignore if */\r\n      if (config.performance && mark) {\r\n        startTag = \"vue-perf-start:\" + (vm._uid);\r\n        endTag = \"vue-perf-end:\" + (vm._uid);\r\n        mark(startTag);\r\n      }\r\n\r\n      // a flag to avoid this being observed\r\n      vm._isVue = true;\r\n      // merge options\r\n      if (options && options._isComponent) {\r\n        // optimize internal component instantiation\r\n        // since dynamic options merging is pretty slow, and none of the\r\n        // internal component options needs special treatment.\r\n        initInternalComponent(vm, options);\r\n      } else {\r\n        vm.$options = mergeOptions(\r\n          resolveConstructorOptions(vm.constructor),\r\n          options || {},\r\n          vm\r\n        );\r\n      }\r\n      /* istanbul ignore else */\r\n      {\r\n        initProxy(vm);\r\n      }\r\n      // expose real self\r\n      vm._self = vm;\r\n      initLifecycle(vm);\r\n      initEvents(vm);\r\n      initRender(vm);\r\n      callHook(vm, 'beforeCreate');\r\n      initInjections(vm); // resolve injections before data/props\r\n      initState(vm);\r\n      initProvide(vm); // resolve provide after data/props\r\n      callHook(vm, 'created');\r\n\r\n      /* istanbul ignore if */\r\n      if (config.performance && mark) {\r\n        vm._name = formatComponentName(vm, false);\r\n        mark(endTag);\r\n        measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\r\n      }\r\n\r\n      if (vm.$options.el) {\r\n        vm.$mount(vm.$options.el);\r\n      }\r\n    };\r\n  }\r\n\r\n  function initInternalComponent (vm, options) {\r\n    var opts = vm.$options = Object.create(vm.constructor.options);\r\n    // doing this because it's faster than dynamic enumeration.\r\n    var parentVnode = options._parentVnode;\r\n    opts.parent = options.parent;\r\n    opts._parentVnode = parentVnode;\r\n\r\n    var vnodeComponentOptions = parentVnode.componentOptions;\r\n    opts.propsData = vnodeComponentOptions.propsData;\r\n    opts._parentListeners = vnodeComponentOptions.listeners;\r\n    opts._renderChildren = vnodeComponentOptions.children;\r\n    opts._componentTag = vnodeComponentOptions.tag;\r\n\r\n    if (options.render) {\r\n      opts.render = options.render;\r\n      opts.staticRenderFns = options.staticRenderFns;\r\n    }\r\n  }\r\n\r\n  function resolveConstructorOptions (Ctor) {\r\n    var options = Ctor.options;\r\n    if (Ctor.super) {\r\n      var superOptions = resolveConstructorOptions(Ctor.super);\r\n      var cachedSuperOptions = Ctor.superOptions;\r\n      if (superOptions !== cachedSuperOptions) {\r\n        // super option changed,\r\n        // need to resolve new options.\r\n        Ctor.superOptions = superOptions;\r\n        // check if there are any late-modified/attached options (#4976)\r\n        var modifiedOptions = resolveModifiedOptions(Ctor);\r\n        // update base extend options\r\n        if (modifiedOptions) {\r\n          extend(Ctor.extendOptions, modifiedOptions);\r\n        }\r\n        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\r\n        if (options.name) {\r\n          options.components[options.name] = Ctor;\r\n        }\r\n      }\r\n    }\r\n    return options\r\n  }\r\n\r\n  function resolveModifiedOptions (Ctor) {\r\n    var modified;\r\n    var latest = Ctor.options;\r\n    var sealed = Ctor.sealedOptions;\r\n    for (var key in latest) {\r\n      if (latest[key] !== sealed[key]) {\r\n        if (!modified) { modified = {}; }\r\n        modified[key] = latest[key];\r\n      }\r\n    }\r\n    return modified\r\n  }\r\n\r\n  function Vue (options) {\r\n    if (!(this instanceof Vue)\r\n    ) {\r\n      warn('Vue is a constructor and should be called with the `new` keyword');\r\n    }\r\n    this._init(options);\r\n  }\r\n\r\n  initMixin(Vue);\r\n  stateMixin(Vue);\r\n  eventsMixin(Vue);\r\n  lifecycleMixin(Vue);\r\n  renderMixin(Vue);\r\n\r\n  /*  */\r\n\r\n  function initUse (Vue) {\r\n    Vue.use = function (plugin) {\r\n      var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\r\n      if (installedPlugins.indexOf(plugin) > -1) {\r\n        return this\r\n      }\r\n\r\n      // additional parameters\r\n      var args = toArray(arguments, 1);\r\n      args.unshift(this);\r\n      if (typeof plugin.install === 'function') {\r\n        plugin.install.apply(plugin, args);\r\n      } else if (typeof plugin === 'function') {\r\n        plugin.apply(null, args);\r\n      }\r\n      installedPlugins.push(plugin);\r\n      return this\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  function initMixin$1 (Vue) {\r\n    Vue.mixin = function (mixin) {\r\n      this.options = mergeOptions(this.options, mixin);\r\n      return this\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  function initExtend (Vue) {\r\n    /**\r\n     * Each instance constructor, including Vue, has a unique\r\n     * cid. This enables us to create wrapped \"child\r\n     * constructors\" for prototypal inheritance and cache them.\r\n     */\r\n    Vue.cid = 0;\r\n    var cid = 1;\r\n\r\n    /**\r\n     * Class inheritance\r\n     */\r\n    Vue.extend = function (extendOptions) {\r\n      extendOptions = extendOptions || {};\r\n      var Super = this;\r\n      var SuperId = Super.cid;\r\n      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\r\n      if (cachedCtors[SuperId]) {\r\n        return cachedCtors[SuperId]\r\n      }\r\n\r\n      var name = extendOptions.name || Super.options.name;\r\n      if (name) {\r\n        validateComponentName(name);\r\n      }\r\n\r\n      var Sub = function VueComponent (options) {\r\n        this._init(options);\r\n      };\r\n      Sub.prototype = Object.create(Super.prototype);\r\n      Sub.prototype.constructor = Sub;\r\n      Sub.cid = cid++;\r\n      Sub.options = mergeOptions(\r\n        Super.options,\r\n        extendOptions\r\n      );\r\n      Sub['super'] = Super;\r\n\r\n      // For props and computed properties, we define the proxy getters on\r\n      // the Vue instances at extension time, on the extended prototype. This\r\n      // avoids Object.defineProperty calls for each instance created.\r\n      if (Sub.options.props) {\r\n        initProps$1(Sub);\r\n      }\r\n      if (Sub.options.computed) {\r\n        initComputed$1(Sub);\r\n      }\r\n\r\n      // allow further extension/mixin/plugin usage\r\n      Sub.extend = Super.extend;\r\n      Sub.mixin = Super.mixin;\r\n      Sub.use = Super.use;\r\n\r\n      // create asset registers, so extended classes\r\n      // can have their private assets too.\r\n      ASSET_TYPES.forEach(function (type) {\r\n        Sub[type] = Super[type];\r\n      });\r\n      // enable recursive self-lookup\r\n      if (name) {\r\n        Sub.options.components[name] = Sub;\r\n      }\r\n\r\n      // keep a reference to the super options at extension time.\r\n      // later at instantiation we can check if Super's options have\r\n      // been updated.\r\n      Sub.superOptions = Super.options;\r\n      Sub.extendOptions = extendOptions;\r\n      Sub.sealedOptions = extend({}, Sub.options);\r\n\r\n      // cache constructor\r\n      cachedCtors[SuperId] = Sub;\r\n      return Sub\r\n    };\r\n  }\r\n\r\n  function initProps$1 (Comp) {\r\n    var props = Comp.options.props;\r\n    for (var key in props) {\r\n      proxy(Comp.prototype, \"_props\", key);\r\n    }\r\n  }\r\n\r\n  function initComputed$1 (Comp) {\r\n    var computed = Comp.options.computed;\r\n    for (var key in computed) {\r\n      defineComputed(Comp.prototype, key, computed[key]);\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function initAssetRegisters (Vue) {\r\n    /**\r\n     * Create asset registration methods.\r\n     */\r\n    ASSET_TYPES.forEach(function (type) {\r\n      Vue[type] = function (\r\n        id,\r\n        definition\r\n      ) {\r\n        if (!definition) {\r\n          return this.options[type + 's'][id]\r\n        } else {\r\n          /* istanbul ignore if */\r\n          if (type === 'component') {\r\n            validateComponentName(id);\r\n          }\r\n          if (type === 'component' && isPlainObject(definition)) {\r\n            definition.name = definition.name || id;\r\n            definition = this.options._base.extend(definition);\r\n          }\r\n          if (type === 'directive' && typeof definition === 'function') {\r\n            definition = { bind: definition, update: definition };\r\n          }\r\n          this.options[type + 's'][id] = definition;\r\n          return definition\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  function getComponentName (opts) {\r\n    return opts && (opts.Ctor.options.name || opts.tag)\r\n  }\r\n\r\n  function matches (pattern, name) {\r\n    if (Array.isArray(pattern)) {\r\n      return pattern.indexOf(name) > -1\r\n    } else if (typeof pattern === 'string') {\r\n      return pattern.split(',').indexOf(name) > -1\r\n    } else if (isRegExp(pattern)) {\r\n      return pattern.test(name)\r\n    }\r\n    /* istanbul ignore next */\r\n    return false\r\n  }\r\n\r\n  function pruneCache (keepAliveInstance, filter) {\r\n    var cache = keepAliveInstance.cache;\r\n    var keys = keepAliveInstance.keys;\r\n    var _vnode = keepAliveInstance._vnode;\r\n    for (var key in cache) {\r\n      var cachedNode = cache[key];\r\n      if (cachedNode) {\r\n        var name = getComponentName(cachedNode.componentOptions);\r\n        if (name && !filter(name)) {\r\n          pruneCacheEntry(cache, key, keys, _vnode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function pruneCacheEntry (\r\n    cache,\r\n    key,\r\n    keys,\r\n    current\r\n  ) {\r\n    var cached$$1 = cache[key];\r\n    if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\r\n      cached$$1.componentInstance.$destroy();\r\n    }\r\n    cache[key] = null;\r\n    remove(keys, key);\r\n  }\r\n\r\n  var patternTypes = [String, RegExp, Array];\r\n\r\n  var KeepAlive = {\r\n    name: 'keep-alive',\r\n    abstract: true,\r\n\r\n    props: {\r\n      include: patternTypes,\r\n      exclude: patternTypes,\r\n      max: [String, Number]\r\n    },\r\n\r\n    created: function created () {\r\n      this.cache = Object.create(null);\r\n      this.keys = [];\r\n    },\r\n\r\n    destroyed: function destroyed () {\r\n      for (var key in this.cache) {\r\n        pruneCacheEntry(this.cache, key, this.keys);\r\n      }\r\n    },\r\n\r\n    mounted: function mounted () {\r\n      var this$1 = this;\r\n\r\n      this.$watch('include', function (val) {\r\n        pruneCache(this$1, function (name) { return matches(val, name); });\r\n      });\r\n      this.$watch('exclude', function (val) {\r\n        pruneCache(this$1, function (name) { return !matches(val, name); });\r\n      });\r\n    },\r\n\r\n    render: function render () {\r\n      var slot = this.$slots.default;\r\n      var vnode = getFirstComponentChild(slot);\r\n      var componentOptions = vnode && vnode.componentOptions;\r\n      if (componentOptions) {\r\n        // check pattern\r\n        var name = getComponentName(componentOptions);\r\n        var ref = this;\r\n        var include = ref.include;\r\n        var exclude = ref.exclude;\r\n        if (\r\n          // not included\r\n          (include && (!name || !matches(include, name))) ||\r\n          // excluded\r\n          (exclude && name && matches(exclude, name))\r\n        ) {\r\n          return vnode\r\n        }\r\n\r\n        var ref$1 = this;\r\n        var cache = ref$1.cache;\r\n        var keys = ref$1.keys;\r\n        var key = vnode.key == null\r\n          // same constructor may get registered as different local components\r\n          // so cid alone is not enough (#3269)\r\n          ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\r\n          : vnode.key;\r\n        if (cache[key]) {\r\n          vnode.componentInstance = cache[key].componentInstance;\r\n          // make current key freshest\r\n          remove(keys, key);\r\n          keys.push(key);\r\n        } else {\r\n          cache[key] = vnode;\r\n          keys.push(key);\r\n          // prune oldest entry\r\n          if (this.max && keys.length > parseInt(this.max)) {\r\n            pruneCacheEntry(cache, keys[0], keys, this._vnode);\r\n          }\r\n        }\r\n\r\n        vnode.data.keepAlive = true;\r\n      }\r\n      return vnode || (slot && slot[0])\r\n    }\r\n  };\r\n\r\n  var builtInComponents = {\r\n    KeepAlive: KeepAlive\r\n  };\r\n\r\n  /*  */\r\n\r\n  function initGlobalAPI (Vue) {\r\n    // config\r\n    var configDef = {};\r\n    configDef.get = function () { return config; };\r\n    {\r\n      configDef.set = function () {\r\n        warn(\r\n          'Do not replace the Vue.config object, set individual fields instead.'\r\n        );\r\n      };\r\n    }\r\n    Object.defineProperty(Vue, 'config', configDef);\r\n\r\n    // exposed util methods.\r\n    // NOTE: these are not considered part of the public API - avoid relying on\r\n    // them unless you are aware of the risk.\r\n    Vue.util = {\r\n      warn: warn,\r\n      extend: extend,\r\n      mergeOptions: mergeOptions,\r\n      defineReactive: defineReactive$$1\r\n    };\r\n\r\n    Vue.set = set;\r\n    Vue.delete = del;\r\n    Vue.nextTick = nextTick;\r\n\r\n    // 2.6 explicit observable API\r\n    Vue.observable = function (obj) {\r\n      observe(obj);\r\n      return obj\r\n    };\r\n\r\n    Vue.options = Object.create(null);\r\n    ASSET_TYPES.forEach(function (type) {\r\n      Vue.options[type + 's'] = Object.create(null);\r\n    });\r\n\r\n    // this is used to identify the \"base\" constructor to extend all plain-object\r\n    // components with in Weex's multi-instance scenarios.\r\n    Vue.options._base = Vue;\r\n\r\n    extend(Vue.options.components, builtInComponents);\r\n\r\n    initUse(Vue);\r\n    initMixin$1(Vue);\r\n    initExtend(Vue);\r\n    initAssetRegisters(Vue);\r\n  }\r\n\r\n  initGlobalAPI(Vue);\r\n\r\n  Object.defineProperty(Vue.prototype, '$isServer', {\r\n    get: isServerRendering\r\n  });\r\n\r\n  Object.defineProperty(Vue.prototype, '$ssrContext', {\r\n    get: function get () {\r\n      /* istanbul ignore next */\r\n      return this.$vnode && this.$vnode.ssrContext\r\n    }\r\n  });\r\n\r\n  // expose FunctionalRenderContext for ssr runtime helper installation\r\n  Object.defineProperty(Vue, 'FunctionalRenderContext', {\r\n    value: FunctionalRenderContext\r\n  });\r\n\r\n  Vue.version = '2.6.12';\r\n\r\n  /*  */\r\n\r\n  // these are reserved for web because they are directly compiled away\r\n  // during template compilation\r\n  var isReservedAttr = makeMap('style,class');\r\n\r\n  // attributes that should be using props for binding\r\n  var acceptValue = makeMap('input,textarea,option,select,progress');\r\n  var mustUseProp = function (tag, type, attr) {\r\n    return (\r\n      (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\r\n      (attr === 'selected' && tag === 'option') ||\r\n      (attr === 'checked' && tag === 'input') ||\r\n      (attr === 'muted' && tag === 'video')\r\n    )\r\n  };\r\n\r\n  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\r\n\r\n  var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\r\n\r\n  var convertEnumeratedValue = function (key, value) {\r\n    return isFalsyAttrValue(value) || value === 'false'\r\n      ? 'false'\r\n      // allow arbitrary string value for contenteditable\r\n      : key === 'contenteditable' && isValidContentEditableValue(value)\r\n        ? value\r\n        : 'true'\r\n  };\r\n\r\n  var isBooleanAttr = makeMap(\r\n    'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\r\n    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\r\n    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\r\n    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\r\n    'required,reversed,scoped,seamless,selected,sortable,translate,' +\r\n    'truespeed,typemustmatch,visible'\r\n  );\r\n\r\n  var xlinkNS = 'http://www.w3.org/1999/xlink';\r\n\r\n  var isXlink = function (name) {\r\n    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\r\n  };\r\n\r\n  var getXlinkProp = function (name) {\r\n    return isXlink(name) ? name.slice(6, name.length) : ''\r\n  };\r\n\r\n  var isFalsyAttrValue = function (val) {\r\n    return val == null || val === false\r\n  };\r\n\r\n  /*  */\r\n\r\n  function genClassForVnode (vnode) {\r\n    var data = vnode.data;\r\n    var parentNode = vnode;\r\n    var childNode = vnode;\r\n    while (isDef(childNode.componentInstance)) {\r\n      childNode = childNode.componentInstance._vnode;\r\n      if (childNode && childNode.data) {\r\n        data = mergeClassData(childNode.data, data);\r\n      }\r\n    }\r\n    while (isDef(parentNode = parentNode.parent)) {\r\n      if (parentNode && parentNode.data) {\r\n        data = mergeClassData(data, parentNode.data);\r\n      }\r\n    }\r\n    return renderClass(data.staticClass, data.class)\r\n  }\r\n\r\n  function mergeClassData (child, parent) {\r\n    return {\r\n      staticClass: concat(child.staticClass, parent.staticClass),\r\n      class: isDef(child.class)\r\n        ? [child.class, parent.class]\r\n        : parent.class\r\n    }\r\n  }\r\n\r\n  function renderClass (\r\n    staticClass,\r\n    dynamicClass\r\n  ) {\r\n    if (isDef(staticClass) || isDef(dynamicClass)) {\r\n      return concat(staticClass, stringifyClass(dynamicClass))\r\n    }\r\n    /* istanbul ignore next */\r\n    return ''\r\n  }\r\n\r\n  function concat (a, b) {\r\n    return a ? b ? (a + ' ' + b) : a : (b || '')\r\n  }\r\n\r\n  function stringifyClass (value) {\r\n    if (Array.isArray(value)) {\r\n      return stringifyArray(value)\r\n    }\r\n    if (isObject(value)) {\r\n      return stringifyObject(value)\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value\r\n    }\r\n    /* istanbul ignore next */\r\n    return ''\r\n  }\r\n\r\n  function stringifyArray (value) {\r\n    var res = '';\r\n    var stringified;\r\n    for (var i = 0, l = value.length; i < l; i++) {\r\n      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\r\n        if (res) { res += ' '; }\r\n        res += stringified;\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  function stringifyObject (value) {\r\n    var res = '';\r\n    for (var key in value) {\r\n      if (value[key]) {\r\n        if (res) { res += ' '; }\r\n        res += key;\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*  */\r\n\r\n  var namespaceMap = {\r\n    svg: 'http://www.w3.org/2000/svg',\r\n    math: 'http://www.w3.org/1998/Math/MathML'\r\n  };\r\n\r\n  var isHTMLTag = makeMap(\r\n    'html,body,base,head,link,meta,style,title,' +\r\n    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\r\n    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\r\n    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\r\n    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\r\n    'embed,object,param,source,canvas,script,noscript,del,ins,' +\r\n    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\r\n    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\r\n    'output,progress,select,textarea,' +\r\n    'details,dialog,menu,menuitem,summary,' +\r\n    'content,element,shadow,template,blockquote,iframe,tfoot'\r\n  );\r\n\r\n  // this map is intentionally selective, only covering SVG elements that may\r\n  // contain child elements.\r\n  var isSVG = makeMap(\r\n    'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\r\n    'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\r\n    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\r\n    true\r\n  );\r\n\r\n  var isPreTag = function (tag) { return tag === 'pre'; };\r\n\r\n  var isReservedTag = function (tag) {\r\n    return isHTMLTag(tag) || isSVG(tag)\r\n  };\r\n\r\n  function getTagNamespace (tag) {\r\n    if (isSVG(tag)) {\r\n      return 'svg'\r\n    }\r\n    // basic support for MathML\r\n    // note it doesn't support other MathML elements being component roots\r\n    if (tag === 'math') {\r\n      return 'math'\r\n    }\r\n  }\r\n\r\n  var unknownElementCache = Object.create(null);\r\n  function isUnknownElement (tag) {\r\n    /* istanbul ignore if */\r\n    if (!inBrowser) {\r\n      return true\r\n    }\r\n    if (isReservedTag(tag)) {\r\n      return false\r\n    }\r\n    tag = tag.toLowerCase();\r\n    /* istanbul ignore if */\r\n    if (unknownElementCache[tag] != null) {\r\n      return unknownElementCache[tag]\r\n    }\r\n    var el = document.createElement(tag);\r\n    if (tag.indexOf('-') > -1) {\r\n      // http://stackoverflow.com/a/28210364/1070244\r\n      return (unknownElementCache[tag] = (\r\n        el.constructor === window.HTMLUnknownElement ||\r\n        el.constructor === window.HTMLElement\r\n      ))\r\n    } else {\r\n      return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\r\n    }\r\n  }\r\n\r\n  var isTextInputType = makeMap('text,number,password,search,email,tel,url');\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Query an element selector if it's not an element already.\r\n   */\r\n  function query (el) {\r\n    if (typeof el === 'string') {\r\n      var selected = document.querySelector(el);\r\n      if (!selected) {\r\n        warn(\r\n          'Cannot find element: ' + el\r\n        );\r\n        return document.createElement('div')\r\n      }\r\n      return selected\r\n    } else {\r\n      return el\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function createElement$1 (tagName, vnode) {\r\n    var elm = document.createElement(tagName);\r\n    if (tagName !== 'select') {\r\n      return elm\r\n    }\r\n    // false or null will remove the attribute but undefined will not\r\n    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\r\n      elm.setAttribute('multiple', 'multiple');\r\n    }\r\n    return elm\r\n  }\r\n\r\n  function createElementNS (namespace, tagName) {\r\n    return document.createElementNS(namespaceMap[namespace], tagName)\r\n  }\r\n\r\n  function createTextNode (text) {\r\n    return document.createTextNode(text)\r\n  }\r\n\r\n  function createComment (text) {\r\n    return document.createComment(text)\r\n  }\r\n\r\n  function insertBefore (parentNode, newNode, referenceNode) {\r\n    parentNode.insertBefore(newNode, referenceNode);\r\n  }\r\n\r\n  function removeChild (node, child) {\r\n    node.removeChild(child);\r\n  }\r\n\r\n  function appendChild (node, child) {\r\n    node.appendChild(child);\r\n  }\r\n\r\n  function parentNode (node) {\r\n    return node.parentNode\r\n  }\r\n\r\n  function nextSibling (node) {\r\n    return node.nextSibling\r\n  }\r\n\r\n  function tagName (node) {\r\n    return node.tagName\r\n  }\r\n\r\n  function setTextContent (node, text) {\r\n    node.textContent = text;\r\n  }\r\n\r\n  function setStyleScope (node, scopeId) {\r\n    node.setAttribute(scopeId, '');\r\n  }\r\n\r\n  var nodeOps = /*#__PURE__*/Object.freeze({\r\n    createElement: createElement$1,\r\n    createElementNS: createElementNS,\r\n    createTextNode: createTextNode,\r\n    createComment: createComment,\r\n    insertBefore: insertBefore,\r\n    removeChild: removeChild,\r\n    appendChild: appendChild,\r\n    parentNode: parentNode,\r\n    nextSibling: nextSibling,\r\n    tagName: tagName,\r\n    setTextContent: setTextContent,\r\n    setStyleScope: setStyleScope\r\n  });\r\n\r\n  /*  */\r\n\r\n  var ref = {\r\n    create: function create (_, vnode) {\r\n      registerRef(vnode);\r\n    },\r\n    update: function update (oldVnode, vnode) {\r\n      if (oldVnode.data.ref !== vnode.data.ref) {\r\n        registerRef(oldVnode, true);\r\n        registerRef(vnode);\r\n      }\r\n    },\r\n    destroy: function destroy (vnode) {\r\n      registerRef(vnode, true);\r\n    }\r\n  };\r\n\r\n  function registerRef (vnode, isRemoval) {\r\n    var key = vnode.data.ref;\r\n    if (!isDef(key)) { return }\r\n\r\n    var vm = vnode.context;\r\n    var ref = vnode.componentInstance || vnode.elm;\r\n    var refs = vm.$refs;\r\n    if (isRemoval) {\r\n      if (Array.isArray(refs[key])) {\r\n        remove(refs[key], ref);\r\n      } else if (refs[key] === ref) {\r\n        refs[key] = undefined;\r\n      }\r\n    } else {\r\n      if (vnode.data.refInFor) {\r\n        if (!Array.isArray(refs[key])) {\r\n          refs[key] = [ref];\r\n        } else if (refs[key].indexOf(ref) < 0) {\r\n          // $flow-disable-line\r\n          refs[key].push(ref);\r\n        }\r\n      } else {\r\n        refs[key] = ref;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Virtual DOM patching algorithm based on Snabbdom by\r\n   * Simon Friis Vindum (@paldepind)\r\n   * Licensed under the MIT License\r\n   * https://github.com/paldepind/snabbdom/blob/master/LICENSE\r\n   *\r\n   * modified by Evan You (@yyx990803)\r\n   *\r\n   * Not type-checking this because this file is perf-critical and the cost\r\n   * of making flow understand it is not worth it.\r\n   */\r\n\r\n  var emptyNode = new VNode('', {}, []);\r\n\r\n  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\r\n\r\n  function sameVnode (a, b) {\r\n    return (\r\n      a.key === b.key && (\r\n        (\r\n          a.tag === b.tag &&\r\n          a.isComment === b.isComment &&\r\n          isDef(a.data) === isDef(b.data) &&\r\n          sameInputType(a, b)\r\n        ) || (\r\n          isTrue(a.isAsyncPlaceholder) &&\r\n          a.asyncFactory === b.asyncFactory &&\r\n          isUndef(b.asyncFactory.error)\r\n        )\r\n      )\r\n    )\r\n  }\r\n\r\n  function sameInputType (a, b) {\r\n    if (a.tag !== 'input') { return true }\r\n    var i;\r\n    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\r\n    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\r\n    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\r\n  }\r\n\r\n  function createKeyToOldIdx (children, beginIdx, endIdx) {\r\n    var i, key;\r\n    var map = {};\r\n    for (i = beginIdx; i <= endIdx; ++i) {\r\n      key = children[i].key;\r\n      if (isDef(key)) { map[key] = i; }\r\n    }\r\n    return map\r\n  }\r\n\r\n  function createPatchFunction (backend) {\r\n    var i, j;\r\n    var cbs = {};\r\n\r\n    var modules = backend.modules;\r\n    var nodeOps = backend.nodeOps;\r\n\r\n    for (i = 0; i < hooks.length; ++i) {\r\n      cbs[hooks[i]] = [];\r\n      for (j = 0; j < modules.length; ++j) {\r\n        if (isDef(modules[j][hooks[i]])) {\r\n          cbs[hooks[i]].push(modules[j][hooks[i]]);\r\n        }\r\n      }\r\n    }\r\n\r\n    function emptyNodeAt (elm) {\r\n      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\r\n    }\r\n\r\n    function createRmCb (childElm, listeners) {\r\n      function remove$$1 () {\r\n        if (--remove$$1.listeners === 0) {\r\n          removeNode(childElm);\r\n        }\r\n      }\r\n      remove$$1.listeners = listeners;\r\n      return remove$$1\r\n    }\r\n\r\n    function removeNode (el) {\r\n      var parent = nodeOps.parentNode(el);\r\n      // element may have already been removed due to v-html / v-text\r\n      if (isDef(parent)) {\r\n        nodeOps.removeChild(parent, el);\r\n      }\r\n    }\r\n\r\n    function isUnknownElement$$1 (vnode, inVPre) {\r\n      return (\r\n        !inVPre &&\r\n        !vnode.ns &&\r\n        !(\r\n          config.ignoredElements.length &&\r\n          config.ignoredElements.some(function (ignore) {\r\n            return isRegExp(ignore)\r\n              ? ignore.test(vnode.tag)\r\n              : ignore === vnode.tag\r\n          })\r\n        ) &&\r\n        config.isUnknownElement(vnode.tag)\r\n      )\r\n    }\r\n\r\n    var creatingElmInVPre = 0;\r\n\r\n    function createElm (\r\n      vnode,\r\n      insertedVnodeQueue,\r\n      parentElm,\r\n      refElm,\r\n      nested,\r\n      ownerArray,\r\n      index\r\n    ) {\r\n      if (isDef(vnode.elm) && isDef(ownerArray)) {\r\n        // This vnode was used in a previous render!\r\n        // now it's used as a new node, overwriting its elm would cause\r\n        // potential patch errors down the road when it's used as an insertion\r\n        // reference node. Instead, we clone the node on-demand before creating\r\n        // associated DOM element for it.\r\n        vnode = ownerArray[index] = cloneVNode(vnode);\r\n      }\r\n\r\n      vnode.isRootInsert = !nested; // for transition enter check\r\n      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\r\n        return\r\n      }\r\n\r\n      var data = vnode.data;\r\n      var children = vnode.children;\r\n      var tag = vnode.tag;\r\n      if (isDef(tag)) {\r\n        {\r\n          if (data && data.pre) {\r\n            creatingElmInVPre++;\r\n          }\r\n          if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\r\n            warn(\r\n              'Unknown custom element: <' + tag + '> - did you ' +\r\n              'register the component correctly? For recursive components, ' +\r\n              'make sure to provide the \"name\" option.',\r\n              vnode.context\r\n            );\r\n          }\r\n        }\r\n\r\n        vnode.elm = vnode.ns\r\n          ? nodeOps.createElementNS(vnode.ns, tag)\r\n          : nodeOps.createElement(tag, vnode);\r\n        setScope(vnode);\r\n\r\n        /* istanbul ignore if */\r\n        {\r\n          createChildren(vnode, children, insertedVnodeQueue);\r\n          if (isDef(data)) {\r\n            invokeCreateHooks(vnode, insertedVnodeQueue);\r\n          }\r\n          insert(parentElm, vnode.elm, refElm);\r\n        }\r\n\r\n        if (data && data.pre) {\r\n          creatingElmInVPre--;\r\n        }\r\n      } else if (isTrue(vnode.isComment)) {\r\n        vnode.elm = nodeOps.createComment(vnode.text);\r\n        insert(parentElm, vnode.elm, refElm);\r\n      } else {\r\n        vnode.elm = nodeOps.createTextNode(vnode.text);\r\n        insert(parentElm, vnode.elm, refElm);\r\n      }\r\n    }\r\n\r\n    function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\r\n      var i = vnode.data;\r\n      if (isDef(i)) {\r\n        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\r\n        if (isDef(i = i.hook) && isDef(i = i.init)) {\r\n          i(vnode, false /* hydrating */);\r\n        }\r\n        // after calling the init hook, if the vnode is a child component\r\n        // it should've created a child instance and mounted it. the child\r\n        // component also has set the placeholder vnode's elm.\r\n        // in that case we can just return the element and be done.\r\n        if (isDef(vnode.componentInstance)) {\r\n          initComponent(vnode, insertedVnodeQueue);\r\n          insert(parentElm, vnode.elm, refElm);\r\n          if (isTrue(isReactivated)) {\r\n            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\r\n          }\r\n          return true\r\n        }\r\n      }\r\n    }\r\n\r\n    function initComponent (vnode, insertedVnodeQueue) {\r\n      if (isDef(vnode.data.pendingInsert)) {\r\n        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\r\n        vnode.data.pendingInsert = null;\r\n      }\r\n      vnode.elm = vnode.componentInstance.$el;\r\n      if (isPatchable(vnode)) {\r\n        invokeCreateHooks(vnode, insertedVnodeQueue);\r\n        setScope(vnode);\r\n      } else {\r\n        // empty component root.\r\n        // skip all element-related modules except for ref (#3455)\r\n        registerRef(vnode);\r\n        // make sure to invoke the insert hook\r\n        insertedVnodeQueue.push(vnode);\r\n      }\r\n    }\r\n\r\n    function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\r\n      var i;\r\n      // hack for #4339: a reactivated component with inner transition\r\n      // does not trigger because the inner node's created hooks are not called\r\n      // again. It's not ideal to involve module-specific logic in here but\r\n      // there doesn't seem to be a better way to do it.\r\n      var innerNode = vnode;\r\n      while (innerNode.componentInstance) {\r\n        innerNode = innerNode.componentInstance._vnode;\r\n        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\r\n          for (i = 0; i < cbs.activate.length; ++i) {\r\n            cbs.activate[i](emptyNode, innerNode);\r\n          }\r\n          insertedVnodeQueue.push(innerNode);\r\n          break\r\n        }\r\n      }\r\n      // unlike a newly created component,\r\n      // a reactivated keep-alive component doesn't insert itself\r\n      insert(parentElm, vnode.elm, refElm);\r\n    }\r\n\r\n    function insert (parent, elm, ref$$1) {\r\n      if (isDef(parent)) {\r\n        if (isDef(ref$$1)) {\r\n          if (nodeOps.parentNode(ref$$1) === parent) {\r\n            nodeOps.insertBefore(parent, elm, ref$$1);\r\n          }\r\n        } else {\r\n          nodeOps.appendChild(parent, elm);\r\n        }\r\n      }\r\n    }\r\n\r\n    function createChildren (vnode, children, insertedVnodeQueue) {\r\n      if (Array.isArray(children)) {\r\n        {\r\n          checkDuplicateKeys(children);\r\n        }\r\n        for (var i = 0; i < children.length; ++i) {\r\n          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\r\n        }\r\n      } else if (isPrimitive(vnode.text)) {\r\n        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\r\n      }\r\n    }\r\n\r\n    function isPatchable (vnode) {\r\n      while (vnode.componentInstance) {\r\n        vnode = vnode.componentInstance._vnode;\r\n      }\r\n      return isDef(vnode.tag)\r\n    }\r\n\r\n    function invokeCreateHooks (vnode, insertedVnodeQueue) {\r\n      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\r\n        cbs.create[i$1](emptyNode, vnode);\r\n      }\r\n      i = vnode.data.hook; // Reuse variable\r\n      if (isDef(i)) {\r\n        if (isDef(i.create)) { i.create(emptyNode, vnode); }\r\n        if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\r\n      }\r\n    }\r\n\r\n    // set scope id attribute for scoped CSS.\r\n    // this is implemented as a special case to avoid the overhead\r\n    // of going through the normal attribute patching process.\r\n    function setScope (vnode) {\r\n      var i;\r\n      if (isDef(i = vnode.fnScopeId)) {\r\n        nodeOps.setStyleScope(vnode.elm, i);\r\n      } else {\r\n        var ancestor = vnode;\r\n        while (ancestor) {\r\n          if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\r\n            nodeOps.setStyleScope(vnode.elm, i);\r\n          }\r\n          ancestor = ancestor.parent;\r\n        }\r\n      }\r\n      // for slot content they should also get the scopeId from the host instance.\r\n      if (isDef(i = activeInstance) &&\r\n        i !== vnode.context &&\r\n        i !== vnode.fnContext &&\r\n        isDef(i = i.$options._scopeId)\r\n      ) {\r\n        nodeOps.setStyleScope(vnode.elm, i);\r\n      }\r\n    }\r\n\r\n    function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\r\n      for (; startIdx <= endIdx; ++startIdx) {\r\n        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\r\n      }\r\n    }\r\n\r\n    function invokeDestroyHook (vnode) {\r\n      var i, j;\r\n      var data = vnode.data;\r\n      if (isDef(data)) {\r\n        if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\r\n        for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\r\n      }\r\n      if (isDef(i = vnode.children)) {\r\n        for (j = 0; j < vnode.children.length; ++j) {\r\n          invokeDestroyHook(vnode.children[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    function removeVnodes (vnodes, startIdx, endIdx) {\r\n      for (; startIdx <= endIdx; ++startIdx) {\r\n        var ch = vnodes[startIdx];\r\n        if (isDef(ch)) {\r\n          if (isDef(ch.tag)) {\r\n            removeAndInvokeRemoveHook(ch);\r\n            invokeDestroyHook(ch);\r\n          } else { // Text node\r\n            removeNode(ch.elm);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function removeAndInvokeRemoveHook (vnode, rm) {\r\n      if (isDef(rm) || isDef(vnode.data)) {\r\n        var i;\r\n        var listeners = cbs.remove.length + 1;\r\n        if (isDef(rm)) {\r\n          // we have a recursively passed down rm callback\r\n          // increase the listeners count\r\n          rm.listeners += listeners;\r\n        } else {\r\n          // directly removing\r\n          rm = createRmCb(vnode.elm, listeners);\r\n        }\r\n        // recursively invoke hooks on child component root node\r\n        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\r\n          removeAndInvokeRemoveHook(i, rm);\r\n        }\r\n        for (i = 0; i < cbs.remove.length; ++i) {\r\n          cbs.remove[i](vnode, rm);\r\n        }\r\n        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\r\n          i(vnode, rm);\r\n        } else {\r\n          rm();\r\n        }\r\n      } else {\r\n        removeNode(vnode.elm);\r\n      }\r\n    }\r\n\r\n    function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\r\n      var oldStartIdx = 0;\r\n      var newStartIdx = 0;\r\n      var oldEndIdx = oldCh.length - 1;\r\n      var oldStartVnode = oldCh[0];\r\n      var oldEndVnode = oldCh[oldEndIdx];\r\n      var newEndIdx = newCh.length - 1;\r\n      var newStartVnode = newCh[0];\r\n      var newEndVnode = newCh[newEndIdx];\r\n      var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\r\n\r\n      // removeOnly is a special flag used only by <transition-group>\r\n      // to ensure removed elements stay in correct relative positions\r\n      // during leaving transitions\r\n      var canMove = !removeOnly;\r\n\r\n      {\r\n        checkDuplicateKeys(newCh);\r\n      }\r\n\r\n      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\r\n        if (isUndef(oldStartVnode)) {\r\n          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\r\n        } else if (isUndef(oldEndVnode)) {\r\n          oldEndVnode = oldCh[--oldEndIdx];\r\n        } else if (sameVnode(oldStartVnode, newStartVnode)) {\r\n          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\r\n          oldStartVnode = oldCh[++oldStartIdx];\r\n          newStartVnode = newCh[++newStartIdx];\r\n        } else if (sameVnode(oldEndVnode, newEndVnode)) {\r\n          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\r\n          oldEndVnode = oldCh[--oldEndIdx];\r\n          newEndVnode = newCh[--newEndIdx];\r\n        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\r\n          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\r\n          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\r\n          oldStartVnode = oldCh[++oldStartIdx];\r\n          newEndVnode = newCh[--newEndIdx];\r\n        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\r\n          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\r\n          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\r\n          oldEndVnode = oldCh[--oldEndIdx];\r\n          newStartVnode = newCh[++newStartIdx];\r\n        } else {\r\n          if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\r\n          idxInOld = isDef(newStartVnode.key)\r\n            ? oldKeyToIdx[newStartVnode.key]\r\n            : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\r\n          if (isUndef(idxInOld)) { // New element\r\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\r\n          } else {\r\n            vnodeToMove = oldCh[idxInOld];\r\n            if (sameVnode(vnodeToMove, newStartVnode)) {\r\n              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\r\n              oldCh[idxInOld] = undefined;\r\n              canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\r\n            } else {\r\n              // same key but different element. treat as new element\r\n              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\r\n            }\r\n          }\r\n          newStartVnode = newCh[++newStartIdx];\r\n        }\r\n      }\r\n      if (oldStartIdx > oldEndIdx) {\r\n        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\r\n        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\r\n      } else if (newStartIdx > newEndIdx) {\r\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\r\n      }\r\n    }\r\n\r\n    function checkDuplicateKeys (children) {\r\n      var seenKeys = {};\r\n      for (var i = 0; i < children.length; i++) {\r\n        var vnode = children[i];\r\n        var key = vnode.key;\r\n        if (isDef(key)) {\r\n          if (seenKeys[key]) {\r\n            warn(\r\n              (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\r\n              vnode.context\r\n            );\r\n          } else {\r\n            seenKeys[key] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function findIdxInOld (node, oldCh, start, end) {\r\n      for (var i = start; i < end; i++) {\r\n        var c = oldCh[i];\r\n        if (isDef(c) && sameVnode(node, c)) { return i }\r\n      }\r\n    }\r\n\r\n    function patchVnode (\r\n      oldVnode,\r\n      vnode,\r\n      insertedVnodeQueue,\r\n      ownerArray,\r\n      index,\r\n      removeOnly\r\n    ) {\r\n      if (oldVnode === vnode) {\r\n        return\r\n      }\r\n\r\n      if (isDef(vnode.elm) && isDef(ownerArray)) {\r\n        // clone reused vnode\r\n        vnode = ownerArray[index] = cloneVNode(vnode);\r\n      }\r\n\r\n      var elm = vnode.elm = oldVnode.elm;\r\n\r\n      if (isTrue(oldVnode.isAsyncPlaceholder)) {\r\n        if (isDef(vnode.asyncFactory.resolved)) {\r\n          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\r\n        } else {\r\n          vnode.isAsyncPlaceholder = true;\r\n        }\r\n        return\r\n      }\r\n\r\n      // reuse element for static trees.\r\n      // note we only do this if the vnode is cloned -\r\n      // if the new node is not cloned it means the render functions have been\r\n      // reset by the hot-reload-api and we need to do a proper re-render.\r\n      if (isTrue(vnode.isStatic) &&\r\n        isTrue(oldVnode.isStatic) &&\r\n        vnode.key === oldVnode.key &&\r\n        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\r\n      ) {\r\n        vnode.componentInstance = oldVnode.componentInstance;\r\n        return\r\n      }\r\n\r\n      var i;\r\n      var data = vnode.data;\r\n      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\r\n        i(oldVnode, vnode);\r\n      }\r\n\r\n      var oldCh = oldVnode.children;\r\n      var ch = vnode.children;\r\n      if (isDef(data) && isPatchable(vnode)) {\r\n        for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\r\n        if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\r\n      }\r\n      if (isUndef(vnode.text)) {\r\n        if (isDef(oldCh) && isDef(ch)) {\r\n          if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\r\n        } else if (isDef(ch)) {\r\n          {\r\n            checkDuplicateKeys(ch);\r\n          }\r\n          if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\r\n          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\r\n        } else if (isDef(oldCh)) {\r\n          removeVnodes(oldCh, 0, oldCh.length - 1);\r\n        } else if (isDef(oldVnode.text)) {\r\n          nodeOps.setTextContent(elm, '');\r\n        }\r\n      } else if (oldVnode.text !== vnode.text) {\r\n        nodeOps.setTextContent(elm, vnode.text);\r\n      }\r\n      if (isDef(data)) {\r\n        if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\r\n      }\r\n    }\r\n\r\n    function invokeInsertHook (vnode, queue, initial) {\r\n      // delay insert hooks for component root nodes, invoke them after the\r\n      // element is really inserted\r\n      if (isTrue(initial) && isDef(vnode.parent)) {\r\n        vnode.parent.data.pendingInsert = queue;\r\n      } else {\r\n        for (var i = 0; i < queue.length; ++i) {\r\n          queue[i].data.hook.insert(queue[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    var hydrationBailed = false;\r\n    // list of modules that can skip create hook during hydration because they\r\n    // are already rendered on the client or has no need for initialization\r\n    // Note: style is excluded because it relies on initial clone for future\r\n    // deep updates (#7063).\r\n    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\r\n\r\n    // Note: this is a browser-only function so we can assume elms are DOM nodes.\r\n    function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\r\n      var i;\r\n      var tag = vnode.tag;\r\n      var data = vnode.data;\r\n      var children = vnode.children;\r\n      inVPre = inVPre || (data && data.pre);\r\n      vnode.elm = elm;\r\n\r\n      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\r\n        vnode.isAsyncPlaceholder = true;\r\n        return true\r\n      }\r\n      // assert node match\r\n      {\r\n        if (!assertNodeMatch(elm, vnode, inVPre)) {\r\n          return false\r\n        }\r\n      }\r\n      if (isDef(data)) {\r\n        if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\r\n        if (isDef(i = vnode.componentInstance)) {\r\n          // child component. it should have hydrated its own tree.\r\n          initComponent(vnode, insertedVnodeQueue);\r\n          return true\r\n        }\r\n      }\r\n      if (isDef(tag)) {\r\n        if (isDef(children)) {\r\n          // empty element, allow client to pick up and populate children\r\n          if (!elm.hasChildNodes()) {\r\n            createChildren(vnode, children, insertedVnodeQueue);\r\n          } else {\r\n            // v-html and domProps: innerHTML\r\n            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\r\n              if (i !== elm.innerHTML) {\r\n                /* istanbul ignore if */\r\n                if (typeof console !== 'undefined' &&\r\n                  !hydrationBailed\r\n                ) {\r\n                  hydrationBailed = true;\r\n                  console.warn('Parent: ', elm);\r\n                  console.warn('server innerHTML: ', i);\r\n                  console.warn('client innerHTML: ', elm.innerHTML);\r\n                }\r\n                return false\r\n              }\r\n            } else {\r\n              // iterate and compare children lists\r\n              var childrenMatch = true;\r\n              var childNode = elm.firstChild;\r\n              for (var i$1 = 0; i$1 < children.length; i$1++) {\r\n                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\r\n                  childrenMatch = false;\r\n                  break\r\n                }\r\n                childNode = childNode.nextSibling;\r\n              }\r\n              // if childNode is not null, it means the actual childNodes list is\r\n              // longer than the virtual children list.\r\n              if (!childrenMatch || childNode) {\r\n                /* istanbul ignore if */\r\n                if (typeof console !== 'undefined' &&\r\n                  !hydrationBailed\r\n                ) {\r\n                  hydrationBailed = true;\r\n                  console.warn('Parent: ', elm);\r\n                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\r\n                }\r\n                return false\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (isDef(data)) {\r\n          var fullInvoke = false;\r\n          for (var key in data) {\r\n            if (!isRenderedModule(key)) {\r\n              fullInvoke = true;\r\n              invokeCreateHooks(vnode, insertedVnodeQueue);\r\n              break\r\n            }\r\n          }\r\n          if (!fullInvoke && data['class']) {\r\n            // ensure collecting deps for deep class bindings for future updates\r\n            traverse(data['class']);\r\n          }\r\n        }\r\n      } else if (elm.data !== vnode.text) {\r\n        elm.data = vnode.text;\r\n      }\r\n      return true\r\n    }\r\n\r\n    function assertNodeMatch (node, vnode, inVPre) {\r\n      if (isDef(vnode.tag)) {\r\n        return vnode.tag.indexOf('vue-component') === 0 || (\r\n          !isUnknownElement$$1(vnode, inVPre) &&\r\n          vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\r\n        )\r\n      } else {\r\n        return node.nodeType === (vnode.isComment ? 8 : 3)\r\n      }\r\n    }\r\n\r\n    return function patch (oldVnode, vnode, hydrating, removeOnly) {\r\n      if (isUndef(vnode)) {\r\n        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\r\n        return\r\n      }\r\n\r\n      var isInitialPatch = false;\r\n      var insertedVnodeQueue = [];\r\n\r\n      if (isUndef(oldVnode)) {\r\n        // empty mount (likely as component), create new root element\r\n        isInitialPatch = true;\r\n        createElm(vnode, insertedVnodeQueue);\r\n      } else {\r\n        var isRealElement = isDef(oldVnode.nodeType);\r\n        if (!isRealElement && sameVnode(oldVnode, vnode)) {\r\n          // patch existing root node\r\n          patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\r\n        } else {\r\n          if (isRealElement) {\r\n            // mounting to a real element\r\n            // check if this is server-rendered content and if we can perform\r\n            // a successful hydration.\r\n            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\r\n              oldVnode.removeAttribute(SSR_ATTR);\r\n              hydrating = true;\r\n            }\r\n            if (isTrue(hydrating)) {\r\n              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\r\n                invokeInsertHook(vnode, insertedVnodeQueue, true);\r\n                return oldVnode\r\n              } else {\r\n                warn(\r\n                  'The client-side rendered virtual DOM tree is not matching ' +\r\n                  'server-rendered content. This is likely caused by incorrect ' +\r\n                  'HTML markup, for example nesting block-level elements inside ' +\r\n                  '<p>, or missing <tbody>. Bailing hydration and performing ' +\r\n                  'full client-side render.'\r\n                );\r\n              }\r\n            }\r\n            // either not server-rendered, or hydration failed.\r\n            // create an empty node and replace it\r\n            oldVnode = emptyNodeAt(oldVnode);\r\n          }\r\n\r\n          // replacing existing element\r\n          var oldElm = oldVnode.elm;\r\n          var parentElm = nodeOps.parentNode(oldElm);\r\n\r\n          // create new node\r\n          createElm(\r\n            vnode,\r\n            insertedVnodeQueue,\r\n            // extremely rare edge case: do not insert if old element is in a\r\n            // leaving transition. Only happens when combining transition +\r\n            // keep-alive + HOCs. (#4590)\r\n            oldElm._leaveCb ? null : parentElm,\r\n            nodeOps.nextSibling(oldElm)\r\n          );\r\n\r\n          // update parent placeholder node element, recursively\r\n          if (isDef(vnode.parent)) {\r\n            var ancestor = vnode.parent;\r\n            var patchable = isPatchable(vnode);\r\n            while (ancestor) {\r\n              for (var i = 0; i < cbs.destroy.length; ++i) {\r\n                cbs.destroy[i](ancestor);\r\n              }\r\n              ancestor.elm = vnode.elm;\r\n              if (patchable) {\r\n                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\r\n                  cbs.create[i$1](emptyNode, ancestor);\r\n                }\r\n                // #6513\r\n                // invoke insert hooks that may have been merged by create hooks.\r\n                // e.g. for directives that uses the \"inserted\" hook.\r\n                var insert = ancestor.data.hook.insert;\r\n                if (insert.merged) {\r\n                  // start at index 1 to avoid re-invoking component mounted hook\r\n                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\r\n                    insert.fns[i$2]();\r\n                  }\r\n                }\r\n              } else {\r\n                registerRef(ancestor);\r\n              }\r\n              ancestor = ancestor.parent;\r\n            }\r\n          }\r\n\r\n          // destroy old node\r\n          if (isDef(parentElm)) {\r\n            removeVnodes([oldVnode], 0, 0);\r\n          } else if (isDef(oldVnode.tag)) {\r\n            invokeDestroyHook(oldVnode);\r\n          }\r\n        }\r\n      }\r\n\r\n      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\r\n      return vnode.elm\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var directives = {\r\n    create: updateDirectives,\r\n    update: updateDirectives,\r\n    destroy: function unbindDirectives (vnode) {\r\n      updateDirectives(vnode, emptyNode);\r\n    }\r\n  };\r\n\r\n  function updateDirectives (oldVnode, vnode) {\r\n    if (oldVnode.data.directives || vnode.data.directives) {\r\n      _update(oldVnode, vnode);\r\n    }\r\n  }\r\n\r\n  function _update (oldVnode, vnode) {\r\n    var isCreate = oldVnode === emptyNode;\r\n    var isDestroy = vnode === emptyNode;\r\n    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\r\n    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\r\n\r\n    var dirsWithInsert = [];\r\n    var dirsWithPostpatch = [];\r\n\r\n    var key, oldDir, dir;\r\n    for (key in newDirs) {\r\n      oldDir = oldDirs[key];\r\n      dir = newDirs[key];\r\n      if (!oldDir) {\r\n        // new directive, bind\r\n        callHook$1(dir, 'bind', vnode, oldVnode);\r\n        if (dir.def && dir.def.inserted) {\r\n          dirsWithInsert.push(dir);\r\n        }\r\n      } else {\r\n        // existing directive, update\r\n        dir.oldValue = oldDir.value;\r\n        dir.oldArg = oldDir.arg;\r\n        callHook$1(dir, 'update', vnode, oldVnode);\r\n        if (dir.def && dir.def.componentUpdated) {\r\n          dirsWithPostpatch.push(dir);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (dirsWithInsert.length) {\r\n      var callInsert = function () {\r\n        for (var i = 0; i < dirsWithInsert.length; i++) {\r\n          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\r\n        }\r\n      };\r\n      if (isCreate) {\r\n        mergeVNodeHook(vnode, 'insert', callInsert);\r\n      } else {\r\n        callInsert();\r\n      }\r\n    }\r\n\r\n    if (dirsWithPostpatch.length) {\r\n      mergeVNodeHook(vnode, 'postpatch', function () {\r\n        for (var i = 0; i < dirsWithPostpatch.length; i++) {\r\n          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!isCreate) {\r\n      for (key in oldDirs) {\r\n        if (!newDirs[key]) {\r\n          // no longer present, unbind\r\n          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var emptyModifiers = Object.create(null);\r\n\r\n  function normalizeDirectives$1 (\r\n    dirs,\r\n    vm\r\n  ) {\r\n    var res = Object.create(null);\r\n    if (!dirs) {\r\n      // $flow-disable-line\r\n      return res\r\n    }\r\n    var i, dir;\r\n    for (i = 0; i < dirs.length; i++) {\r\n      dir = dirs[i];\r\n      if (!dir.modifiers) {\r\n        // $flow-disable-line\r\n        dir.modifiers = emptyModifiers;\r\n      }\r\n      res[getRawDirName(dir)] = dir;\r\n      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\r\n    }\r\n    // $flow-disable-line\r\n    return res\r\n  }\r\n\r\n  function getRawDirName (dir) {\r\n    return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\r\n  }\r\n\r\n  function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\r\n    var fn = dir.def && dir.def[hook];\r\n    if (fn) {\r\n      try {\r\n        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\r\n      } catch (e) {\r\n        handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\r\n      }\r\n    }\r\n  }\r\n\r\n  var baseModules = [\r\n    ref,\r\n    directives\r\n  ];\r\n\r\n  /*  */\r\n\r\n  function updateAttrs (oldVnode, vnode) {\r\n    var opts = vnode.componentOptions;\r\n    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\r\n      return\r\n    }\r\n    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\r\n      return\r\n    }\r\n    var key, cur, old;\r\n    var elm = vnode.elm;\r\n    var oldAttrs = oldVnode.data.attrs || {};\r\n    var attrs = vnode.data.attrs || {};\r\n    // clone observed objects, as the user probably wants to mutate it\r\n    if (isDef(attrs.__ob__)) {\r\n      attrs = vnode.data.attrs = extend({}, attrs);\r\n    }\r\n\r\n    for (key in attrs) {\r\n      cur = attrs[key];\r\n      old = oldAttrs[key];\r\n      if (old !== cur) {\r\n        setAttr(elm, key, cur);\r\n      }\r\n    }\r\n    // #4391: in IE9, setting type can reset value for input[type=radio]\r\n    // #6666: IE/Edge forces progress value down to 1 before setting a max\r\n    /* istanbul ignore if */\r\n    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\r\n      setAttr(elm, 'value', attrs.value);\r\n    }\r\n    for (key in oldAttrs) {\r\n      if (isUndef(attrs[key])) {\r\n        if (isXlink(key)) {\r\n          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n        } else if (!isEnumeratedAttr(key)) {\r\n          elm.removeAttribute(key);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function setAttr (el, key, value) {\r\n    if (el.tagName.indexOf('-') > -1) {\r\n      baseSetAttr(el, key, value);\r\n    } else if (isBooleanAttr(key)) {\r\n      // set attribute for blank value\r\n      // e.g. <option disabled>Select one</option>\r\n      if (isFalsyAttrValue(value)) {\r\n        el.removeAttribute(key);\r\n      } else {\r\n        // technically allowfullscreen is a boolean attribute for <iframe>,\r\n        // but Flash expects a value of \"true\" when used on <embed> tag\r\n        value = key === 'allowfullscreen' && el.tagName === 'EMBED'\r\n          ? 'true'\r\n          : key;\r\n        el.setAttribute(key, value);\r\n      }\r\n    } else if (isEnumeratedAttr(key)) {\r\n      el.setAttribute(key, convertEnumeratedValue(key, value));\r\n    } else if (isXlink(key)) {\r\n      if (isFalsyAttrValue(value)) {\r\n        el.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n      } else {\r\n        el.setAttributeNS(xlinkNS, key, value);\r\n      }\r\n    } else {\r\n      baseSetAttr(el, key, value);\r\n    }\r\n  }\r\n\r\n  function baseSetAttr (el, key, value) {\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttribute(key);\r\n    } else {\r\n      // #7138: IE10 & 11 fires input event when setting placeholder on\r\n      // <textarea>... block the first input event and remove the blocker\r\n      // immediately.\r\n      /* istanbul ignore if */\r\n      if (\r\n        isIE && !isIE9 &&\r\n        el.tagName === 'TEXTAREA' &&\r\n        key === 'placeholder' && value !== '' && !el.__ieph\r\n      ) {\r\n        var blocker = function (e) {\r\n          e.stopImmediatePropagation();\r\n          el.removeEventListener('input', blocker);\r\n        };\r\n        el.addEventListener('input', blocker);\r\n        // $flow-disable-line\r\n        el.__ieph = true; /* IE placeholder patched */\r\n      }\r\n      el.setAttribute(key, value);\r\n    }\r\n  }\r\n\r\n  var attrs = {\r\n    create: updateAttrs,\r\n    update: updateAttrs\r\n  };\r\n\r\n  /*  */\r\n\r\n  function updateClass (oldVnode, vnode) {\r\n    var el = vnode.elm;\r\n    var data = vnode.data;\r\n    var oldData = oldVnode.data;\r\n    if (\r\n      isUndef(data.staticClass) &&\r\n      isUndef(data.class) && (\r\n        isUndef(oldData) || (\r\n          isUndef(oldData.staticClass) &&\r\n          isUndef(oldData.class)\r\n        )\r\n      )\r\n    ) {\r\n      return\r\n    }\r\n\r\n    var cls = genClassForVnode(vnode);\r\n\r\n    // handle transition classes\r\n    var transitionClass = el._transitionClasses;\r\n    if (isDef(transitionClass)) {\r\n      cls = concat(cls, stringifyClass(transitionClass));\r\n    }\r\n\r\n    // set the class\r\n    if (cls !== el._prevClass) {\r\n      el.setAttribute('class', cls);\r\n      el._prevClass = cls;\r\n    }\r\n  }\r\n\r\n  var klass = {\r\n    create: updateClass,\r\n    update: updateClass\r\n  };\r\n\r\n  /*  */\r\n\r\n  var validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\n\r\n  function parseFilters (exp) {\r\n    var inSingle = false;\r\n    var inDouble = false;\r\n    var inTemplateString = false;\r\n    var inRegex = false;\r\n    var curly = 0;\r\n    var square = 0;\r\n    var paren = 0;\r\n    var lastFilterIndex = 0;\r\n    var c, prev, i, expression, filters;\r\n\r\n    for (i = 0; i < exp.length; i++) {\r\n      prev = c;\r\n      c = exp.charCodeAt(i);\r\n      if (inSingle) {\r\n        if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\r\n      } else if (inDouble) {\r\n        if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\r\n      } else if (inTemplateString) {\r\n        if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\r\n      } else if (inRegex) {\r\n        if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\r\n      } else if (\r\n        c === 0x7C && // pipe\r\n        exp.charCodeAt(i + 1) !== 0x7C &&\r\n        exp.charCodeAt(i - 1) !== 0x7C &&\r\n        !curly && !square && !paren\r\n      ) {\r\n        if (expression === undefined) {\r\n          // first filter, end of expression\r\n          lastFilterIndex = i + 1;\r\n          expression = exp.slice(0, i).trim();\r\n        } else {\r\n          pushFilter();\r\n        }\r\n      } else {\r\n        switch (c) {\r\n          case 0x22: inDouble = true; break         // \"\r\n          case 0x27: inSingle = true; break         // '\r\n          case 0x60: inTemplateString = true; break // `\r\n          case 0x28: paren++; break                 // (\r\n          case 0x29: paren--; break                 // )\r\n          case 0x5B: square++; break                // [\r\n          case 0x5D: square--; break                // ]\r\n          case 0x7B: curly++; break                 // {\r\n          case 0x7D: curly--; break                 // }\r\n        }\r\n        if (c === 0x2f) { // /\r\n          var j = i - 1;\r\n          var p = (void 0);\r\n          // find first non-whitespace prev char\r\n          for (; j >= 0; j--) {\r\n            p = exp.charAt(j);\r\n            if (p !== ' ') { break }\r\n          }\r\n          if (!p || !validDivisionCharRE.test(p)) {\r\n            inRegex = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (expression === undefined) {\r\n      expression = exp.slice(0, i).trim();\r\n    } else if (lastFilterIndex !== 0) {\r\n      pushFilter();\r\n    }\r\n\r\n    function pushFilter () {\r\n      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\r\n      lastFilterIndex = i + 1;\r\n    }\r\n\r\n    if (filters) {\r\n      for (i = 0; i < filters.length; i++) {\r\n        expression = wrapFilter(expression, filters[i]);\r\n      }\r\n    }\r\n\r\n    return expression\r\n  }\r\n\r\n  function wrapFilter (exp, filter) {\r\n    var i = filter.indexOf('(');\r\n    if (i < 0) {\r\n      // _f: resolveFilter\r\n      return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\r\n    } else {\r\n      var name = filter.slice(0, i);\r\n      var args = filter.slice(i + 1);\r\n      return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  /* eslint-disable no-unused-vars */\r\n  function baseWarn (msg, range) {\r\n    console.error((\"[Vue compiler]: \" + msg));\r\n  }\r\n  /* eslint-enable no-unused-vars */\r\n\r\n  function pluckModuleFunction (\r\n    modules,\r\n    key\r\n  ) {\r\n    return modules\r\n      ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\r\n      : []\r\n  }\r\n\r\n  function addProp (el, name, value, range, dynamic) {\r\n    (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\r\n    el.plain = false;\r\n  }\r\n\r\n  function addAttr (el, name, value, range, dynamic) {\r\n    var attrs = dynamic\r\n      ? (el.dynamicAttrs || (el.dynamicAttrs = []))\r\n      : (el.attrs || (el.attrs = []));\r\n    attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\r\n    el.plain = false;\r\n  }\r\n\r\n  // add a raw attr (use this in preTransforms)\r\n  function addRawAttr (el, name, value, range) {\r\n    el.attrsMap[name] = value;\r\n    el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\r\n  }\r\n\r\n  function addDirective (\r\n    el,\r\n    name,\r\n    rawName,\r\n    value,\r\n    arg,\r\n    isDynamicArg,\r\n    modifiers,\r\n    range\r\n  ) {\r\n    (el.directives || (el.directives = [])).push(rangeSetItem({\r\n      name: name,\r\n      rawName: rawName,\r\n      value: value,\r\n      arg: arg,\r\n      isDynamicArg: isDynamicArg,\r\n      modifiers: modifiers\r\n    }, range));\r\n    el.plain = false;\r\n  }\r\n\r\n  function prependModifierMarker (symbol, name, dynamic) {\r\n    return dynamic\r\n      ? (\"_p(\" + name + \",\\\"\" + symbol + \"\\\")\")\r\n      : symbol + name // mark the event as captured\r\n  }\r\n\r\n  function addHandler (\r\n    el,\r\n    name,\r\n    value,\r\n    modifiers,\r\n    important,\r\n    warn,\r\n    range,\r\n    dynamic\r\n  ) {\r\n    modifiers = modifiers || emptyObject;\r\n    // warn prevent and passive modifier\r\n    /* istanbul ignore if */\r\n    if (\r\n      warn &&\r\n      modifiers.prevent && modifiers.passive\r\n    ) {\r\n      warn(\r\n        'passive and prevent can\\'t be used together. ' +\r\n        'Passive handler can\\'t prevent default event.',\r\n        range\r\n      );\r\n    }\r\n\r\n    // normalize click.right and click.middle since they don't actually fire\r\n    // this is technically browser-specific, but at least for now browsers are\r\n    // the only target envs that have right/middle clicks.\r\n    if (modifiers.right) {\r\n      if (dynamic) {\r\n        name = \"(\" + name + \")==='click'?'contextmenu':(\" + name + \")\";\r\n      } else if (name === 'click') {\r\n        name = 'contextmenu';\r\n        delete modifiers.right;\r\n      }\r\n    } else if (modifiers.middle) {\r\n      if (dynamic) {\r\n        name = \"(\" + name + \")==='click'?'mouseup':(\" + name + \")\";\r\n      } else if (name === 'click') {\r\n        name = 'mouseup';\r\n      }\r\n    }\r\n\r\n    // check capture modifier\r\n    if (modifiers.capture) {\r\n      delete modifiers.capture;\r\n      name = prependModifierMarker('!', name, dynamic);\r\n    }\r\n    if (modifiers.once) {\r\n      delete modifiers.once;\r\n      name = prependModifierMarker('~', name, dynamic);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (modifiers.passive) {\r\n      delete modifiers.passive;\r\n      name = prependModifierMarker('&', name, dynamic);\r\n    }\r\n\r\n    var events;\r\n    if (modifiers.native) {\r\n      delete modifiers.native;\r\n      events = el.nativeEvents || (el.nativeEvents = {});\r\n    } else {\r\n      events = el.events || (el.events = {});\r\n    }\r\n\r\n    var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\r\n    if (modifiers !== emptyObject) {\r\n      newHandler.modifiers = modifiers;\r\n    }\r\n\r\n    var handlers = events[name];\r\n    /* istanbul ignore if */\r\n    if (Array.isArray(handlers)) {\r\n      important ? handlers.unshift(newHandler) : handlers.push(newHandler);\r\n    } else if (handlers) {\r\n      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\r\n    } else {\r\n      events[name] = newHandler;\r\n    }\r\n\r\n    el.plain = false;\r\n  }\r\n\r\n  function getRawBindingAttr (\r\n    el,\r\n    name\r\n  ) {\r\n    return el.rawAttrsMap[':' + name] ||\r\n      el.rawAttrsMap['v-bind:' + name] ||\r\n      el.rawAttrsMap[name]\r\n  }\r\n\r\n  function getBindingAttr (\r\n    el,\r\n    name,\r\n    getStatic\r\n  ) {\r\n    var dynamicValue =\r\n      getAndRemoveAttr(el, ':' + name) ||\r\n      getAndRemoveAttr(el, 'v-bind:' + name);\r\n    if (dynamicValue != null) {\r\n      return parseFilters(dynamicValue)\r\n    } else if (getStatic !== false) {\r\n      var staticValue = getAndRemoveAttr(el, name);\r\n      if (staticValue != null) {\r\n        return JSON.stringify(staticValue)\r\n      }\r\n    }\r\n  }\r\n\r\n  // note: this only removes the attr from the Array (attrsList) so that it\r\n  // doesn't get processed by processAttrs.\r\n  // By default it does NOT remove it from the map (attrsMap) because the map is\r\n  // needed during codegen.\r\n  function getAndRemoveAttr (\r\n    el,\r\n    name,\r\n    removeFromMap\r\n  ) {\r\n    var val;\r\n    if ((val = el.attrsMap[name]) != null) {\r\n      var list = el.attrsList;\r\n      for (var i = 0, l = list.length; i < l; i++) {\r\n        if (list[i].name === name) {\r\n          list.splice(i, 1);\r\n          break\r\n        }\r\n      }\r\n    }\r\n    if (removeFromMap) {\r\n      delete el.attrsMap[name];\r\n    }\r\n    return val\r\n  }\r\n\r\n  function getAndRemoveAttrByRegex (\r\n    el,\r\n    name\r\n  ) {\r\n    var list = el.attrsList;\r\n    for (var i = 0, l = list.length; i < l; i++) {\r\n      var attr = list[i];\r\n      if (name.test(attr.name)) {\r\n        list.splice(i, 1);\r\n        return attr\r\n      }\r\n    }\r\n  }\r\n\r\n  function rangeSetItem (\r\n    item,\r\n    range\r\n  ) {\r\n    if (range) {\r\n      if (range.start != null) {\r\n        item.start = range.start;\r\n      }\r\n      if (range.end != null) {\r\n        item.end = range.end;\r\n      }\r\n    }\r\n    return item\r\n  }\r\n\r\n  /*  */\r\n\r\n  /**\r\n   * Cross-platform code generation for component v-model\r\n   */\r\n  function genComponentModel (\r\n    el,\r\n    value,\r\n    modifiers\r\n  ) {\r\n    var ref = modifiers || {};\r\n    var number = ref.number;\r\n    var trim = ref.trim;\r\n\r\n    var baseValueExpression = '$$v';\r\n    var valueExpression = baseValueExpression;\r\n    if (trim) {\r\n      valueExpression =\r\n        \"(typeof \" + baseValueExpression + \" === 'string'\" +\r\n        \"? \" + baseValueExpression + \".trim()\" +\r\n        \": \" + baseValueExpression + \")\";\r\n    }\r\n    if (number) {\r\n      valueExpression = \"_n(\" + valueExpression + \")\";\r\n    }\r\n    var assignment = genAssignmentCode(value, valueExpression);\r\n\r\n    el.model = {\r\n      value: (\"(\" + value + \")\"),\r\n      expression: JSON.stringify(value),\r\n      callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cross-platform codegen helper for generating v-model value assignment code.\r\n   */\r\n  function genAssignmentCode (\r\n    value,\r\n    assignment\r\n  ) {\r\n    var res = parseModel(value);\r\n    if (res.key === null) {\r\n      return (value + \"=\" + assignment)\r\n    } else {\r\n      return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse a v-model expression into a base path and a final key segment.\r\n   * Handles both dot-path and possible square brackets.\r\n   *\r\n   * Possible cases:\r\n   *\r\n   * - test\r\n   * - test[key]\r\n   * - test[test1[key]]\r\n   * - test[\"a\"][key]\r\n   * - xxx.test[a[a].test1[key]]\r\n   * - test.xxx.a[\"asa\"][test1[key]]\r\n   *\r\n   */\r\n\r\n  var len, str, chr, index$1, expressionPos, expressionEndPos;\r\n\r\n\r\n\r\n  function parseModel (val) {\r\n    // Fix https://github.com/vuejs/vue/pull/7730\r\n    // allow v-model=\"obj.val \" (trailing whitespace)\r\n    val = val.trim();\r\n    len = val.length;\r\n\r\n    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\r\n      index$1 = val.lastIndexOf('.');\r\n      if (index$1 > -1) {\r\n        return {\r\n          exp: val.slice(0, index$1),\r\n          key: '\"' + val.slice(index$1 + 1) + '\"'\r\n        }\r\n      } else {\r\n        return {\r\n          exp: val,\r\n          key: null\r\n        }\r\n      }\r\n    }\r\n\r\n    str = val;\r\n    index$1 = expressionPos = expressionEndPos = 0;\r\n\r\n    while (!eof()) {\r\n      chr = next();\r\n      /* istanbul ignore if */\r\n      if (isStringStart(chr)) {\r\n        parseString(chr);\r\n      } else if (chr === 0x5B) {\r\n        parseBracket(chr);\r\n      }\r\n    }\r\n\r\n    return {\r\n      exp: val.slice(0, expressionPos),\r\n      key: val.slice(expressionPos + 1, expressionEndPos)\r\n    }\r\n  }\r\n\r\n  function next () {\r\n    return str.charCodeAt(++index$1)\r\n  }\r\n\r\n  function eof () {\r\n    return index$1 >= len\r\n  }\r\n\r\n  function isStringStart (chr) {\r\n    return chr === 0x22 || chr === 0x27\r\n  }\r\n\r\n  function parseBracket (chr) {\r\n    var inBracket = 1;\r\n    expressionPos = index$1;\r\n    while (!eof()) {\r\n      chr = next();\r\n      if (isStringStart(chr)) {\r\n        parseString(chr);\r\n        continue\r\n      }\r\n      if (chr === 0x5B) { inBracket++; }\r\n      if (chr === 0x5D) { inBracket--; }\r\n      if (inBracket === 0) {\r\n        expressionEndPos = index$1;\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  function parseString (chr) {\r\n    var stringQuote = chr;\r\n    while (!eof()) {\r\n      chr = next();\r\n      if (chr === stringQuote) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var warn$1;\r\n\r\n  // in some cases, the event used has to be determined at runtime\r\n  // so we used some reserved tokens during compile.\r\n  var RANGE_TOKEN = '__r';\r\n  var CHECKBOX_RADIO_TOKEN = '__c';\r\n\r\n  function model (\r\n    el,\r\n    dir,\r\n    _warn\r\n  ) {\r\n    warn$1 = _warn;\r\n    var value = dir.value;\r\n    var modifiers = dir.modifiers;\r\n    var tag = el.tag;\r\n    var type = el.attrsMap.type;\r\n\r\n    {\r\n      // inputs with type=\"file\" are read only and setting the input's\r\n      // value will throw an error.\r\n      if (tag === 'input' && type === 'file') {\r\n        warn$1(\r\n          \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\r\n          \"File inputs are read only. Use a v-on:change listener instead.\",\r\n          el.rawAttrsMap['v-model']\r\n        );\r\n      }\r\n    }\r\n\r\n    if (el.component) {\r\n      genComponentModel(el, value, modifiers);\r\n      // component v-model doesn't need extra runtime\r\n      return false\r\n    } else if (tag === 'select') {\r\n      genSelect(el, value, modifiers);\r\n    } else if (tag === 'input' && type === 'checkbox') {\r\n      genCheckboxModel(el, value, modifiers);\r\n    } else if (tag === 'input' && type === 'radio') {\r\n      genRadioModel(el, value, modifiers);\r\n    } else if (tag === 'input' || tag === 'textarea') {\r\n      genDefaultModel(el, value, modifiers);\r\n    } else if (!config.isReservedTag(tag)) {\r\n      genComponentModel(el, value, modifiers);\r\n      // component v-model doesn't need extra runtime\r\n      return false\r\n    } else {\r\n      warn$1(\r\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\r\n        \"v-model is not supported on this element type. \" +\r\n        'If you are working with contenteditable, it\\'s recommended to ' +\r\n        'wrap a library dedicated for that purpose inside a custom component.',\r\n        el.rawAttrsMap['v-model']\r\n      );\r\n    }\r\n\r\n    // ensure runtime directive metadata\r\n    return true\r\n  }\r\n\r\n  function genCheckboxModel (\r\n    el,\r\n    value,\r\n    modifiers\r\n  ) {\r\n    var number = modifiers && modifiers.number;\r\n    var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\r\n    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\r\n    addProp(el, 'checked',\r\n      \"Array.isArray(\" + value + \")\" +\r\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\r\n        trueValueBinding === 'true'\r\n          ? (\":(\" + value + \")\")\r\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\r\n      )\r\n    );\r\n    addHandler(el, 'change',\r\n      \"var $$a=\" + value + \",\" +\r\n          '$$el=$event.target,' +\r\n          \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\r\n      'if(Array.isArray($$a)){' +\r\n        \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\r\n            '$$i=_i($$a,$$v);' +\r\n        \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\r\n        \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\r\n      \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\r\n      null, true\r\n    );\r\n  }\r\n\r\n  function genRadioModel (\r\n    el,\r\n    value,\r\n    modifiers\r\n  ) {\r\n    var number = modifiers && modifiers.number;\r\n    var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n    valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\r\n    addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\r\n    addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\r\n  }\r\n\r\n  function genSelect (\r\n    el,\r\n    value,\r\n    modifiers\r\n  ) {\r\n    var number = modifiers && modifiers.number;\r\n    var selectedVal = \"Array.prototype.filter\" +\r\n      \".call($event.target.options,function(o){return o.selected})\" +\r\n      \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\r\n      \"return \" + (number ? '_n(val)' : 'val') + \"})\";\r\n\r\n    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\r\n    var code = \"var $$selectedVal = \" + selectedVal + \";\";\r\n    code = code + \" \" + (genAssignmentCode(value, assignment));\r\n    addHandler(el, 'change', code, null, true);\r\n  }\r\n\r\n  function genDefaultModel (\r\n    el,\r\n    value,\r\n    modifiers\r\n  ) {\r\n    var type = el.attrsMap.type;\r\n\r\n    // warn if v-bind:value conflicts with v-model\r\n    // except for inputs with v-bind:type\r\n    {\r\n      var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\r\n      var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\r\n      if (value$1 && !typeBinding) {\r\n        var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\r\n        warn$1(\r\n          binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\r\n          'because the latter already expands to a value binding internally',\r\n          el.rawAttrsMap[binding]\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref = modifiers || {};\r\n    var lazy = ref.lazy;\r\n    var number = ref.number;\r\n    var trim = ref.trim;\r\n    var needCompositionGuard = !lazy && type !== 'range';\r\n    var event = lazy\r\n      ? 'change'\r\n      : type === 'range'\r\n        ? RANGE_TOKEN\r\n        : 'input';\r\n\r\n    var valueExpression = '$event.target.value';\r\n    if (trim) {\r\n      valueExpression = \"$event.target.value.trim()\";\r\n    }\r\n    if (number) {\r\n      valueExpression = \"_n(\" + valueExpression + \")\";\r\n    }\r\n\r\n    var code = genAssignmentCode(value, valueExpression);\r\n    if (needCompositionGuard) {\r\n      code = \"if($event.target.composing)return;\" + code;\r\n    }\r\n\r\n    addProp(el, 'value', (\"(\" + value + \")\"));\r\n    addHandler(el, event, code, null, true);\r\n    if (trim || number) {\r\n      addHandler(el, 'blur', '$forceUpdate()');\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  // normalize v-model event tokens that can only be determined at runtime.\r\n  // it's important to place the event as the first in the array because\r\n  // the whole point is ensuring the v-model callback gets called before\r\n  // user-attached handlers.\r\n  function normalizeEvents (on) {\r\n    /* istanbul ignore if */\r\n    if (isDef(on[RANGE_TOKEN])) {\r\n      // IE input[type=range] only supports `change` event\r\n      var event = isIE ? 'change' : 'input';\r\n      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\r\n      delete on[RANGE_TOKEN];\r\n    }\r\n    // This was originally intended to fix #4521 but no longer necessary\r\n    // after 2.5. Keeping it for backwards compat with generated code from < 2.4\r\n    /* istanbul ignore if */\r\n    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\r\n      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\r\n      delete on[CHECKBOX_RADIO_TOKEN];\r\n    }\r\n  }\r\n\r\n  var target$1;\r\n\r\n  function createOnceHandler$1 (event, handler, capture) {\r\n    var _target = target$1; // save current target element in closure\r\n    return function onceHandler () {\r\n      var res = handler.apply(null, arguments);\r\n      if (res !== null) {\r\n        remove$2(event, onceHandler, capture, _target);\r\n      }\r\n    }\r\n  }\r\n\r\n  // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\r\n  // implementation and does not fire microtasks in between event propagation, so\r\n  // safe to exclude.\r\n  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\r\n\r\n  function add$1 (\r\n    name,\r\n    handler,\r\n    capture,\r\n    passive\r\n  ) {\r\n    // async edge case #6566: inner click event triggers patch, event handler\r\n    // attached to outer element during patch, and triggered again. This\r\n    // happens because browsers fire microtask ticks between event propagation.\r\n    // the solution is simple: we save the timestamp when a handler is attached,\r\n    // and the handler would only fire if the event passed to it was fired\r\n    // AFTER it was attached.\r\n    if (useMicrotaskFix) {\r\n      var attachedTimestamp = currentFlushTimestamp;\r\n      var original = handler;\r\n      handler = original._wrapper = function (e) {\r\n        if (\r\n          // no bubbling, should always fire.\r\n          // this is just a safety net in case event.timeStamp is unreliable in\r\n          // certain weird environments...\r\n          e.target === e.currentTarget ||\r\n          // event is fired after handler attachment\r\n          e.timeStamp >= attachedTimestamp ||\r\n          // bail for environments that have buggy event.timeStamp implementations\r\n          // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\r\n          // #9681 QtWebEngine event.timeStamp is negative value\r\n          e.timeStamp <= 0 ||\r\n          // #9448 bail if event is fired in another document in a multi-page\r\n          // electron/nw.js app, since event.timeStamp will be using a different\r\n          // starting reference\r\n          e.target.ownerDocument !== document\r\n        ) {\r\n          return original.apply(this, arguments)\r\n        }\r\n      };\r\n    }\r\n    target$1.addEventListener(\r\n      name,\r\n      handler,\r\n      supportsPassive\r\n        ? { capture: capture, passive: passive }\r\n        : capture\r\n    );\r\n  }\r\n\r\n  function remove$2 (\r\n    name,\r\n    handler,\r\n    capture,\r\n    _target\r\n  ) {\r\n    (_target || target$1).removeEventListener(\r\n      name,\r\n      handler._wrapper || handler,\r\n      capture\r\n    );\r\n  }\r\n\r\n  function updateDOMListeners (oldVnode, vnode) {\r\n    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\r\n      return\r\n    }\r\n    var on = vnode.data.on || {};\r\n    var oldOn = oldVnode.data.on || {};\r\n    target$1 = vnode.elm;\r\n    normalizeEvents(on);\r\n    updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\r\n    target$1 = undefined;\r\n  }\r\n\r\n  var events = {\r\n    create: updateDOMListeners,\r\n    update: updateDOMListeners\r\n  };\r\n\r\n  /*  */\r\n\r\n  var svgContainer;\r\n\r\n  function updateDOMProps (oldVnode, vnode) {\r\n    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\r\n      return\r\n    }\r\n    var key, cur;\r\n    var elm = vnode.elm;\r\n    var oldProps = oldVnode.data.domProps || {};\r\n    var props = vnode.data.domProps || {};\r\n    // clone observed objects, as the user probably wants to mutate it\r\n    if (isDef(props.__ob__)) {\r\n      props = vnode.data.domProps = extend({}, props);\r\n    }\r\n\r\n    for (key in oldProps) {\r\n      if (!(key in props)) {\r\n        elm[key] = '';\r\n      }\r\n    }\r\n\r\n    for (key in props) {\r\n      cur = props[key];\r\n      // ignore children if the node has textContent or innerHTML,\r\n      // as these will throw away existing DOM nodes and cause removal errors\r\n      // on subsequent patches (#3360)\r\n      if (key === 'textContent' || key === 'innerHTML') {\r\n        if (vnode.children) { vnode.children.length = 0; }\r\n        if (cur === oldProps[key]) { continue }\r\n        // #6601 work around Chrome version <= 55 bug where single textNode\r\n        // replaced by innerHTML/textContent retains its parentNode property\r\n        if (elm.childNodes.length === 1) {\r\n          elm.removeChild(elm.childNodes[0]);\r\n        }\r\n      }\r\n\r\n      if (key === 'value' && elm.tagName !== 'PROGRESS') {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified\r\n        elm._value = cur;\r\n        // avoid resetting cursor position when value is the same\r\n        var strCur = isUndef(cur) ? '' : String(cur);\r\n        if (shouldUpdateValue(elm, strCur)) {\r\n          elm.value = strCur;\r\n        }\r\n      } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\r\n        // IE doesn't support innerHTML for SVG elements\r\n        svgContainer = svgContainer || document.createElement('div');\r\n        svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\r\n        var svg = svgContainer.firstChild;\r\n        while (elm.firstChild) {\r\n          elm.removeChild(elm.firstChild);\r\n        }\r\n        while (svg.firstChild) {\r\n          elm.appendChild(svg.firstChild);\r\n        }\r\n      } else if (\r\n        // skip the update if old and new VDOM state is the same.\r\n        // `value` is handled separately because the DOM value may be temporarily\r\n        // out of sync with VDOM state due to focus, composition and modifiers.\r\n        // This  #4521 by skipping the unnecessary `checked` update.\r\n        cur !== oldProps[key]\r\n      ) {\r\n        // some property updates can throw\r\n        // e.g. `value` on <progress> w/ non-finite value\r\n        try {\r\n          elm[key] = cur;\r\n        } catch (e) {}\r\n      }\r\n    }\r\n  }\r\n\r\n  // check platforms/web/util/attrs.js acceptValue\r\n\r\n\r\n  function shouldUpdateValue (elm, checkVal) {\r\n    return (!elm.composing && (\r\n      elm.tagName === 'OPTION' ||\r\n      isNotInFocusAndDirty(elm, checkVal) ||\r\n      isDirtyWithModifiers(elm, checkVal)\r\n    ))\r\n  }\r\n\r\n  function isNotInFocusAndDirty (elm, checkVal) {\r\n    // return true when textbox (.number and .trim) loses focus and its value is\r\n    // not equal to the updated value\r\n    var notInFocus = true;\r\n    // #6157\r\n    // work around IE bug when accessing document.activeElement in an iframe\r\n    try { notInFocus = document.activeElement !== elm; } catch (e) {}\r\n    return notInFocus && elm.value !== checkVal\r\n  }\r\n\r\n  function isDirtyWithModifiers (elm, newVal) {\r\n    var value = elm.value;\r\n    var modifiers = elm._vModifiers; // injected by v-model runtime\r\n    if (isDef(modifiers)) {\r\n      if (modifiers.number) {\r\n        return toNumber(value) !== toNumber(newVal)\r\n      }\r\n      if (modifiers.trim) {\r\n        return value.trim() !== newVal.trim()\r\n      }\r\n    }\r\n    return value !== newVal\r\n  }\r\n\r\n  var domProps = {\r\n    create: updateDOMProps,\r\n    update: updateDOMProps\r\n  };\r\n\r\n  /*  */\r\n\r\n  var parseStyleText = cached(function (cssText) {\r\n    var res = {};\r\n    var listDelimiter = /;(?![^(]*\\))/g;\r\n    var propertyDelimiter = /:(.+)/;\r\n    cssText.split(listDelimiter).forEach(function (item) {\r\n      if (item) {\r\n        var tmp = item.split(propertyDelimiter);\r\n        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\r\n      }\r\n    });\r\n    return res\r\n  });\r\n\r\n  // merge static and dynamic style data on the same vnode\r\n  function normalizeStyleData (data) {\r\n    var style = normalizeStyleBinding(data.style);\r\n    // static style is pre-processed into an object during compilation\r\n    // and is always a fresh object, so it's safe to merge into it\r\n    return data.staticStyle\r\n      ? extend(data.staticStyle, style)\r\n      : style\r\n  }\r\n\r\n  // normalize possible array / string values into Object\r\n  function normalizeStyleBinding (bindingStyle) {\r\n    if (Array.isArray(bindingStyle)) {\r\n      return toObject(bindingStyle)\r\n    }\r\n    if (typeof bindingStyle === 'string') {\r\n      return parseStyleText(bindingStyle)\r\n    }\r\n    return bindingStyle\r\n  }\r\n\r\n  /**\r\n   * parent component style should be after child's\r\n   * so that parent component's style could override it\r\n   */\r\n  function getStyle (vnode, checkChild) {\r\n    var res = {};\r\n    var styleData;\r\n\r\n    if (checkChild) {\r\n      var childNode = vnode;\r\n      while (childNode.componentInstance) {\r\n        childNode = childNode.componentInstance._vnode;\r\n        if (\r\n          childNode && childNode.data &&\r\n          (styleData = normalizeStyleData(childNode.data))\r\n        ) {\r\n          extend(res, styleData);\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((styleData = normalizeStyleData(vnode.data))) {\r\n      extend(res, styleData);\r\n    }\r\n\r\n    var parentNode = vnode;\r\n    while ((parentNode = parentNode.parent)) {\r\n      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\r\n        extend(res, styleData);\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*  */\r\n\r\n  var cssVarRE = /^--/;\r\n  var importantRE = /\\s*!important$/;\r\n  var setProp = function (el, name, val) {\r\n    /* istanbul ignore if */\r\n    if (cssVarRE.test(name)) {\r\n      el.style.setProperty(name, val);\r\n    } else if (importantRE.test(val)) {\r\n      el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\r\n    } else {\r\n      var normalizedName = normalize(name);\r\n      if (Array.isArray(val)) {\r\n        // Support values array created by autoprefixer, e.g.\r\n        // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\r\n        // Set them one by one, and the browser will only set those it can recognize\r\n        for (var i = 0, len = val.length; i < len; i++) {\r\n          el.style[normalizedName] = val[i];\r\n        }\r\n      } else {\r\n        el.style[normalizedName] = val;\r\n      }\r\n    }\r\n  };\r\n\r\n  var vendorNames = ['Webkit', 'Moz', 'ms'];\r\n\r\n  var emptyStyle;\r\n  var normalize = cached(function (prop) {\r\n    emptyStyle = emptyStyle || document.createElement('div').style;\r\n    prop = camelize(prop);\r\n    if (prop !== 'filter' && (prop in emptyStyle)) {\r\n      return prop\r\n    }\r\n    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\r\n    for (var i = 0; i < vendorNames.length; i++) {\r\n      var name = vendorNames[i] + capName;\r\n      if (name in emptyStyle) {\r\n        return name\r\n      }\r\n    }\r\n  });\r\n\r\n  function updateStyle (oldVnode, vnode) {\r\n    var data = vnode.data;\r\n    var oldData = oldVnode.data;\r\n\r\n    if (isUndef(data.staticStyle) && isUndef(data.style) &&\r\n      isUndef(oldData.staticStyle) && isUndef(oldData.style)\r\n    ) {\r\n      return\r\n    }\r\n\r\n    var cur, name;\r\n    var el = vnode.elm;\r\n    var oldStaticStyle = oldData.staticStyle;\r\n    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\r\n\r\n    // if static style exists, stylebinding already merged into it when doing normalizeStyleData\r\n    var oldStyle = oldStaticStyle || oldStyleBinding;\r\n\r\n    var style = normalizeStyleBinding(vnode.data.style) || {};\r\n\r\n    // store normalized style under a different key for next diff\r\n    // make sure to clone it if it's reactive, since the user likely wants\r\n    // to mutate it.\r\n    vnode.data.normalizedStyle = isDef(style.__ob__)\r\n      ? extend({}, style)\r\n      : style;\r\n\r\n    var newStyle = getStyle(vnode, true);\r\n\r\n    for (name in oldStyle) {\r\n      if (isUndef(newStyle[name])) {\r\n        setProp(el, name, '');\r\n      }\r\n    }\r\n    for (name in newStyle) {\r\n      cur = newStyle[name];\r\n      if (cur !== oldStyle[name]) {\r\n        // ie9 setting to null has no effect, must use empty string\r\n        setProp(el, name, cur == null ? '' : cur);\r\n      }\r\n    }\r\n  }\r\n\r\n  var style = {\r\n    create: updateStyle,\r\n    update: updateStyle\r\n  };\r\n\r\n  /*  */\r\n\r\n  var whitespaceRE = /\\s+/;\r\n\r\n  /**\r\n   * Add class with compatibility for SVG since classList is not supported on\r\n   * SVG elements in IE\r\n   */\r\n  function addClass (el, cls) {\r\n    /* istanbul ignore if */\r\n    if (!cls || !(cls = cls.trim())) {\r\n      return\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el.classList) {\r\n      if (cls.indexOf(' ') > -1) {\r\n        cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\r\n      } else {\r\n        el.classList.add(cls);\r\n      }\r\n    } else {\r\n      var cur = \" \" + (el.getAttribute('class') || '') + \" \";\r\n      if (cur.indexOf(' ' + cls + ' ') < 0) {\r\n        el.setAttribute('class', (cur + cls).trim());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove class with compatibility for SVG since classList is not supported on\r\n   * SVG elements in IE\r\n   */\r\n  function removeClass (el, cls) {\r\n    /* istanbul ignore if */\r\n    if (!cls || !(cls = cls.trim())) {\r\n      return\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el.classList) {\r\n      if (cls.indexOf(' ') > -1) {\r\n        cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\r\n      } else {\r\n        el.classList.remove(cls);\r\n      }\r\n      if (!el.classList.length) {\r\n        el.removeAttribute('class');\r\n      }\r\n    } else {\r\n      var cur = \" \" + (el.getAttribute('class') || '') + \" \";\r\n      var tar = ' ' + cls + ' ';\r\n      while (cur.indexOf(tar) >= 0) {\r\n        cur = cur.replace(tar, ' ');\r\n      }\r\n      cur = cur.trim();\r\n      if (cur) {\r\n        el.setAttribute('class', cur);\r\n      } else {\r\n        el.removeAttribute('class');\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function resolveTransition (def$$1) {\r\n    if (!def$$1) {\r\n      return\r\n    }\r\n    /* istanbul ignore else */\r\n    if (typeof def$$1 === 'object') {\r\n      var res = {};\r\n      if (def$$1.css !== false) {\r\n        extend(res, autoCssTransition(def$$1.name || 'v'));\r\n      }\r\n      extend(res, def$$1);\r\n      return res\r\n    } else if (typeof def$$1 === 'string') {\r\n      return autoCssTransition(def$$1)\r\n    }\r\n  }\r\n\r\n  var autoCssTransition = cached(function (name) {\r\n    return {\r\n      enterClass: (name + \"-enter\"),\r\n      enterToClass: (name + \"-enter-to\"),\r\n      enterActiveClass: (name + \"-enter-active\"),\r\n      leaveClass: (name + \"-leave\"),\r\n      leaveToClass: (name + \"-leave-to\"),\r\n      leaveActiveClass: (name + \"-leave-active\")\r\n    }\r\n  });\r\n\r\n  var hasTransition = inBrowser && !isIE9;\r\n  var TRANSITION = 'transition';\r\n  var ANIMATION = 'animation';\r\n\r\n  // Transition property/event sniffing\r\n  var transitionProp = 'transition';\r\n  var transitionEndEvent = 'transitionend';\r\n  var animationProp = 'animation';\r\n  var animationEndEvent = 'animationend';\r\n  if (hasTransition) {\r\n    /* istanbul ignore if */\r\n    if (window.ontransitionend === undefined &&\r\n      window.onwebkittransitionend !== undefined\r\n    ) {\r\n      transitionProp = 'WebkitTransition';\r\n      transitionEndEvent = 'webkitTransitionEnd';\r\n    }\r\n    if (window.onanimationend === undefined &&\r\n      window.onwebkitanimationend !== undefined\r\n    ) {\r\n      animationProp = 'WebkitAnimation';\r\n      animationEndEvent = 'webkitAnimationEnd';\r\n    }\r\n  }\r\n\r\n  // binding to window is necessary to make hot reload work in IE in strict mode\r\n  var raf = inBrowser\r\n    ? window.requestAnimationFrame\r\n      ? window.requestAnimationFrame.bind(window)\r\n      : setTimeout\r\n    : /* istanbul ignore next */ function (fn) { return fn(); };\r\n\r\n  function nextFrame (fn) {\r\n    raf(function () {\r\n      raf(fn);\r\n    });\r\n  }\r\n\r\n  function addTransitionClass (el, cls) {\r\n    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\r\n    if (transitionClasses.indexOf(cls) < 0) {\r\n      transitionClasses.push(cls);\r\n      addClass(el, cls);\r\n    }\r\n  }\r\n\r\n  function removeTransitionClass (el, cls) {\r\n    if (el._transitionClasses) {\r\n      remove(el._transitionClasses, cls);\r\n    }\r\n    removeClass(el, cls);\r\n  }\r\n\r\n  function whenTransitionEnds (\r\n    el,\r\n    expectedType,\r\n    cb\r\n  ) {\r\n    var ref = getTransitionInfo(el, expectedType);\r\n    var type = ref.type;\r\n    var timeout = ref.timeout;\r\n    var propCount = ref.propCount;\r\n    if (!type) { return cb() }\r\n    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\r\n    var ended = 0;\r\n    var end = function () {\r\n      el.removeEventListener(event, onEnd);\r\n      cb();\r\n    };\r\n    var onEnd = function (e) {\r\n      if (e.target === el) {\r\n        if (++ended >= propCount) {\r\n          end();\r\n        }\r\n      }\r\n    };\r\n    setTimeout(function () {\r\n      if (ended < propCount) {\r\n        end();\r\n      }\r\n    }, timeout + 1);\r\n    el.addEventListener(event, onEnd);\r\n  }\r\n\r\n  var transformRE = /\\b(transform|all)(,|$)/;\r\n\r\n  function getTransitionInfo (el, expectedType) {\r\n    var styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\r\n    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\r\n    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\r\n    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\r\n    var animationTimeout = getTimeout(animationDelays, animationDurations);\r\n\r\n    var type;\r\n    var timeout = 0;\r\n    var propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n      if (transitionTimeout > 0) {\r\n        type = TRANSITION;\r\n        timeout = transitionTimeout;\r\n        propCount = transitionDurations.length;\r\n      }\r\n    } else if (expectedType === ANIMATION) {\r\n      if (animationTimeout > 0) {\r\n        type = ANIMATION;\r\n        timeout = animationTimeout;\r\n        propCount = animationDurations.length;\r\n      }\r\n    } else {\r\n      timeout = Math.max(transitionTimeout, animationTimeout);\r\n      type = timeout > 0\r\n        ? transitionTimeout > animationTimeout\r\n          ? TRANSITION\r\n          : ANIMATION\r\n        : null;\r\n      propCount = type\r\n        ? type === TRANSITION\r\n          ? transitionDurations.length\r\n          : animationDurations.length\r\n        : 0;\r\n    }\r\n    var hasTransform =\r\n      type === TRANSITION &&\r\n      transformRE.test(styles[transitionProp + 'Property']);\r\n    return {\r\n      type: type,\r\n      timeout: timeout,\r\n      propCount: propCount,\r\n      hasTransform: hasTransform\r\n    }\r\n  }\r\n\r\n  function getTimeout (delays, durations) {\r\n    /* istanbul ignore next */\r\n    while (delays.length < durations.length) {\r\n      delays = delays.concat(delays);\r\n    }\r\n\r\n    return Math.max.apply(null, durations.map(function (d, i) {\r\n      return toMs(d) + toMs(delays[i])\r\n    }))\r\n  }\r\n\r\n  // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\r\n  // in a locale-dependent way, using a comma instead of a dot.\r\n  // If comma is not replaced with a dot, the input will be rounded down (i.e. acting\r\n  // as a floor function) causing unexpected behaviors\r\n  function toMs (s) {\r\n    return Number(s.slice(0, -1).replace(',', '.')) * 1000\r\n  }\r\n\r\n  /*  */\r\n\r\n  function enter (vnode, toggleDisplay) {\r\n    var el = vnode.elm;\r\n\r\n    // call leave callback now\r\n    if (isDef(el._leaveCb)) {\r\n      el._leaveCb.cancelled = true;\r\n      el._leaveCb();\r\n    }\r\n\r\n    var data = resolveTransition(vnode.data.transition);\r\n    if (isUndef(data)) {\r\n      return\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (isDef(el._enterCb) || el.nodeType !== 1) {\r\n      return\r\n    }\r\n\r\n    var css = data.css;\r\n    var type = data.type;\r\n    var enterClass = data.enterClass;\r\n    var enterToClass = data.enterToClass;\r\n    var enterActiveClass = data.enterActiveClass;\r\n    var appearClass = data.appearClass;\r\n    var appearToClass = data.appearToClass;\r\n    var appearActiveClass = data.appearActiveClass;\r\n    var beforeEnter = data.beforeEnter;\r\n    var enter = data.enter;\r\n    var afterEnter = data.afterEnter;\r\n    var enterCancelled = data.enterCancelled;\r\n    var beforeAppear = data.beforeAppear;\r\n    var appear = data.appear;\r\n    var afterAppear = data.afterAppear;\r\n    var appearCancelled = data.appearCancelled;\r\n    var duration = data.duration;\r\n\r\n    // activeInstance will always be the <transition> component managing this\r\n    // transition. One edge case to check is when the <transition> is placed\r\n    // as the root node of a child component. In that case we need to check\r\n    // <transition>'s parent for appear check.\r\n    var context = activeInstance;\r\n    var transitionNode = activeInstance.$vnode;\r\n    while (transitionNode && transitionNode.parent) {\r\n      context = transitionNode.context;\r\n      transitionNode = transitionNode.parent;\r\n    }\r\n\r\n    var isAppear = !context._isMounted || !vnode.isRootInsert;\r\n\r\n    if (isAppear && !appear && appear !== '') {\r\n      return\r\n    }\r\n\r\n    var startClass = isAppear && appearClass\r\n      ? appearClass\r\n      : enterClass;\r\n    var activeClass = isAppear && appearActiveClass\r\n      ? appearActiveClass\r\n      : enterActiveClass;\r\n    var toClass = isAppear && appearToClass\r\n      ? appearToClass\r\n      : enterToClass;\r\n\r\n    var beforeEnterHook = isAppear\r\n      ? (beforeAppear || beforeEnter)\r\n      : beforeEnter;\r\n    var enterHook = isAppear\r\n      ? (typeof appear === 'function' ? appear : enter)\r\n      : enter;\r\n    var afterEnterHook = isAppear\r\n      ? (afterAppear || afterEnter)\r\n      : afterEnter;\r\n    var enterCancelledHook = isAppear\r\n      ? (appearCancelled || enterCancelled)\r\n      : enterCancelled;\r\n\r\n    var explicitEnterDuration = toNumber(\r\n      isObject(duration)\r\n        ? duration.enter\r\n        : duration\r\n    );\r\n\r\n    if (explicitEnterDuration != null) {\r\n      checkDuration(explicitEnterDuration, 'enter', vnode);\r\n    }\r\n\r\n    var expectsCSS = css !== false && !isIE9;\r\n    var userWantsControl = getHookArgumentsLength(enterHook);\r\n\r\n    var cb = el._enterCb = once(function () {\r\n      if (expectsCSS) {\r\n        removeTransitionClass(el, toClass);\r\n        removeTransitionClass(el, activeClass);\r\n      }\r\n      if (cb.cancelled) {\r\n        if (expectsCSS) {\r\n          removeTransitionClass(el, startClass);\r\n        }\r\n        enterCancelledHook && enterCancelledHook(el);\r\n      } else {\r\n        afterEnterHook && afterEnterHook(el);\r\n      }\r\n      el._enterCb = null;\r\n    });\r\n\r\n    if (!vnode.data.show) {\r\n      // remove pending leave element on enter by injecting an insert hook\r\n      mergeVNodeHook(vnode, 'insert', function () {\r\n        var parent = el.parentNode;\r\n        var pendingNode = parent && parent._pending && parent._pending[vnode.key];\r\n        if (pendingNode &&\r\n          pendingNode.tag === vnode.tag &&\r\n          pendingNode.elm._leaveCb\r\n        ) {\r\n          pendingNode.elm._leaveCb();\r\n        }\r\n        enterHook && enterHook(el, cb);\r\n      });\r\n    }\r\n\r\n    // start enter transition\r\n    beforeEnterHook && beforeEnterHook(el);\r\n    if (expectsCSS) {\r\n      addTransitionClass(el, startClass);\r\n      addTransitionClass(el, activeClass);\r\n      nextFrame(function () {\r\n        removeTransitionClass(el, startClass);\r\n        if (!cb.cancelled) {\r\n          addTransitionClass(el, toClass);\r\n          if (!userWantsControl) {\r\n            if (isValidDuration(explicitEnterDuration)) {\r\n              setTimeout(cb, explicitEnterDuration);\r\n            } else {\r\n              whenTransitionEnds(el, type, cb);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    if (vnode.data.show) {\r\n      toggleDisplay && toggleDisplay();\r\n      enterHook && enterHook(el, cb);\r\n    }\r\n\r\n    if (!expectsCSS && !userWantsControl) {\r\n      cb();\r\n    }\r\n  }\r\n\r\n  function leave (vnode, rm) {\r\n    var el = vnode.elm;\r\n\r\n    // call enter callback now\r\n    if (isDef(el._enterCb)) {\r\n      el._enterCb.cancelled = true;\r\n      el._enterCb();\r\n    }\r\n\r\n    var data = resolveTransition(vnode.data.transition);\r\n    if (isUndef(data) || el.nodeType !== 1) {\r\n      return rm()\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (isDef(el._leaveCb)) {\r\n      return\r\n    }\r\n\r\n    var css = data.css;\r\n    var type = data.type;\r\n    var leaveClass = data.leaveClass;\r\n    var leaveToClass = data.leaveToClass;\r\n    var leaveActiveClass = data.leaveActiveClass;\r\n    var beforeLeave = data.beforeLeave;\r\n    var leave = data.leave;\r\n    var afterLeave = data.afterLeave;\r\n    var leaveCancelled = data.leaveCancelled;\r\n    var delayLeave = data.delayLeave;\r\n    var duration = data.duration;\r\n\r\n    var expectsCSS = css !== false && !isIE9;\r\n    var userWantsControl = getHookArgumentsLength(leave);\r\n\r\n    var explicitLeaveDuration = toNumber(\r\n      isObject(duration)\r\n        ? duration.leave\r\n        : duration\r\n    );\r\n\r\n    if (isDef(explicitLeaveDuration)) {\r\n      checkDuration(explicitLeaveDuration, 'leave', vnode);\r\n    }\r\n\r\n    var cb = el._leaveCb = once(function () {\r\n      if (el.parentNode && el.parentNode._pending) {\r\n        el.parentNode._pending[vnode.key] = null;\r\n      }\r\n      if (expectsCSS) {\r\n        removeTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveActiveClass);\r\n      }\r\n      if (cb.cancelled) {\r\n        if (expectsCSS) {\r\n          removeTransitionClass(el, leaveClass);\r\n        }\r\n        leaveCancelled && leaveCancelled(el);\r\n      } else {\r\n        rm();\r\n        afterLeave && afterLeave(el);\r\n      }\r\n      el._leaveCb = null;\r\n    });\r\n\r\n    if (delayLeave) {\r\n      delayLeave(performLeave);\r\n    } else {\r\n      performLeave();\r\n    }\r\n\r\n    function performLeave () {\r\n      // the delayed leave may have already been cancelled\r\n      if (cb.cancelled) {\r\n        return\r\n      }\r\n      // record leaving element\r\n      if (!vnode.data.show && el.parentNode) {\r\n        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\r\n      }\r\n      beforeLeave && beforeLeave(el);\r\n      if (expectsCSS) {\r\n        addTransitionClass(el, leaveClass);\r\n        addTransitionClass(el, leaveActiveClass);\r\n        nextFrame(function () {\r\n          removeTransitionClass(el, leaveClass);\r\n          if (!cb.cancelled) {\r\n            addTransitionClass(el, leaveToClass);\r\n            if (!userWantsControl) {\r\n              if (isValidDuration(explicitLeaveDuration)) {\r\n                setTimeout(cb, explicitLeaveDuration);\r\n              } else {\r\n                whenTransitionEnds(el, type, cb);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      leave && leave(el, cb);\r\n      if (!expectsCSS && !userWantsControl) {\r\n        cb();\r\n      }\r\n    }\r\n  }\r\n\r\n  // only used in dev mode\r\n  function checkDuration (val, name, vnode) {\r\n    if (typeof val !== 'number') {\r\n      warn(\r\n        \"<transition> explicit \" + name + \" duration is not a valid number - \" +\r\n        \"got \" + (JSON.stringify(val)) + \".\",\r\n        vnode.context\r\n      );\r\n    } else if (isNaN(val)) {\r\n      warn(\r\n        \"<transition> explicit \" + name + \" duration is NaN - \" +\r\n        'the duration expression might be incorrect.',\r\n        vnode.context\r\n      );\r\n    }\r\n  }\r\n\r\n  function isValidDuration (val) {\r\n    return typeof val === 'number' && !isNaN(val)\r\n  }\r\n\r\n  /**\r\n   * Normalize a transition hook's argument length. The hook may be:\r\n   * - a merged hook (invoker) with the original in .fns\r\n   * - a wrapped component method (check ._length)\r\n   * - a plain function (.length)\r\n   */\r\n  function getHookArgumentsLength (fn) {\r\n    if (isUndef(fn)) {\r\n      return false\r\n    }\r\n    var invokerFns = fn.fns;\r\n    if (isDef(invokerFns)) {\r\n      // invoker\r\n      return getHookArgumentsLength(\r\n        Array.isArray(invokerFns)\r\n          ? invokerFns[0]\r\n          : invokerFns\r\n      )\r\n    } else {\r\n      return (fn._length || fn.length) > 1\r\n    }\r\n  }\r\n\r\n  function _enter (_, vnode) {\r\n    if (vnode.data.show !== true) {\r\n      enter(vnode);\r\n    }\r\n  }\r\n\r\n  var transition = inBrowser ? {\r\n    create: _enter,\r\n    activate: _enter,\r\n    remove: function remove$$1 (vnode, rm) {\r\n      /* istanbul ignore else */\r\n      if (vnode.data.show !== true) {\r\n        leave(vnode, rm);\r\n      } else {\r\n        rm();\r\n      }\r\n    }\r\n  } : {};\r\n\r\n  var platformModules = [\r\n    attrs,\r\n    klass,\r\n    events,\r\n    domProps,\r\n    style,\r\n    transition\r\n  ];\r\n\r\n  /*  */\r\n\r\n  // the directive module should be applied last, after all\r\n  // built-in modules have been applied.\r\n  var modules = platformModules.concat(baseModules);\r\n\r\n  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\r\n\r\n  /**\r\n   * Not type checking this file because flow doesn't like attaching\r\n   * properties to Elements.\r\n   */\r\n\r\n  /* istanbul ignore if */\r\n  if (isIE9) {\r\n    // http://www.matts411.com/post/internet-explorer-9-oninput/\r\n    document.addEventListener('selectionchange', function () {\r\n      var el = document.activeElement;\r\n      if (el && el.vmodel) {\r\n        trigger(el, 'input');\r\n      }\r\n    });\r\n  }\r\n\r\n  var directive = {\r\n    inserted: function inserted (el, binding, vnode, oldVnode) {\r\n      if (vnode.tag === 'select') {\r\n        // #6903\r\n        if (oldVnode.elm && !oldVnode.elm._vOptions) {\r\n          mergeVNodeHook(vnode, 'postpatch', function () {\r\n            directive.componentUpdated(el, binding, vnode);\r\n          });\r\n        } else {\r\n          setSelected(el, binding, vnode.context);\r\n        }\r\n        el._vOptions = [].map.call(el.options, getValue);\r\n      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\r\n        el._vModifiers = binding.modifiers;\r\n        if (!binding.modifiers.lazy) {\r\n          el.addEventListener('compositionstart', onCompositionStart);\r\n          el.addEventListener('compositionend', onCompositionEnd);\r\n          // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n          // switching focus before confirming composition choice\r\n          // this also fixes the issue where some browsers e.g. iOS Chrome\r\n          // fires \"change\" instead of \"input\" on autocomplete.\r\n          el.addEventListener('change', onCompositionEnd);\r\n          /* istanbul ignore if */\r\n          if (isIE9) {\r\n            el.vmodel = true;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    componentUpdated: function componentUpdated (el, binding, vnode) {\r\n      if (vnode.tag === 'select') {\r\n        setSelected(el, binding, vnode.context);\r\n        // in case the options rendered by v-for have changed,\r\n        // it's possible that the value is out-of-sync with the rendered options.\r\n        // detect such cases and filter out values that no longer has a matching\r\n        // option in the DOM.\r\n        var prevOptions = el._vOptions;\r\n        var curOptions = el._vOptions = [].map.call(el.options, getValue);\r\n        if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\r\n          // trigger change event if\r\n          // no matching option found for at least one value\r\n          var needReset = el.multiple\r\n            ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\r\n            : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\r\n          if (needReset) {\r\n            trigger(el, 'change');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  function setSelected (el, binding, vm) {\r\n    actuallySetSelected(el, binding, vm);\r\n    /* istanbul ignore if */\r\n    if (isIE || isEdge) {\r\n      setTimeout(function () {\r\n        actuallySetSelected(el, binding, vm);\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  function actuallySetSelected (el, binding, vm) {\r\n    var value = binding.value;\r\n    var isMultiple = el.multiple;\r\n    if (isMultiple && !Array.isArray(value)) {\r\n      warn(\r\n        \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\r\n        \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\r\n        vm\r\n      );\r\n      return\r\n    }\r\n    var selected, option;\r\n    for (var i = 0, l = el.options.length; i < l; i++) {\r\n      option = el.options[i];\r\n      if (isMultiple) {\r\n        selected = looseIndexOf(value, getValue(option)) > -1;\r\n        if (option.selected !== selected) {\r\n          option.selected = selected;\r\n        }\r\n      } else {\r\n        if (looseEqual(getValue(option), value)) {\r\n          if (el.selectedIndex !== i) {\r\n            el.selectedIndex = i;\r\n          }\r\n          return\r\n        }\r\n      }\r\n    }\r\n    if (!isMultiple) {\r\n      el.selectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  function hasNoMatchingOption (value, options) {\r\n    return options.every(function (o) { return !looseEqual(o, value); })\r\n  }\r\n\r\n  function getValue (option) {\r\n    return '_value' in option\r\n      ? option._value\r\n      : option.value\r\n  }\r\n\r\n  function onCompositionStart (e) {\r\n    e.target.composing = true;\r\n  }\r\n\r\n  function onCompositionEnd (e) {\r\n    // prevent triggering an input event for no reason\r\n    if (!e.target.composing) { return }\r\n    e.target.composing = false;\r\n    trigger(e.target, 'input');\r\n  }\r\n\r\n  function trigger (el, type) {\r\n    var e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n  }\r\n\r\n  /*  */\r\n\r\n  // recursively search for possible transition defined inside the component root\r\n  function locateNode (vnode) {\r\n    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\r\n      ? locateNode(vnode.componentInstance._vnode)\r\n      : vnode\r\n  }\r\n\r\n  var show = {\r\n    bind: function bind (el, ref, vnode) {\r\n      var value = ref.value;\r\n\r\n      vnode = locateNode(vnode);\r\n      var transition$$1 = vnode.data && vnode.data.transition;\r\n      var originalDisplay = el.__vOriginalDisplay =\r\n        el.style.display === 'none' ? '' : el.style.display;\r\n      if (value && transition$$1) {\r\n        vnode.data.show = true;\r\n        enter(vnode, function () {\r\n          el.style.display = originalDisplay;\r\n        });\r\n      } else {\r\n        el.style.display = value ? originalDisplay : 'none';\r\n      }\r\n    },\r\n\r\n    update: function update (el, ref, vnode) {\r\n      var value = ref.value;\r\n      var oldValue = ref.oldValue;\r\n\r\n      /* istanbul ignore if */\r\n      if (!value === !oldValue) { return }\r\n      vnode = locateNode(vnode);\r\n      var transition$$1 = vnode.data && vnode.data.transition;\r\n      if (transition$$1) {\r\n        vnode.data.show = true;\r\n        if (value) {\r\n          enter(vnode, function () {\r\n            el.style.display = el.__vOriginalDisplay;\r\n          });\r\n        } else {\r\n          leave(vnode, function () {\r\n            el.style.display = 'none';\r\n          });\r\n        }\r\n      } else {\r\n        el.style.display = value ? el.__vOriginalDisplay : 'none';\r\n      }\r\n    },\r\n\r\n    unbind: function unbind (\r\n      el,\r\n      binding,\r\n      vnode,\r\n      oldVnode,\r\n      isDestroy\r\n    ) {\r\n      if (!isDestroy) {\r\n        el.style.display = el.__vOriginalDisplay;\r\n      }\r\n    }\r\n  };\r\n\r\n  var platformDirectives = {\r\n    model: directive,\r\n    show: show\r\n  };\r\n\r\n  /*  */\r\n\r\n  var transitionProps = {\r\n    name: String,\r\n    appear: Boolean,\r\n    css: Boolean,\r\n    mode: String,\r\n    type: String,\r\n    enterClass: String,\r\n    leaveClass: String,\r\n    enterToClass: String,\r\n    leaveToClass: String,\r\n    enterActiveClass: String,\r\n    leaveActiveClass: String,\r\n    appearClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    duration: [Number, String, Object]\r\n  };\r\n\r\n  // in case the child is also an abstract component, e.g. <keep-alive>\r\n  // we want to recursively retrieve the real component to be rendered\r\n  function getRealChild (vnode) {\r\n    var compOptions = vnode && vnode.componentOptions;\r\n    if (compOptions && compOptions.Ctor.options.abstract) {\r\n      return getRealChild(getFirstComponentChild(compOptions.children))\r\n    } else {\r\n      return vnode\r\n    }\r\n  }\r\n\r\n  function extractTransitionData (comp) {\r\n    var data = {};\r\n    var options = comp.$options;\r\n    // props\r\n    for (var key in options.propsData) {\r\n      data[key] = comp[key];\r\n    }\r\n    // events.\r\n    // extract listeners and pass them directly to the transition methods\r\n    var listeners = options._parentListeners;\r\n    for (var key$1 in listeners) {\r\n      data[camelize(key$1)] = listeners[key$1];\r\n    }\r\n    return data\r\n  }\r\n\r\n  function placeholder (h, rawChild) {\r\n    if (/\\d-keep-alive$/.test(rawChild.tag)) {\r\n      return h('keep-alive', {\r\n        props: rawChild.componentOptions.propsData\r\n      })\r\n    }\r\n  }\r\n\r\n  function hasParentTransition (vnode) {\r\n    while ((vnode = vnode.parent)) {\r\n      if (vnode.data.transition) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  function isSameChild (child, oldChild) {\r\n    return oldChild.key === child.key && oldChild.tag === child.tag\r\n  }\r\n\r\n  var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\r\n\r\n  var isVShowDirective = function (d) { return d.name === 'show'; };\r\n\r\n  var Transition = {\r\n    name: 'transition',\r\n    props: transitionProps,\r\n    abstract: true,\r\n\r\n    render: function render (h) {\r\n      var this$1 = this;\r\n\r\n      var children = this.$slots.default;\r\n      if (!children) {\r\n        return\r\n      }\r\n\r\n      // filter out text nodes (possible whitespaces)\r\n      children = children.filter(isNotTextNode);\r\n      /* istanbul ignore if */\r\n      if (!children.length) {\r\n        return\r\n      }\r\n\r\n      // warn multiple elements\r\n      if (children.length > 1) {\r\n        warn(\r\n          '<transition> can only be used on a single element. Use ' +\r\n          '<transition-group> for lists.',\r\n          this.$parent\r\n        );\r\n      }\r\n\r\n      var mode = this.mode;\r\n\r\n      // warn invalid mode\r\n      if (mode && mode !== 'in-out' && mode !== 'out-in'\r\n      ) {\r\n        warn(\r\n          'invalid <transition> mode: ' + mode,\r\n          this.$parent\r\n        );\r\n      }\r\n\r\n      var rawChild = children[0];\r\n\r\n      // if this is a component root node and the component's\r\n      // parent container node also has transition, skip.\r\n      if (hasParentTransition(this.$vnode)) {\r\n        return rawChild\r\n      }\r\n\r\n      // apply transition data to child\r\n      // use getRealChild() to ignore abstract components e.g. keep-alive\r\n      var child = getRealChild(rawChild);\r\n      /* istanbul ignore if */\r\n      if (!child) {\r\n        return rawChild\r\n      }\r\n\r\n      if (this._leaving) {\r\n        return placeholder(h, rawChild)\r\n      }\r\n\r\n      // ensure a key that is unique to the vnode type and to this transition\r\n      // component instance. This key will be used to remove pending leaving nodes\r\n      // during entering.\r\n      var id = \"__transition-\" + (this._uid) + \"-\";\r\n      child.key = child.key == null\r\n        ? child.isComment\r\n          ? id + 'comment'\r\n          : id + child.tag\r\n        : isPrimitive(child.key)\r\n          ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\r\n          : child.key;\r\n\r\n      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\r\n      var oldRawChild = this._vnode;\r\n      var oldChild = getRealChild(oldRawChild);\r\n\r\n      // mark v-show\r\n      // so that the transition module can hand over the control to the directive\r\n      if (child.data.directives && child.data.directives.some(isVShowDirective)) {\r\n        child.data.show = true;\r\n      }\r\n\r\n      if (\r\n        oldChild &&\r\n        oldChild.data &&\r\n        !isSameChild(child, oldChild) &&\r\n        !isAsyncPlaceholder(oldChild) &&\r\n        // #6687 component root is a comment node\r\n        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\r\n      ) {\r\n        // replace old child transition data with fresh one\r\n        // important for dynamic transitions!\r\n        var oldData = oldChild.data.transition = extend({}, data);\r\n        // handle transition mode\r\n        if (mode === 'out-in') {\r\n          // return placeholder node and queue update when leave finishes\r\n          this._leaving = true;\r\n          mergeVNodeHook(oldData, 'afterLeave', function () {\r\n            this$1._leaving = false;\r\n            this$1.$forceUpdate();\r\n          });\r\n          return placeholder(h, rawChild)\r\n        } else if (mode === 'in-out') {\r\n          if (isAsyncPlaceholder(child)) {\r\n            return oldRawChild\r\n          }\r\n          var delayedLeave;\r\n          var performLeave = function () { delayedLeave(); };\r\n          mergeVNodeHook(data, 'afterEnter', performLeave);\r\n          mergeVNodeHook(data, 'enterCancelled', performLeave);\r\n          mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\r\n        }\r\n      }\r\n\r\n      return rawChild\r\n    }\r\n  };\r\n\r\n  /*  */\r\n\r\n  var props = extend({\r\n    tag: String,\r\n    moveClass: String\r\n  }, transitionProps);\r\n\r\n  delete props.mode;\r\n\r\n  var TransitionGroup = {\r\n    props: props,\r\n\r\n    beforeMount: function beforeMount () {\r\n      var this$1 = this;\r\n\r\n      var update = this._update;\r\n      this._update = function (vnode, hydrating) {\r\n        var restoreActiveInstance = setActiveInstance(this$1);\r\n        // force removing pass\r\n        this$1.__patch__(\r\n          this$1._vnode,\r\n          this$1.kept,\r\n          false, // hydrating\r\n          true // removeOnly (!important, avoids unnecessary moves)\r\n        );\r\n        this$1._vnode = this$1.kept;\r\n        restoreActiveInstance();\r\n        update.call(this$1, vnode, hydrating);\r\n      };\r\n    },\r\n\r\n    render: function render (h) {\r\n      var tag = this.tag || this.$vnode.data.tag || 'span';\r\n      var map = Object.create(null);\r\n      var prevChildren = this.prevChildren = this.children;\r\n      var rawChildren = this.$slots.default || [];\r\n      var children = this.children = [];\r\n      var transitionData = extractTransitionData(this);\r\n\r\n      for (var i = 0; i < rawChildren.length; i++) {\r\n        var c = rawChildren[i];\r\n        if (c.tag) {\r\n          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\r\n            children.push(c);\r\n            map[c.key] = c\r\n            ;(c.data || (c.data = {})).transition = transitionData;\r\n          } else {\r\n            var opts = c.componentOptions;\r\n            var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\r\n            warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\r\n          }\r\n        }\r\n      }\r\n\r\n      if (prevChildren) {\r\n        var kept = [];\r\n        var removed = [];\r\n        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\r\n          var c$1 = prevChildren[i$1];\r\n          c$1.data.transition = transitionData;\r\n          c$1.data.pos = c$1.elm.getBoundingClientRect();\r\n          if (map[c$1.key]) {\r\n            kept.push(c$1);\r\n          } else {\r\n            removed.push(c$1);\r\n          }\r\n        }\r\n        this.kept = h(tag, null, kept);\r\n        this.removed = removed;\r\n      }\r\n\r\n      return h(tag, null, children)\r\n    },\r\n\r\n    updated: function updated () {\r\n      var children = this.prevChildren;\r\n      var moveClass = this.moveClass || ((this.name || 'v') + '-move');\r\n      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\r\n        return\r\n      }\r\n\r\n      // we divide the work into three loops to avoid mixing DOM reads and writes\r\n      // in each iteration - which helps prevent layout thrashing.\r\n      children.forEach(callPendingCbs);\r\n      children.forEach(recordPosition);\r\n      children.forEach(applyTranslation);\r\n\r\n      // force reflow to put everything in position\r\n      // assign to this to avoid being removed in tree-shaking\r\n      // $flow-disable-line\r\n      this._reflow = document.body.offsetHeight;\r\n\r\n      children.forEach(function (c) {\r\n        if (c.data.moved) {\r\n          var el = c.elm;\r\n          var s = el.style;\r\n          addTransitionClass(el, moveClass);\r\n          s.transform = s.WebkitTransform = s.transitionDuration = '';\r\n          el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\r\n            if (e && e.target !== el) {\r\n              return\r\n            }\r\n            if (!e || /transform$/.test(e.propertyName)) {\r\n              el.removeEventListener(transitionEndEvent, cb);\r\n              el._moveCb = null;\r\n              removeTransitionClass(el, moveClass);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    methods: {\r\n      hasMove: function hasMove (el, moveClass) {\r\n        /* istanbul ignore if */\r\n        if (!hasTransition) {\r\n          return false\r\n        }\r\n        /* istanbul ignore if */\r\n        if (this._hasMove) {\r\n          return this._hasMove\r\n        }\r\n        // Detect whether an element with the move class applied has\r\n        // CSS transitions. Since the element may be inside an entering\r\n        // transition at this very moment, we make a clone of it and remove\r\n        // all other transition classes applied to ensure only the move class\r\n        // is applied.\r\n        var clone = el.cloneNode();\r\n        if (el._transitionClasses) {\r\n          el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\r\n        }\r\n        addClass(clone, moveClass);\r\n        clone.style.display = 'none';\r\n        this.$el.appendChild(clone);\r\n        var info = getTransitionInfo(clone);\r\n        this.$el.removeChild(clone);\r\n        return (this._hasMove = info.hasTransform)\r\n      }\r\n    }\r\n  };\r\n\r\n  function callPendingCbs (c) {\r\n    /* istanbul ignore if */\r\n    if (c.elm._moveCb) {\r\n      c.elm._moveCb();\r\n    }\r\n    /* istanbul ignore if */\r\n    if (c.elm._enterCb) {\r\n      c.elm._enterCb();\r\n    }\r\n  }\r\n\r\n  function recordPosition (c) {\r\n    c.data.newPos = c.elm.getBoundingClientRect();\r\n  }\r\n\r\n  function applyTranslation (c) {\r\n    var oldPos = c.data.pos;\r\n    var newPos = c.data.newPos;\r\n    var dx = oldPos.left - newPos.left;\r\n    var dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n      c.data.moved = true;\r\n      var s = c.elm.style;\r\n      s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\r\n      s.transitionDuration = '0s';\r\n    }\r\n  }\r\n\r\n  var platformComponents = {\r\n    Transition: Transition,\r\n    TransitionGroup: TransitionGroup\r\n  };\r\n\r\n  /*  */\r\n\r\n  // install platform specific utils\r\n  Vue.config.mustUseProp = mustUseProp;\r\n  Vue.config.isReservedTag = isReservedTag;\r\n  Vue.config.isReservedAttr = isReservedAttr;\r\n  Vue.config.getTagNamespace = getTagNamespace;\r\n  Vue.config.isUnknownElement = isUnknownElement;\r\n\r\n  // install platform runtime directives & components\r\n  extend(Vue.options.directives, platformDirectives);\r\n  extend(Vue.options.components, platformComponents);\r\n\r\n  // install platform patch function\r\n  Vue.prototype.__patch__ = inBrowser ? patch : noop;\r\n\r\n  // public mount method\r\n  Vue.prototype.$mount = function (\r\n    el,\r\n    hydrating\r\n  ) {\r\n    el = el && inBrowser ? query(el) : undefined;\r\n    return mountComponent(this, el, hydrating)\r\n  };\r\n\r\n  // devtools global hook\r\n  /* istanbul ignore next */\r\n  if (inBrowser) {\r\n    setTimeout(function () {\r\n      if (config.devtools) {\r\n        if (devtools) {\r\n          devtools.emit('init', Vue);\r\n        } else {\r\n          console[console.info ? 'info' : 'log'](\r\n            'Download the Vue Devtools extension for a better development experience:\\n' +\r\n            'https://github.com/vuejs/vue-devtools'\r\n          );\r\n        }\r\n      }\r\n      if (config.productionTip !== false &&\r\n        typeof console !== 'undefined'\r\n      ) {\r\n        console[console.info ? 'info' : 'log'](\r\n          \"You are running Vue in development mode.\\n\" +\r\n          \"Make sure to turn on production mode when deploying for production.\\n\" +\r\n          \"See more tips at https://vuejs.org/guide/deployment.html\"\r\n        );\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /*  */\r\n\r\n  var defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\n  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\n\r\n  var buildRegex = cached(function (delimiters) {\r\n    var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\r\n    var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\r\n    return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\r\n  });\r\n\r\n\r\n\r\n  function parseText (\r\n    text,\r\n    delimiters\r\n  ) {\r\n    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\r\n    if (!tagRE.test(text)) {\r\n      return\r\n    }\r\n    var tokens = [];\r\n    var rawTokens = [];\r\n    var lastIndex = tagRE.lastIndex = 0;\r\n    var match, index, tokenValue;\r\n    while ((match = tagRE.exec(text))) {\r\n      index = match.index;\r\n      // push text token\r\n      if (index > lastIndex) {\r\n        rawTokens.push(tokenValue = text.slice(lastIndex, index));\r\n        tokens.push(JSON.stringify(tokenValue));\r\n      }\r\n      // tag token\r\n      var exp = parseFilters(match[1].trim());\r\n      tokens.push((\"_s(\" + exp + \")\"));\r\n      rawTokens.push({ '@binding': exp });\r\n      lastIndex = index + match[0].length;\r\n    }\r\n    if (lastIndex < text.length) {\r\n      rawTokens.push(tokenValue = text.slice(lastIndex));\r\n      tokens.push(JSON.stringify(tokenValue));\r\n    }\r\n    return {\r\n      expression: tokens.join('+'),\r\n      tokens: rawTokens\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function transformNode (el, options) {\r\n    var warn = options.warn || baseWarn;\r\n    var staticClass = getAndRemoveAttr(el, 'class');\r\n    if (staticClass) {\r\n      var res = parseText(staticClass, options.delimiters);\r\n      if (res) {\r\n        warn(\r\n          \"class=\\\"\" + staticClass + \"\\\": \" +\r\n          'Interpolation inside attributes has been removed. ' +\r\n          'Use v-bind or the colon shorthand instead. For example, ' +\r\n          'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.',\r\n          el.rawAttrsMap['class']\r\n        );\r\n      }\r\n    }\r\n    if (staticClass) {\r\n      el.staticClass = JSON.stringify(staticClass);\r\n    }\r\n    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\r\n    if (classBinding) {\r\n      el.classBinding = classBinding;\r\n    }\r\n  }\r\n\r\n  function genData (el) {\r\n    var data = '';\r\n    if (el.staticClass) {\r\n      data += \"staticClass:\" + (el.staticClass) + \",\";\r\n    }\r\n    if (el.classBinding) {\r\n      data += \"class:\" + (el.classBinding) + \",\";\r\n    }\r\n    return data\r\n  }\r\n\r\n  var klass$1 = {\r\n    staticKeys: ['staticClass'],\r\n    transformNode: transformNode,\r\n    genData: genData\r\n  };\r\n\r\n  /*  */\r\n\r\n  function transformNode$1 (el, options) {\r\n    var warn = options.warn || baseWarn;\r\n    var staticStyle = getAndRemoveAttr(el, 'style');\r\n    if (staticStyle) {\r\n      /* istanbul ignore if */\r\n      {\r\n        var res = parseText(staticStyle, options.delimiters);\r\n        if (res) {\r\n          warn(\r\n            \"style=\\\"\" + staticStyle + \"\\\": \" +\r\n            'Interpolation inside attributes has been removed. ' +\r\n            'Use v-bind or the colon shorthand instead. For example, ' +\r\n            'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.',\r\n            el.rawAttrsMap['style']\r\n          );\r\n        }\r\n      }\r\n      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\r\n    }\r\n\r\n    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\r\n    if (styleBinding) {\r\n      el.styleBinding = styleBinding;\r\n    }\r\n  }\r\n\r\n  function genData$1 (el) {\r\n    var data = '';\r\n    if (el.staticStyle) {\r\n      data += \"staticStyle:\" + (el.staticStyle) + \",\";\r\n    }\r\n    if (el.styleBinding) {\r\n      data += \"style:(\" + (el.styleBinding) + \"),\";\r\n    }\r\n    return data\r\n  }\r\n\r\n  var style$1 = {\r\n    staticKeys: ['staticStyle'],\r\n    transformNode: transformNode$1,\r\n    genData: genData$1\r\n  };\r\n\r\n  /*  */\r\n\r\n  var decoder;\r\n\r\n  var he = {\r\n    decode: function decode (html) {\r\n      decoder = decoder || document.createElement('div');\r\n      decoder.innerHTML = html;\r\n      return decoder.textContent\r\n    }\r\n  };\r\n\r\n  /*  */\r\n\r\n  var isUnaryTag = makeMap(\r\n    'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\r\n    'link,meta,param,source,track,wbr'\r\n  );\r\n\r\n  // Elements that you can, intentionally, leave open\r\n  // (and which close themselves)\r\n  var canBeLeftOpenTag = makeMap(\r\n    'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\r\n  );\r\n\r\n  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\r\n  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\r\n  var isNonPhrasingTag = makeMap(\r\n    'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\r\n    'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\r\n    'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\r\n    'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\r\n    'title,tr,track'\r\n  );\r\n\r\n  /**\r\n   * Not type-checking this file because it's mostly vendor code.\r\n   */\r\n\r\n  // Regular Expressions for parsing tags and attributes\r\n  var attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\n  var dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\n  var ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\" + (unicodeRegExp.source) + \"]*\";\r\n  var qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\r\n  var startTagOpen = new RegExp((\"^<\" + qnameCapture));\r\n  var startTagClose = /^\\s*(\\/?)>/;\r\n  var endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\r\n  var doctype = /^<!DOCTYPE [^>]+>/i;\r\n  // #7298: escape - to avoid being passed as HTML comment when inlined in page\r\n  var comment = /^<!\\--/;\r\n  var conditionalComment = /^<!\\[/;\r\n\r\n  // Special Elements (can contain anything)\r\n  var isPlainTextElement = makeMap('script,style,textarea', true);\r\n  var reCache = {};\r\n\r\n  var decodingMap = {\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&quot;': '\"',\r\n    '&amp;': '&',\r\n    '&#10;': '\\n',\r\n    '&#9;': '\\t',\r\n    '&#39;': \"'\"\r\n  };\r\n  var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\r\n  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\r\n\r\n  // #5992\r\n  var isIgnoreNewlineTag = makeMap('pre,textarea', true);\r\n  var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\r\n\r\n  function decodeAttr (value, shouldDecodeNewlines) {\r\n    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\r\n    return value.replace(re, function (match) { return decodingMap[match]; })\r\n  }\r\n\r\n  function parseHTML (html, options) {\r\n    var stack = [];\r\n    var expectHTML = options.expectHTML;\r\n    var isUnaryTag$$1 = options.isUnaryTag || no;\r\n    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\r\n    var index = 0;\r\n    var last, lastTag;\r\n    while (html) {\r\n      last = html;\r\n      // Make sure we're not in a plaintext content element like script/style\r\n      if (!lastTag || !isPlainTextElement(lastTag)) {\r\n        var textEnd = html.indexOf('<');\r\n        if (textEnd === 0) {\r\n          // Comment:\r\n          if (comment.test(html)) {\r\n            var commentEnd = html.indexOf('-->');\r\n\r\n            if (commentEnd >= 0) {\r\n              if (options.shouldKeepComment) {\r\n                options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\r\n              }\r\n              advance(commentEnd + 3);\r\n              continue\r\n            }\r\n          }\r\n\r\n          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\r\n          if (conditionalComment.test(html)) {\r\n            var conditionalEnd = html.indexOf(']>');\r\n\r\n            if (conditionalEnd >= 0) {\r\n              advance(conditionalEnd + 2);\r\n              continue\r\n            }\r\n          }\r\n\r\n          // Doctype:\r\n          var doctypeMatch = html.match(doctype);\r\n          if (doctypeMatch) {\r\n            advance(doctypeMatch[0].length);\r\n            continue\r\n          }\r\n\r\n          // End tag:\r\n          var endTagMatch = html.match(endTag);\r\n          if (endTagMatch) {\r\n            var curIndex = index;\r\n            advance(endTagMatch[0].length);\r\n            parseEndTag(endTagMatch[1], curIndex, index);\r\n            continue\r\n          }\r\n\r\n          // Start tag:\r\n          var startTagMatch = parseStartTag();\r\n          if (startTagMatch) {\r\n            handleStartTag(startTagMatch);\r\n            if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\r\n              advance(1);\r\n            }\r\n            continue\r\n          }\r\n        }\r\n\r\n        var text = (void 0), rest = (void 0), next = (void 0);\r\n        if (textEnd >= 0) {\r\n          rest = html.slice(textEnd);\r\n          while (\r\n            !endTag.test(rest) &&\r\n            !startTagOpen.test(rest) &&\r\n            !comment.test(rest) &&\r\n            !conditionalComment.test(rest)\r\n          ) {\r\n            // < in plain text, be forgiving and treat it as text\r\n            next = rest.indexOf('<', 1);\r\n            if (next < 0) { break }\r\n            textEnd += next;\r\n            rest = html.slice(textEnd);\r\n          }\r\n          text = html.substring(0, textEnd);\r\n        }\r\n\r\n        if (textEnd < 0) {\r\n          text = html;\r\n        }\r\n\r\n        if (text) {\r\n          advance(text.length);\r\n        }\r\n\r\n        if (options.chars && text) {\r\n          options.chars(text, index - text.length, index);\r\n        }\r\n      } else {\r\n        var endTagLength = 0;\r\n        var stackedTag = lastTag.toLowerCase();\r\n        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\r\n        var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\r\n          endTagLength = endTag.length;\r\n          if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\r\n            text = text\r\n              .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\r\n              .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\r\n          }\r\n          if (shouldIgnoreFirstNewline(stackedTag, text)) {\r\n            text = text.slice(1);\r\n          }\r\n          if (options.chars) {\r\n            options.chars(text);\r\n          }\r\n          return ''\r\n        });\r\n        index += html.length - rest$1.length;\r\n        html = rest$1;\r\n        parseEndTag(stackedTag, index - endTagLength, index);\r\n      }\r\n\r\n      if (html === last) {\r\n        options.chars && options.chars(html);\r\n        if (!stack.length && options.warn) {\r\n          options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"), { start: index + html.length });\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    // Clean up any remaining tags\r\n    parseEndTag();\r\n\r\n    function advance (n) {\r\n      index += n;\r\n      html = html.substring(n);\r\n    }\r\n\r\n    function parseStartTag () {\r\n      var start = html.match(startTagOpen);\r\n      if (start) {\r\n        var match = {\r\n          tagName: start[1],\r\n          attrs: [],\r\n          start: index\r\n        };\r\n        advance(start[0].length);\r\n        var end, attr;\r\n        while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\r\n          attr.start = index;\r\n          advance(attr[0].length);\r\n          attr.end = index;\r\n          match.attrs.push(attr);\r\n        }\r\n        if (end) {\r\n          match.unarySlash = end[1];\r\n          advance(end[0].length);\r\n          match.end = index;\r\n          return match\r\n        }\r\n      }\r\n    }\r\n\r\n    function handleStartTag (match) {\r\n      var tagName = match.tagName;\r\n      var unarySlash = match.unarySlash;\r\n\r\n      if (expectHTML) {\r\n        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\r\n          parseEndTag(lastTag);\r\n        }\r\n        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\r\n          parseEndTag(tagName);\r\n        }\r\n      }\r\n\r\n      var unary = isUnaryTag$$1(tagName) || !!unarySlash;\r\n\r\n      var l = match.attrs.length;\r\n      var attrs = new Array(l);\r\n      for (var i = 0; i < l; i++) {\r\n        var args = match.attrs[i];\r\n        var value = args[3] || args[4] || args[5] || '';\r\n        var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\r\n          ? options.shouldDecodeNewlinesForHref\r\n          : options.shouldDecodeNewlines;\r\n        attrs[i] = {\r\n          name: args[1],\r\n          value: decodeAttr(value, shouldDecodeNewlines)\r\n        };\r\n        if (options.outputSourceRange) {\r\n          attrs[i].start = args.start + args[0].match(/^\\s*/).length;\r\n          attrs[i].end = args.end;\r\n        }\r\n      }\r\n\r\n      if (!unary) {\r\n        stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });\r\n        lastTag = tagName;\r\n      }\r\n\r\n      if (options.start) {\r\n        options.start(tagName, attrs, unary, match.start, match.end);\r\n      }\r\n    }\r\n\r\n    function parseEndTag (tagName, start, end) {\r\n      var pos, lowerCasedTagName;\r\n      if (start == null) { start = index; }\r\n      if (end == null) { end = index; }\r\n\r\n      // Find the closest opened tag of the same type\r\n      if (tagName) {\r\n        lowerCasedTagName = tagName.toLowerCase();\r\n        for (pos = stack.length - 1; pos >= 0; pos--) {\r\n          if (stack[pos].lowerCasedTag === lowerCasedTagName) {\r\n            break\r\n          }\r\n        }\r\n      } else {\r\n        // If no tag name is provided, clean shop\r\n        pos = 0;\r\n      }\r\n\r\n      if (pos >= 0) {\r\n        // Close all the open elements, up the stack\r\n        for (var i = stack.length - 1; i >= pos; i--) {\r\n          if (i > pos || !tagName &&\r\n            options.warn\r\n          ) {\r\n            options.warn(\r\n              (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\"),\r\n              { start: stack[i].start, end: stack[i].end }\r\n            );\r\n          }\r\n          if (options.end) {\r\n            options.end(stack[i].tag, start, end);\r\n          }\r\n        }\r\n\r\n        // Remove the open elements from the stack\r\n        stack.length = pos;\r\n        lastTag = pos && stack[pos - 1].tag;\r\n      } else if (lowerCasedTagName === 'br') {\r\n        if (options.start) {\r\n          options.start(tagName, [], true, start, end);\r\n        }\r\n      } else if (lowerCasedTagName === 'p') {\r\n        if (options.start) {\r\n          options.start(tagName, [], false, start, end);\r\n        }\r\n        if (options.end) {\r\n          options.end(tagName, start, end);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var onRE = /^@|^v-on:/;\r\n  var dirRE = /^v-|^@|^:|^#/;\r\n  var forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\n  var forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\n  var stripParensRE = /^\\(|\\)$/g;\r\n  var dynamicArgRE = /^\\[.*\\]$/;\r\n\r\n  var argRE = /:(.*)$/;\r\n  var bindRE = /^:|^\\.|^v-bind:/;\r\n  var modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\r\n\r\n  var slotRE = /^v-slot(:|$)|^#/;\r\n\r\n  var lineBreakRE = /[\\r\\n]/;\r\n  var whitespaceRE$1 = /\\s+/g;\r\n\r\n  var invalidAttributeRE = /[\\s\"'<>\\/=]/;\r\n\r\n  var decodeHTMLCached = cached(he.decode);\r\n\r\n  var emptySlotScopeToken = \"_empty_\";\r\n\r\n  // configurable state\r\n  var warn$2;\r\n  var delimiters;\r\n  var transforms;\r\n  var preTransforms;\r\n  var postTransforms;\r\n  var platformIsPreTag;\r\n  var platformMustUseProp;\r\n  var platformGetTagNamespace;\r\n  var maybeComponent;\r\n\r\n  function createASTElement (\r\n    tag,\r\n    attrs,\r\n    parent\r\n  ) {\r\n    return {\r\n      type: 1,\r\n      tag: tag,\r\n      attrsList: attrs,\r\n      attrsMap: makeAttrsMap(attrs),\r\n      rawAttrsMap: {},\r\n      parent: parent,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert HTML string to AST.\r\n   */\r\n  function parse (\r\n    template,\r\n    options\r\n  ) {\r\n    warn$2 = options.warn || baseWarn;\r\n\r\n    platformIsPreTag = options.isPreTag || no;\r\n    platformMustUseProp = options.mustUseProp || no;\r\n    platformGetTagNamespace = options.getTagNamespace || no;\r\n    var isReservedTag = options.isReservedTag || no;\r\n    maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\r\n\r\n    transforms = pluckModuleFunction(options.modules, 'transformNode');\r\n    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\r\n    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\r\n\r\n    delimiters = options.delimiters;\r\n\r\n    var stack = [];\r\n    var preserveWhitespace = options.preserveWhitespace !== false;\r\n    var whitespaceOption = options.whitespace;\r\n    var root;\r\n    var currentParent;\r\n    var inVPre = false;\r\n    var inPre = false;\r\n    var warned = false;\r\n\r\n    function warnOnce (msg, range) {\r\n      if (!warned) {\r\n        warned = true;\r\n        warn$2(msg, range);\r\n      }\r\n    }\r\n\r\n    function closeElement (element) {\r\n      trimEndingWhitespace(element);\r\n      if (!inVPre && !element.processed) {\r\n        element = processElement(element, options);\r\n      }\r\n      // tree management\r\n      if (!stack.length && element !== root) {\r\n        // allow root elements with v-if, v-else-if and v-else\r\n        if (root.if && (element.elseif || element.else)) {\r\n          {\r\n            checkRootConstraints(element);\r\n          }\r\n          addIfCondition(root, {\r\n            exp: element.elseif,\r\n            block: element\r\n          });\r\n        } else {\r\n          warnOnce(\r\n            \"Component template should contain exactly one root element. \" +\r\n            \"If you are using v-if on multiple elements, \" +\r\n            \"use v-else-if to chain them instead.\",\r\n            { start: element.start }\r\n          );\r\n        }\r\n      }\r\n      if (currentParent && !element.forbidden) {\r\n        if (element.elseif || element.else) {\r\n          processIfConditions(element, currentParent);\r\n        } else {\r\n          if (element.slotScope) {\r\n            // scoped slot\r\n            // keep it in the children list so that v-else(-if) conditions can\r\n            // find it as the prev node.\r\n            var name = element.slotTarget || '\"default\"'\r\n            ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\r\n          }\r\n          currentParent.children.push(element);\r\n          element.parent = currentParent;\r\n        }\r\n      }\r\n\r\n      // final children cleanup\r\n      // filter out scoped slots\r\n      element.children = element.children.filter(function (c) { return !(c).slotScope; });\r\n      // remove trailing whitespace node again\r\n      trimEndingWhitespace(element);\r\n\r\n      // check pre state\r\n      if (element.pre) {\r\n        inVPre = false;\r\n      }\r\n      if (platformIsPreTag(element.tag)) {\r\n        inPre = false;\r\n      }\r\n      // apply post-transforms\r\n      for (var i = 0; i < postTransforms.length; i++) {\r\n        postTransforms[i](element, options);\r\n      }\r\n    }\r\n\r\n    function trimEndingWhitespace (el) {\r\n      // remove trailing whitespace node\r\n      if (!inPre) {\r\n        var lastNode;\r\n        while (\r\n          (lastNode = el.children[el.children.length - 1]) &&\r\n          lastNode.type === 3 &&\r\n          lastNode.text === ' '\r\n        ) {\r\n          el.children.pop();\r\n        }\r\n      }\r\n    }\r\n\r\n    function checkRootConstraints (el) {\r\n      if (el.tag === 'slot' || el.tag === 'template') {\r\n        warnOnce(\r\n          \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\r\n          'contain multiple nodes.',\r\n          { start: el.start }\r\n        );\r\n      }\r\n      if (el.attrsMap.hasOwnProperty('v-for')) {\r\n        warnOnce(\r\n          'Cannot use v-for on stateful component root element because ' +\r\n          'it renders multiple elements.',\r\n          el.rawAttrsMap['v-for']\r\n        );\r\n      }\r\n    }\r\n\r\n    parseHTML(template, {\r\n      warn: warn$2,\r\n      expectHTML: options.expectHTML,\r\n      isUnaryTag: options.isUnaryTag,\r\n      canBeLeftOpenTag: options.canBeLeftOpenTag,\r\n      shouldDecodeNewlines: options.shouldDecodeNewlines,\r\n      shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\r\n      shouldKeepComment: options.comments,\r\n      outputSourceRange: options.outputSourceRange,\r\n      start: function start (tag, attrs, unary, start$1, end) {\r\n        // check namespace.\r\n        // inherit parent ns if there is one\r\n        var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\r\n\r\n        // handle IE svg bug\r\n        /* istanbul ignore if */\r\n        if (isIE && ns === 'svg') {\r\n          attrs = guardIESVGBug(attrs);\r\n        }\r\n\r\n        var element = createASTElement(tag, attrs, currentParent);\r\n        if (ns) {\r\n          element.ns = ns;\r\n        }\r\n\r\n        {\r\n          if (options.outputSourceRange) {\r\n            element.start = start$1;\r\n            element.end = end;\r\n            element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\r\n              cumulated[attr.name] = attr;\r\n              return cumulated\r\n            }, {});\r\n          }\r\n          attrs.forEach(function (attr) {\r\n            if (invalidAttributeRE.test(attr.name)) {\r\n              warn$2(\r\n                \"Invalid dynamic argument expression: attribute names cannot contain \" +\r\n                \"spaces, quotes, <, >, / or =.\",\r\n                {\r\n                  start: attr.start + attr.name.indexOf(\"[\"),\r\n                  end: attr.start + attr.name.length\r\n                }\r\n              );\r\n            }\r\n          });\r\n        }\r\n\r\n        if (isForbiddenTag(element) && !isServerRendering()) {\r\n          element.forbidden = true;\r\n          warn$2(\r\n            'Templates should only be responsible for mapping the state to the ' +\r\n            'UI. Avoid placing tags with side-effects in your templates, such as ' +\r\n            \"<\" + tag + \">\" + ', as they will not be parsed.',\r\n            { start: element.start }\r\n          );\r\n        }\r\n\r\n        // apply pre-transforms\r\n        for (var i = 0; i < preTransforms.length; i++) {\r\n          element = preTransforms[i](element, options) || element;\r\n        }\r\n\r\n        if (!inVPre) {\r\n          processPre(element);\r\n          if (element.pre) {\r\n            inVPre = true;\r\n          }\r\n        }\r\n        if (platformIsPreTag(element.tag)) {\r\n          inPre = true;\r\n        }\r\n        if (inVPre) {\r\n          processRawAttrs(element);\r\n        } else if (!element.processed) {\r\n          // structural directives\r\n          processFor(element);\r\n          processIf(element);\r\n          processOnce(element);\r\n        }\r\n\r\n        if (!root) {\r\n          root = element;\r\n          {\r\n            checkRootConstraints(root);\r\n          }\r\n        }\r\n\r\n        if (!unary) {\r\n          currentParent = element;\r\n          stack.push(element);\r\n        } else {\r\n          closeElement(element);\r\n        }\r\n      },\r\n\r\n      end: function end (tag, start, end$1) {\r\n        var element = stack[stack.length - 1];\r\n        // pop stack\r\n        stack.length -= 1;\r\n        currentParent = stack[stack.length - 1];\r\n        if (options.outputSourceRange) {\r\n          element.end = end$1;\r\n        }\r\n        closeElement(element);\r\n      },\r\n\r\n      chars: function chars (text, start, end) {\r\n        if (!currentParent) {\r\n          {\r\n            if (text === template) {\r\n              warnOnce(\r\n                'Component template requires a root element, rather than just text.',\r\n                { start: start }\r\n              );\r\n            } else if ((text = text.trim())) {\r\n              warnOnce(\r\n                (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\"),\r\n                { start: start }\r\n              );\r\n            }\r\n          }\r\n          return\r\n        }\r\n        // IE textarea placeholder bug\r\n        /* istanbul ignore if */\r\n        if (isIE &&\r\n          currentParent.tag === 'textarea' &&\r\n          currentParent.attrsMap.placeholder === text\r\n        ) {\r\n          return\r\n        }\r\n        var children = currentParent.children;\r\n        if (inPre || text.trim()) {\r\n          text = isTextTag(currentParent) ? text : decodeHTMLCached(text);\r\n        } else if (!children.length) {\r\n          // remove the whitespace-only node right after an opening tag\r\n          text = '';\r\n        } else if (whitespaceOption) {\r\n          if (whitespaceOption === 'condense') {\r\n            // in condense mode, remove the whitespace node if it contains\r\n            // line break, otherwise condense to a single space\r\n            text = lineBreakRE.test(text) ? '' : ' ';\r\n          } else {\r\n            text = ' ';\r\n          }\r\n        } else {\r\n          text = preserveWhitespace ? ' ' : '';\r\n        }\r\n        if (text) {\r\n          if (!inPre && whitespaceOption === 'condense') {\r\n            // condense consecutive whitespaces into single space\r\n            text = text.replace(whitespaceRE$1, ' ');\r\n          }\r\n          var res;\r\n          var child;\r\n          if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\r\n            child = {\r\n              type: 2,\r\n              expression: res.expression,\r\n              tokens: res.tokens,\r\n              text: text\r\n            };\r\n          } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\r\n            child = {\r\n              type: 3,\r\n              text: text\r\n            };\r\n          }\r\n          if (child) {\r\n            if (options.outputSourceRange) {\r\n              child.start = start;\r\n              child.end = end;\r\n            }\r\n            children.push(child);\r\n          }\r\n        }\r\n      },\r\n      comment: function comment (text, start, end) {\r\n        // adding anything as a sibling to the root node is forbidden\r\n        // comments should still be allowed, but ignored\r\n        if (currentParent) {\r\n          var child = {\r\n            type: 3,\r\n            text: text,\r\n            isComment: true\r\n          };\r\n          if (options.outputSourceRange) {\r\n            child.start = start;\r\n            child.end = end;\r\n          }\r\n          currentParent.children.push(child);\r\n        }\r\n      }\r\n    });\r\n    return root\r\n  }\r\n\r\n  function processPre (el) {\r\n    if (getAndRemoveAttr(el, 'v-pre') != null) {\r\n      el.pre = true;\r\n    }\r\n  }\r\n\r\n  function processRawAttrs (el) {\r\n    var list = el.attrsList;\r\n    var len = list.length;\r\n    if (len) {\r\n      var attrs = el.attrs = new Array(len);\r\n      for (var i = 0; i < len; i++) {\r\n        attrs[i] = {\r\n          name: list[i].name,\r\n          value: JSON.stringify(list[i].value)\r\n        };\r\n        if (list[i].start != null) {\r\n          attrs[i].start = list[i].start;\r\n          attrs[i].end = list[i].end;\r\n        }\r\n      }\r\n    } else if (!el.pre) {\r\n      // non root node in pre blocks with no attributes\r\n      el.plain = true;\r\n    }\r\n  }\r\n\r\n  function processElement (\r\n    element,\r\n    options\r\n  ) {\r\n    processKey(element);\r\n\r\n    // determine whether this is a plain element after\r\n    // removing structural attributes\r\n    element.plain = (\r\n      !element.key &&\r\n      !element.scopedSlots &&\r\n      !element.attrsList.length\r\n    );\r\n\r\n    processRef(element);\r\n    processSlotContent(element);\r\n    processSlotOutlet(element);\r\n    processComponent(element);\r\n    for (var i = 0; i < transforms.length; i++) {\r\n      element = transforms[i](element, options) || element;\r\n    }\r\n    processAttrs(element);\r\n    return element\r\n  }\r\n\r\n  function processKey (el) {\r\n    var exp = getBindingAttr(el, 'key');\r\n    if (exp) {\r\n      {\r\n        if (el.tag === 'template') {\r\n          warn$2(\r\n            \"<template> cannot be keyed. Place the key on real elements instead.\",\r\n            getRawBindingAttr(el, 'key')\r\n          );\r\n        }\r\n        if (el.for) {\r\n          var iterator = el.iterator2 || el.iterator1;\r\n          var parent = el.parent;\r\n          if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {\r\n            warn$2(\r\n              \"Do not use v-for index as key on <transition-group> children, \" +\r\n              \"this is the same as not using keys.\",\r\n              getRawBindingAttr(el, 'key'),\r\n              true /* tip */\r\n            );\r\n          }\r\n        }\r\n      }\r\n      el.key = exp;\r\n    }\r\n  }\r\n\r\n  function processRef (el) {\r\n    var ref = getBindingAttr(el, 'ref');\r\n    if (ref) {\r\n      el.ref = ref;\r\n      el.refInFor = checkInFor(el);\r\n    }\r\n  }\r\n\r\n  function processFor (el) {\r\n    var exp;\r\n    if ((exp = getAndRemoveAttr(el, 'v-for'))) {\r\n      var res = parseFor(exp);\r\n      if (res) {\r\n        extend(el, res);\r\n      } else {\r\n        warn$2(\r\n          (\"Invalid v-for expression: \" + exp),\r\n          el.rawAttrsMap['v-for']\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  function parseFor (exp) {\r\n    var inMatch = exp.match(forAliasRE);\r\n    if (!inMatch) { return }\r\n    var res = {};\r\n    res.for = inMatch[2].trim();\r\n    var alias = inMatch[1].trim().replace(stripParensRE, '');\r\n    var iteratorMatch = alias.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n      res.alias = alias.replace(forIteratorRE, '').trim();\r\n      res.iterator1 = iteratorMatch[1].trim();\r\n      if (iteratorMatch[2]) {\r\n        res.iterator2 = iteratorMatch[2].trim();\r\n      }\r\n    } else {\r\n      res.alias = alias;\r\n    }\r\n    return res\r\n  }\r\n\r\n  function processIf (el) {\r\n    var exp = getAndRemoveAttr(el, 'v-if');\r\n    if (exp) {\r\n      el.if = exp;\r\n      addIfCondition(el, {\r\n        exp: exp,\r\n        block: el\r\n      });\r\n    } else {\r\n      if (getAndRemoveAttr(el, 'v-else') != null) {\r\n        el.else = true;\r\n      }\r\n      var elseif = getAndRemoveAttr(el, 'v-else-if');\r\n      if (elseif) {\r\n        el.elseif = elseif;\r\n      }\r\n    }\r\n  }\r\n\r\n  function processIfConditions (el, parent) {\r\n    var prev = findPrevElement(parent.children);\r\n    if (prev && prev.if) {\r\n      addIfCondition(prev, {\r\n        exp: el.elseif,\r\n        block: el\r\n      });\r\n    } else {\r\n      warn$2(\r\n        \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\r\n        \"used on element <\" + (el.tag) + \"> without corresponding v-if.\",\r\n        el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']\r\n      );\r\n    }\r\n  }\r\n\r\n  function findPrevElement (children) {\r\n    var i = children.length;\r\n    while (i--) {\r\n      if (children[i].type === 1) {\r\n        return children[i]\r\n      } else {\r\n        if (children[i].text !== ' ') {\r\n          warn$2(\r\n            \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\r\n            \"will be ignored.\",\r\n            children[i]\r\n          );\r\n        }\r\n        children.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  function addIfCondition (el, condition) {\r\n    if (!el.ifConditions) {\r\n      el.ifConditions = [];\r\n    }\r\n    el.ifConditions.push(condition);\r\n  }\r\n\r\n  function processOnce (el) {\r\n    var once$$1 = getAndRemoveAttr(el, 'v-once');\r\n    if (once$$1 != null) {\r\n      el.once = true;\r\n    }\r\n  }\r\n\r\n  // handle content being passed to a component as slot,\r\n  // e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\r\n  function processSlotContent (el) {\r\n    var slotScope;\r\n    if (el.tag === 'template') {\r\n      slotScope = getAndRemoveAttr(el, 'scope');\r\n      /* istanbul ignore if */\r\n      if (slotScope) {\r\n        warn$2(\r\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\r\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\r\n          \"can also be used on plain elements in addition to <template> to \" +\r\n          \"denote scoped slots.\",\r\n          el.rawAttrsMap['scope'],\r\n          true\r\n        );\r\n      }\r\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\r\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\r\n      /* istanbul ignore if */\r\n      if (el.attrsMap['v-for']) {\r\n        warn$2(\r\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\r\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\r\n          \"scoped slot to make it clearer.\",\r\n          el.rawAttrsMap['slot-scope'],\r\n          true\r\n        );\r\n      }\r\n      el.slotScope = slotScope;\r\n    }\r\n\r\n    // slot=\"xxx\"\r\n    var slotTarget = getBindingAttr(el, 'slot');\r\n    if (slotTarget) {\r\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\r\n      el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\r\n      // preserve slot as an attribute for native shadow DOM compat\r\n      // only for non-scoped slots.\r\n      if (el.tag !== 'template' && !el.slotScope) {\r\n        addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\r\n      }\r\n    }\r\n\r\n    // 2.6 v-slot syntax\r\n    {\r\n      if (el.tag === 'template') {\r\n        // v-slot on <template>\r\n        var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\r\n        if (slotBinding) {\r\n          {\r\n            if (el.slotTarget || el.slotScope) {\r\n              warn$2(\r\n                \"Unexpected mixed usage of different slot syntaxes.\",\r\n                el\r\n              );\r\n            }\r\n            if (el.parent && !maybeComponent(el.parent)) {\r\n              warn$2(\r\n                \"<template v-slot> can only appear at the root level inside \" +\r\n                \"the receiving component\",\r\n                el\r\n              );\r\n            }\r\n          }\r\n          var ref = getSlotName(slotBinding);\r\n          var name = ref.name;\r\n          var dynamic = ref.dynamic;\r\n          el.slotTarget = name;\r\n          el.slotTargetDynamic = dynamic;\r\n          el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\r\n        }\r\n      } else {\r\n        // v-slot on component, denotes default slot\r\n        var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);\r\n        if (slotBinding$1) {\r\n          {\r\n            if (!maybeComponent(el)) {\r\n              warn$2(\r\n                \"v-slot can only be used on components or <template>.\",\r\n                slotBinding$1\r\n              );\r\n            }\r\n            if (el.slotScope || el.slotTarget) {\r\n              warn$2(\r\n                \"Unexpected mixed usage of different slot syntaxes.\",\r\n                el\r\n              );\r\n            }\r\n            if (el.scopedSlots) {\r\n              warn$2(\r\n                \"To avoid scope ambiguity, the default slot should also use \" +\r\n                \"<template> syntax when there are other named slots.\",\r\n                slotBinding$1\r\n              );\r\n            }\r\n          }\r\n          // add the component's children to its default slot\r\n          var slots = el.scopedSlots || (el.scopedSlots = {});\r\n          var ref$1 = getSlotName(slotBinding$1);\r\n          var name$1 = ref$1.name;\r\n          var dynamic$1 = ref$1.dynamic;\r\n          var slotContainer = slots[name$1] = createASTElement('template', [], el);\r\n          slotContainer.slotTarget = name$1;\r\n          slotContainer.slotTargetDynamic = dynamic$1;\r\n          slotContainer.children = el.children.filter(function (c) {\r\n            if (!c.slotScope) {\r\n              c.parent = slotContainer;\r\n              return true\r\n            }\r\n          });\r\n          slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;\r\n          // remove children as they are returned from scopedSlots now\r\n          el.children = [];\r\n          // mark el non-plain so data gets generated\r\n          el.plain = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function getSlotName (binding) {\r\n    var name = binding.name.replace(slotRE, '');\r\n    if (!name) {\r\n      if (binding.name[0] !== '#') {\r\n        name = 'default';\r\n      } else {\r\n        warn$2(\r\n          \"v-slot shorthand syntax requires a slot name.\",\r\n          binding\r\n        );\r\n      }\r\n    }\r\n    return dynamicArgRE.test(name)\r\n      // dynamic [name]\r\n      ? { name: name.slice(1, -1), dynamic: true }\r\n      // static name\r\n      : { name: (\"\\\"\" + name + \"\\\"\"), dynamic: false }\r\n  }\r\n\r\n  // handle <slot/> outlets\r\n  function processSlotOutlet (el) {\r\n    if (el.tag === 'slot') {\r\n      el.slotName = getBindingAttr(el, 'name');\r\n      if (el.key) {\r\n        warn$2(\r\n          \"`key` does not work on <slot> because slots are abstract outlets \" +\r\n          \"and can possibly expand into multiple elements. \" +\r\n          \"Use the key on a wrapping element instead.\",\r\n          getRawBindingAttr(el, 'key')\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  function processComponent (el) {\r\n    var binding;\r\n    if ((binding = getBindingAttr(el, 'is'))) {\r\n      el.component = binding;\r\n    }\r\n    if (getAndRemoveAttr(el, 'inline-template') != null) {\r\n      el.inlineTemplate = true;\r\n    }\r\n  }\r\n\r\n  function processAttrs (el) {\r\n    var list = el.attrsList;\r\n    var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\r\n    for (i = 0, l = list.length; i < l; i++) {\r\n      name = rawName = list[i].name;\r\n      value = list[i].value;\r\n      if (dirRE.test(name)) {\r\n        // mark element as dynamic\r\n        el.hasBindings = true;\r\n        // modifiers\r\n        modifiers = parseModifiers(name.replace(dirRE, ''));\r\n        // support .foo shorthand syntax for the .prop modifier\r\n        if (modifiers) {\r\n          name = name.replace(modifierRE, '');\r\n        }\r\n        if (bindRE.test(name)) { // v-bind\r\n          name = name.replace(bindRE, '');\r\n          value = parseFilters(value);\r\n          isDynamic = dynamicArgRE.test(name);\r\n          if (isDynamic) {\r\n            name = name.slice(1, -1);\r\n          }\r\n          if (\r\n            value.trim().length === 0\r\n          ) {\r\n            warn$2(\r\n              (\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\" + name + \"\\\"\")\r\n            );\r\n          }\r\n          if (modifiers) {\r\n            if (modifiers.prop && !isDynamic) {\r\n              name = camelize(name);\r\n              if (name === 'innerHtml') { name = 'innerHTML'; }\r\n            }\r\n            if (modifiers.camel && !isDynamic) {\r\n              name = camelize(name);\r\n            }\r\n            if (modifiers.sync) {\r\n              syncGen = genAssignmentCode(value, \"$event\");\r\n              if (!isDynamic) {\r\n                addHandler(\r\n                  el,\r\n                  (\"update:\" + (camelize(name))),\r\n                  syncGen,\r\n                  null,\r\n                  false,\r\n                  warn$2,\r\n                  list[i]\r\n                );\r\n                if (hyphenate(name) !== camelize(name)) {\r\n                  addHandler(\r\n                    el,\r\n                    (\"update:\" + (hyphenate(name))),\r\n                    syncGen,\r\n                    null,\r\n                    false,\r\n                    warn$2,\r\n                    list[i]\r\n                  );\r\n                }\r\n              } else {\r\n                // handler w/ dynamic event name\r\n                addHandler(\r\n                  el,\r\n                  (\"\\\"update:\\\"+(\" + name + \")\"),\r\n                  syncGen,\r\n                  null,\r\n                  false,\r\n                  warn$2,\r\n                  list[i],\r\n                  true // dynamic\r\n                );\r\n              }\r\n            }\r\n          }\r\n          if ((modifiers && modifiers.prop) || (\r\n            !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\r\n          )) {\r\n            addProp(el, name, value, list[i], isDynamic);\r\n          } else {\r\n            addAttr(el, name, value, list[i], isDynamic);\r\n          }\r\n        } else if (onRE.test(name)) { // v-on\r\n          name = name.replace(onRE, '');\r\n          isDynamic = dynamicArgRE.test(name);\r\n          if (isDynamic) {\r\n            name = name.slice(1, -1);\r\n          }\r\n          addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);\r\n        } else { // normal directives\r\n          name = name.replace(dirRE, '');\r\n          // parse arg\r\n          var argMatch = name.match(argRE);\r\n          var arg = argMatch && argMatch[1];\r\n          isDynamic = false;\r\n          if (arg) {\r\n            name = name.slice(0, -(arg.length + 1));\r\n            if (dynamicArgRE.test(arg)) {\r\n              arg = arg.slice(1, -1);\r\n              isDynamic = true;\r\n            }\r\n          }\r\n          addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\r\n          if (name === 'model') {\r\n            checkForAliasModel(el, value);\r\n          }\r\n        }\r\n      } else {\r\n        // literal attribute\r\n        {\r\n          var res = parseText(value, delimiters);\r\n          if (res) {\r\n            warn$2(\r\n              name + \"=\\\"\" + value + \"\\\": \" +\r\n              'Interpolation inside attributes has been removed. ' +\r\n              'Use v-bind or the colon shorthand instead. For example, ' +\r\n              'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.',\r\n              list[i]\r\n            );\r\n          }\r\n        }\r\n        addAttr(el, name, JSON.stringify(value), list[i]);\r\n        // #6887 firefox doesn't update muted state if set via attribute\r\n        // even immediately after element creation\r\n        if (!el.component &&\r\n            name === 'muted' &&\r\n            platformMustUseProp(el.tag, el.attrsMap.type, name)) {\r\n          addProp(el, name, 'true', list[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkInFor (el) {\r\n    var parent = el;\r\n    while (parent) {\r\n      if (parent.for !== undefined) {\r\n        return true\r\n      }\r\n      parent = parent.parent;\r\n    }\r\n    return false\r\n  }\r\n\r\n  function parseModifiers (name) {\r\n    var match = name.match(modifierRE);\r\n    if (match) {\r\n      var ret = {};\r\n      match.forEach(function (m) { ret[m.slice(1)] = true; });\r\n      return ret\r\n    }\r\n  }\r\n\r\n  function makeAttrsMap (attrs) {\r\n    var map = {};\r\n    for (var i = 0, l = attrs.length; i < l; i++) {\r\n      if (\r\n        map[attrs[i].name] && !isIE && !isEdge\r\n      ) {\r\n        warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);\r\n      }\r\n      map[attrs[i].name] = attrs[i].value;\r\n    }\r\n    return map\r\n  }\r\n\r\n  // for script (e.g. type=\"x/template\") or style, do not decode content\r\n  function isTextTag (el) {\r\n    return el.tag === 'script' || el.tag === 'style'\r\n  }\r\n\r\n  function isForbiddenTag (el) {\r\n    return (\r\n      el.tag === 'style' ||\r\n      (el.tag === 'script' && (\r\n        !el.attrsMap.type ||\r\n        el.attrsMap.type === 'text/javascript'\r\n      ))\r\n    )\r\n  }\r\n\r\n  var ieNSBug = /^xmlns:NS\\d+/;\r\n  var ieNSPrefix = /^NS\\d+:/;\r\n\r\n  /* istanbul ignore next */\r\n  function guardIESVGBug (attrs) {\r\n    var res = [];\r\n    for (var i = 0; i < attrs.length; i++) {\r\n      var attr = attrs[i];\r\n      if (!ieNSBug.test(attr.name)) {\r\n        attr.name = attr.name.replace(ieNSPrefix, '');\r\n        res.push(attr);\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  function checkForAliasModel (el, value) {\r\n    var _el = el;\r\n    while (_el) {\r\n      if (_el.for && _el.alias === value) {\r\n        warn$2(\r\n          \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\r\n          \"You are binding v-model directly to a v-for iteration alias. \" +\r\n          \"This will not be able to modify the v-for source array because \" +\r\n          \"writing to the alias is like modifying a function local variable. \" +\r\n          \"Consider using an array of objects and use v-model on an object property instead.\",\r\n          el.rawAttrsMap['v-model']\r\n        );\r\n      }\r\n      _el = _el.parent;\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function preTransformNode (el, options) {\r\n    if (el.tag === 'input') {\r\n      var map = el.attrsMap;\r\n      if (!map['v-model']) {\r\n        return\r\n      }\r\n\r\n      var typeBinding;\r\n      if (map[':type'] || map['v-bind:type']) {\r\n        typeBinding = getBindingAttr(el, 'type');\r\n      }\r\n      if (!map.type && !typeBinding && map['v-bind']) {\r\n        typeBinding = \"(\" + (map['v-bind']) + \").type\";\r\n      }\r\n\r\n      if (typeBinding) {\r\n        var ifCondition = getAndRemoveAttr(el, 'v-if', true);\r\n        var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\r\n        var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\r\n        var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\r\n        // 1. checkbox\r\n        var branch0 = cloneASTElement(el);\r\n        // process for on the main node\r\n        processFor(branch0);\r\n        addRawAttr(branch0, 'type', 'checkbox');\r\n        processElement(branch0, options);\r\n        branch0.processed = true; // prevent it from double-processed\r\n        branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\r\n        addIfCondition(branch0, {\r\n          exp: branch0.if,\r\n          block: branch0\r\n        });\r\n        // 2. add radio else-if condition\r\n        var branch1 = cloneASTElement(el);\r\n        getAndRemoveAttr(branch1, 'v-for', true);\r\n        addRawAttr(branch1, 'type', 'radio');\r\n        processElement(branch1, options);\r\n        addIfCondition(branch0, {\r\n          exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\r\n          block: branch1\r\n        });\r\n        // 3. other\r\n        var branch2 = cloneASTElement(el);\r\n        getAndRemoveAttr(branch2, 'v-for', true);\r\n        addRawAttr(branch2, ':type', typeBinding);\r\n        processElement(branch2, options);\r\n        addIfCondition(branch0, {\r\n          exp: ifCondition,\r\n          block: branch2\r\n        });\r\n\r\n        if (hasElse) {\r\n          branch0.else = true;\r\n        } else if (elseIfCondition) {\r\n          branch0.elseif = elseIfCondition;\r\n        }\r\n\r\n        return branch0\r\n      }\r\n    }\r\n  }\r\n\r\n  function cloneASTElement (el) {\r\n    return createASTElement(el.tag, el.attrsList.slice(), el.parent)\r\n  }\r\n\r\n  var model$1 = {\r\n    preTransformNode: preTransformNode\r\n  };\r\n\r\n  var modules$1 = [\r\n    klass$1,\r\n    style$1,\r\n    model$1\r\n  ];\r\n\r\n  /*  */\r\n\r\n  function text (el, dir) {\r\n    if (dir.value) {\r\n      addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"), dir);\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function html (el, dir) {\r\n    if (dir.value) {\r\n      addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"), dir);\r\n    }\r\n  }\r\n\r\n  var directives$1 = {\r\n    model: model,\r\n    text: text,\r\n    html: html\r\n  };\r\n\r\n  /*  */\r\n\r\n  var baseOptions = {\r\n    expectHTML: true,\r\n    modules: modules$1,\r\n    directives: directives$1,\r\n    isPreTag: isPreTag,\r\n    isUnaryTag: isUnaryTag,\r\n    mustUseProp: mustUseProp,\r\n    canBeLeftOpenTag: canBeLeftOpenTag,\r\n    isReservedTag: isReservedTag,\r\n    getTagNamespace: getTagNamespace,\r\n    staticKeys: genStaticKeys(modules$1)\r\n  };\r\n\r\n  /*  */\r\n\r\n  var isStaticKey;\r\n  var isPlatformReservedTag;\r\n\r\n  var genStaticKeysCached = cached(genStaticKeys$1);\r\n\r\n  /**\r\n   * Goal of the optimizer: walk the generated template AST tree\r\n   * and detect sub-trees that are purely static, i.e. parts of\r\n   * the DOM that never needs to change.\r\n   *\r\n   * Once we detect these sub-trees, we can:\r\n   *\r\n   * 1. Hoist them into constants, so that we no longer need to\r\n   *    create fresh nodes for them on each re-render;\r\n   * 2. Completely skip them in the patching process.\r\n   */\r\n  function optimize (root, options) {\r\n    if (!root) { return }\r\n    isStaticKey = genStaticKeysCached(options.staticKeys || '');\r\n    isPlatformReservedTag = options.isReservedTag || no;\r\n    // first pass: mark all non-static nodes.\r\n    markStatic$1(root);\r\n    // second pass: mark static roots.\r\n    markStaticRoots(root, false);\r\n  }\r\n\r\n  function genStaticKeys$1 (keys) {\r\n    return makeMap(\r\n      'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\r\n      (keys ? ',' + keys : '')\r\n    )\r\n  }\r\n\r\n  function markStatic$1 (node) {\r\n    node.static = isStatic(node);\r\n    if (node.type === 1) {\r\n      // do not make component slot content static. this avoids\r\n      // 1. components not able to mutate slot nodes\r\n      // 2. static slot content fails for hot-reloading\r\n      if (\r\n        !isPlatformReservedTag(node.tag) &&\r\n        node.tag !== 'slot' &&\r\n        node.attrsMap['inline-template'] == null\r\n      ) {\r\n        return\r\n      }\r\n      for (var i = 0, l = node.children.length; i < l; i++) {\r\n        var child = node.children[i];\r\n        markStatic$1(child);\r\n        if (!child.static) {\r\n          node.static = false;\r\n        }\r\n      }\r\n      if (node.ifConditions) {\r\n        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\r\n          var block = node.ifConditions[i$1].block;\r\n          markStatic$1(block);\r\n          if (!block.static) {\r\n            node.static = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function markStaticRoots (node, isInFor) {\r\n    if (node.type === 1) {\r\n      if (node.static || node.once) {\r\n        node.staticInFor = isInFor;\r\n      }\r\n      // For a node to qualify as a static root, it should have children that\r\n      // are not just static text. Otherwise the cost of hoisting out will\r\n      // outweigh the benefits and it's better off to just always render it fresh.\r\n      if (node.static && node.children.length && !(\r\n        node.children.length === 1 &&\r\n        node.children[0].type === 3\r\n      )) {\r\n        node.staticRoot = true;\r\n        return\r\n      } else {\r\n        node.staticRoot = false;\r\n      }\r\n      if (node.children) {\r\n        for (var i = 0, l = node.children.length; i < l; i++) {\r\n          markStaticRoots(node.children[i], isInFor || !!node.for);\r\n        }\r\n      }\r\n      if (node.ifConditions) {\r\n        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\r\n          markStaticRoots(node.ifConditions[i$1].block, isInFor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function isStatic (node) {\r\n    if (node.type === 2) { // expression\r\n      return false\r\n    }\r\n    if (node.type === 3) { // text\r\n      return true\r\n    }\r\n    return !!(node.pre || (\r\n      !node.hasBindings && // no dynamic bindings\r\n      !node.if && !node.for && // not v-if or v-for or v-else\r\n      !isBuiltInTag(node.tag) && // not a built-in\r\n      isPlatformReservedTag(node.tag) && // not a component\r\n      !isDirectChildOfTemplateFor(node) &&\r\n      Object.keys(node).every(isStaticKey)\r\n    ))\r\n  }\r\n\r\n  function isDirectChildOfTemplateFor (node) {\r\n    while (node.parent) {\r\n      node = node.parent;\r\n      if (node.tag !== 'template') {\r\n        return false\r\n      }\r\n      if (node.for) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /*  */\r\n\r\n  var fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\r\n  var fnInvokeRE = /\\([^)]*?\\);*$/;\r\n  var simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\r\n\r\n  // KeyboardEvent.keyCode aliases\r\n  var keyCodes = {\r\n    esc: 27,\r\n    tab: 9,\r\n    enter: 13,\r\n    space: 32,\r\n    up: 38,\r\n    left: 37,\r\n    right: 39,\r\n    down: 40,\r\n    'delete': [8, 46]\r\n  };\r\n\r\n  // KeyboardEvent.key aliases\r\n  var keyNames = {\r\n    // #7880: IE11 and Edge use `Esc` for Escape key name.\r\n    esc: ['Esc', 'Escape'],\r\n    tab: 'Tab',\r\n    enter: 'Enter',\r\n    // #9112: IE11 uses `Spacebar` for Space key name.\r\n    space: [' ', 'Spacebar'],\r\n    // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\r\n    up: ['Up', 'ArrowUp'],\r\n    left: ['Left', 'ArrowLeft'],\r\n    right: ['Right', 'ArrowRight'],\r\n    down: ['Down', 'ArrowDown'],\r\n    // #9112: IE11 uses `Del` for Delete key name.\r\n    'delete': ['Backspace', 'Delete', 'Del']\r\n  };\r\n\r\n  // #4868: modifiers that prevent the execution of the listener\r\n  // need to explicitly return null so that we can determine whether to remove\r\n  // the listener for .once\r\n  var genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\r\n\r\n  var modifierCode = {\r\n    stop: '$event.stopPropagation();',\r\n    prevent: '$event.preventDefault();',\r\n    self: genGuard(\"$event.target !== $event.currentTarget\"),\r\n    ctrl: genGuard(\"!$event.ctrlKey\"),\r\n    shift: genGuard(\"!$event.shiftKey\"),\r\n    alt: genGuard(\"!$event.altKey\"),\r\n    meta: genGuard(\"!$event.metaKey\"),\r\n    left: genGuard(\"'button' in $event && $event.button !== 0\"),\r\n    middle: genGuard(\"'button' in $event && $event.button !== 1\"),\r\n    right: genGuard(\"'button' in $event && $event.button !== 2\")\r\n  };\r\n\r\n  function genHandlers (\r\n    events,\r\n    isNative\r\n  ) {\r\n    var prefix = isNative ? 'nativeOn:' : 'on:';\r\n    var staticHandlers = \"\";\r\n    var dynamicHandlers = \"\";\r\n    for (var name in events) {\r\n      var handlerCode = genHandler(events[name]);\r\n      if (events[name] && events[name].dynamic) {\r\n        dynamicHandlers += name + \",\" + handlerCode + \",\";\r\n      } else {\r\n        staticHandlers += \"\\\"\" + name + \"\\\":\" + handlerCode + \",\";\r\n      }\r\n    }\r\n    staticHandlers = \"{\" + (staticHandlers.slice(0, -1)) + \"}\";\r\n    if (dynamicHandlers) {\r\n      return prefix + \"_d(\" + staticHandlers + \",[\" + (dynamicHandlers.slice(0, -1)) + \"])\"\r\n    } else {\r\n      return prefix + staticHandlers\r\n    }\r\n  }\r\n\r\n  function genHandler (handler) {\r\n    if (!handler) {\r\n      return 'function(){}'\r\n    }\r\n\r\n    if (Array.isArray(handler)) {\r\n      return (\"[\" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + \"]\")\r\n    }\r\n\r\n    var isMethodPath = simplePathRE.test(handler.value);\r\n    var isFunctionExpression = fnExpRE.test(handler.value);\r\n    var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\r\n\r\n    if (!handler.modifiers) {\r\n      if (isMethodPath || isFunctionExpression) {\r\n        return handler.value\r\n      }\r\n      return (\"function($event){\" + (isFunctionInvocation ? (\"return \" + (handler.value)) : handler.value) + \"}\") // inline statement\r\n    } else {\r\n      var code = '';\r\n      var genModifierCode = '';\r\n      var keys = [];\r\n      for (var key in handler.modifiers) {\r\n        if (modifierCode[key]) {\r\n          genModifierCode += modifierCode[key];\r\n          // left/right\r\n          if (keyCodes[key]) {\r\n            keys.push(key);\r\n          }\r\n        } else if (key === 'exact') {\r\n          var modifiers = (handler.modifiers);\r\n          genModifierCode += genGuard(\r\n            ['ctrl', 'shift', 'alt', 'meta']\r\n              .filter(function (keyModifier) { return !modifiers[keyModifier]; })\r\n              .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\r\n              .join('||')\r\n          );\r\n        } else {\r\n          keys.push(key);\r\n        }\r\n      }\r\n      if (keys.length) {\r\n        code += genKeyFilter(keys);\r\n      }\r\n      // Make sure modifiers like prevent and stop get executed after key filtering\r\n      if (genModifierCode) {\r\n        code += genModifierCode;\r\n      }\r\n      var handlerCode = isMethodPath\r\n        ? (\"return \" + (handler.value) + \"($event)\")\r\n        : isFunctionExpression\r\n          ? (\"return (\" + (handler.value) + \")($event)\")\r\n          : isFunctionInvocation\r\n            ? (\"return \" + (handler.value))\r\n            : handler.value;\r\n      return (\"function($event){\" + code + handlerCode + \"}\")\r\n    }\r\n  }\r\n\r\n  function genKeyFilter (keys) {\r\n    return (\r\n      // make sure the key filters only apply to KeyboardEvents\r\n      // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\r\n      // key events that do not have keyCode property...\r\n      \"if(!$event.type.indexOf('key')&&\" +\r\n      (keys.map(genFilterCode).join('&&')) + \")return null;\"\r\n    )\r\n  }\r\n\r\n  function genFilterCode (key) {\r\n    var keyVal = parseInt(key, 10);\r\n    if (keyVal) {\r\n      return (\"$event.keyCode!==\" + keyVal)\r\n    }\r\n    var keyCode = keyCodes[key];\r\n    var keyName = keyNames[key];\r\n    return (\r\n      \"_k($event.keyCode,\" +\r\n      (JSON.stringify(key)) + \",\" +\r\n      (JSON.stringify(keyCode)) + \",\" +\r\n      \"$event.key,\" +\r\n      \"\" + (JSON.stringify(keyName)) +\r\n      \")\"\r\n    )\r\n  }\r\n\r\n  /*  */\r\n\r\n  function on (el, dir) {\r\n    if (dir.modifiers) {\r\n      warn(\"v-on without argument does not support modifiers.\");\r\n    }\r\n    el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\r\n  }\r\n\r\n  /*  */\r\n\r\n  function bind$1 (el, dir) {\r\n    el.wrapData = function (code) {\r\n      return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\r\n    };\r\n  }\r\n\r\n  /*  */\r\n\r\n  var baseDirectives = {\r\n    on: on,\r\n    bind: bind$1,\r\n    cloak: noop\r\n  };\r\n\r\n  /*  */\r\n\r\n\r\n\r\n\r\n\r\n  var CodegenState = function CodegenState (options) {\r\n    this.options = options;\r\n    this.warn = options.warn || baseWarn;\r\n    this.transforms = pluckModuleFunction(options.modules, 'transformCode');\r\n    this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\r\n    this.directives = extend(extend({}, baseDirectives), options.directives);\r\n    var isReservedTag = options.isReservedTag || no;\r\n    this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\r\n    this.onceId = 0;\r\n    this.staticRenderFns = [];\r\n    this.pre = false;\r\n  };\r\n\r\n\r\n\r\n  function generate (\r\n    ast,\r\n    options\r\n  ) {\r\n    var state = new CodegenState(options);\r\n    var code = ast ? genElement(ast, state) : '_c(\"div\")';\r\n    return {\r\n      render: (\"with(this){return \" + code + \"}\"),\r\n      staticRenderFns: state.staticRenderFns\r\n    }\r\n  }\r\n\r\n  function genElement (el, state) {\r\n    if (el.parent) {\r\n      el.pre = el.pre || el.parent.pre;\r\n    }\r\n\r\n    if (el.staticRoot && !el.staticProcessed) {\r\n      return genStatic(el, state)\r\n    } else if (el.once && !el.onceProcessed) {\r\n      return genOnce(el, state)\r\n    } else if (el.for && !el.forProcessed) {\r\n      return genFor(el, state)\r\n    } else if (el.if && !el.ifProcessed) {\r\n      return genIf(el, state)\r\n    } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\r\n      return genChildren(el, state) || 'void 0'\r\n    } else if (el.tag === 'slot') {\r\n      return genSlot(el, state)\r\n    } else {\r\n      // component or element\r\n      var code;\r\n      if (el.component) {\r\n        code = genComponent(el.component, el, state);\r\n      } else {\r\n        var data;\r\n        if (!el.plain || (el.pre && state.maybeComponent(el))) {\r\n          data = genData$2(el, state);\r\n        }\r\n\r\n        var children = el.inlineTemplate ? null : genChildren(el, state, true);\r\n        code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\r\n      }\r\n      // module transforms\r\n      for (var i = 0; i < state.transforms.length; i++) {\r\n        code = state.transforms[i](el, code);\r\n      }\r\n      return code\r\n    }\r\n  }\r\n\r\n  // hoist static sub-trees out\r\n  function genStatic (el, state) {\r\n    el.staticProcessed = true;\r\n    // Some elements (templates) need to behave differently inside of a v-pre\r\n    // node.  All pre nodes are static roots, so we can use this as a location to\r\n    // wrap a state change and reset it upon exiting the pre node.\r\n    var originalPreState = state.pre;\r\n    if (el.pre) {\r\n      state.pre = el.pre;\r\n    }\r\n    state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\r\n    state.pre = originalPreState;\r\n    return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\r\n  }\r\n\r\n  // v-once\r\n  function genOnce (el, state) {\r\n    el.onceProcessed = true;\r\n    if (el.if && !el.ifProcessed) {\r\n      return genIf(el, state)\r\n    } else if (el.staticInFor) {\r\n      var key = '';\r\n      var parent = el.parent;\r\n      while (parent) {\r\n        if (parent.for) {\r\n          key = parent.key;\r\n          break\r\n        }\r\n        parent = parent.parent;\r\n      }\r\n      if (!key) {\r\n        state.warn(\r\n          \"v-once can only be used inside v-for that is keyed. \",\r\n          el.rawAttrsMap['v-once']\r\n        );\r\n        return genElement(el, state)\r\n      }\r\n      return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\r\n    } else {\r\n      return genStatic(el, state)\r\n    }\r\n  }\r\n\r\n  function genIf (\r\n    el,\r\n    state,\r\n    altGen,\r\n    altEmpty\r\n  ) {\r\n    el.ifProcessed = true; // avoid recursion\r\n    return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\r\n  }\r\n\r\n  function genIfConditions (\r\n    conditions,\r\n    state,\r\n    altGen,\r\n    altEmpty\r\n  ) {\r\n    if (!conditions.length) {\r\n      return altEmpty || '_e()'\r\n    }\r\n\r\n    var condition = conditions.shift();\r\n    if (condition.exp) {\r\n      return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\r\n    } else {\r\n      return (\"\" + (genTernaryExp(condition.block)))\r\n    }\r\n\r\n    // v-if with v-once should generate code like (a)?_m(0):_m(1)\r\n    function genTernaryExp (el) {\r\n      return altGen\r\n        ? altGen(el, state)\r\n        : el.once\r\n          ? genOnce(el, state)\r\n          : genElement(el, state)\r\n    }\r\n  }\r\n\r\n  function genFor (\r\n    el,\r\n    state,\r\n    altGen,\r\n    altHelper\r\n  ) {\r\n    var exp = el.for;\r\n    var alias = el.alias;\r\n    var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\r\n    var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\r\n\r\n    if (state.maybeComponent(el) &&\r\n      el.tag !== 'slot' &&\r\n      el.tag !== 'template' &&\r\n      !el.key\r\n    ) {\r\n      state.warn(\r\n        \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\r\n        \"v-for should have explicit keys. \" +\r\n        \"See https://vuejs.org/guide/list.html#key for more info.\",\r\n        el.rawAttrsMap['v-for'],\r\n        true /* tip */\r\n      );\r\n    }\r\n\r\n    el.forProcessed = true; // avoid recursion\r\n    return (altHelper || '_l') + \"((\" + exp + \"),\" +\r\n      \"function(\" + alias + iterator1 + iterator2 + \"){\" +\r\n        \"return \" + ((altGen || genElement)(el, state)) +\r\n      '})'\r\n  }\r\n\r\n  function genData$2 (el, state) {\r\n    var data = '{';\r\n\r\n    // directives first.\r\n    // directives may mutate the el's other properties before they are generated.\r\n    var dirs = genDirectives(el, state);\r\n    if (dirs) { data += dirs + ','; }\r\n\r\n    // key\r\n    if (el.key) {\r\n      data += \"key:\" + (el.key) + \",\";\r\n    }\r\n    // ref\r\n    if (el.ref) {\r\n      data += \"ref:\" + (el.ref) + \",\";\r\n    }\r\n    if (el.refInFor) {\r\n      data += \"refInFor:true,\";\r\n    }\r\n    // pre\r\n    if (el.pre) {\r\n      data += \"pre:true,\";\r\n    }\r\n    // record original tag name for components using \"is\" attribute\r\n    if (el.component) {\r\n      data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\r\n    }\r\n    // module data generation functions\r\n    for (var i = 0; i < state.dataGenFns.length; i++) {\r\n      data += state.dataGenFns[i](el);\r\n    }\r\n    // attributes\r\n    if (el.attrs) {\r\n      data += \"attrs:\" + (genProps(el.attrs)) + \",\";\r\n    }\r\n    // DOM props\r\n    if (el.props) {\r\n      data += \"domProps:\" + (genProps(el.props)) + \",\";\r\n    }\r\n    // event handlers\r\n    if (el.events) {\r\n      data += (genHandlers(el.events, false)) + \",\";\r\n    }\r\n    if (el.nativeEvents) {\r\n      data += (genHandlers(el.nativeEvents, true)) + \",\";\r\n    }\r\n    // slot target\r\n    // only for non-scoped slots\r\n    if (el.slotTarget && !el.slotScope) {\r\n      data += \"slot:\" + (el.slotTarget) + \",\";\r\n    }\r\n    // scoped slots\r\n    if (el.scopedSlots) {\r\n      data += (genScopedSlots(el, el.scopedSlots, state)) + \",\";\r\n    }\r\n    // component v-model\r\n    if (el.model) {\r\n      data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\r\n    }\r\n    // inline-template\r\n    if (el.inlineTemplate) {\r\n      var inlineTemplate = genInlineTemplate(el, state);\r\n      if (inlineTemplate) {\r\n        data += inlineTemplate + \",\";\r\n      }\r\n    }\r\n    data = data.replace(/,$/, '') + '}';\r\n    // v-bind dynamic argument wrap\r\n    // v-bind with dynamic arguments must be applied using the same v-bind object\r\n    // merge helper so that class/style/mustUseProp attrs are handled correctly.\r\n    if (el.dynamicAttrs) {\r\n      data = \"_b(\" + data + \",\\\"\" + (el.tag) + \"\\\",\" + (genProps(el.dynamicAttrs)) + \")\";\r\n    }\r\n    // v-bind data wrap\r\n    if (el.wrapData) {\r\n      data = el.wrapData(data);\r\n    }\r\n    // v-on data wrap\r\n    if (el.wrapListeners) {\r\n      data = el.wrapListeners(data);\r\n    }\r\n    return data\r\n  }\r\n\r\n  function genDirectives (el, state) {\r\n    var dirs = el.directives;\r\n    if (!dirs) { return }\r\n    var res = 'directives:[';\r\n    var hasRuntime = false;\r\n    var i, l, dir, needRuntime;\r\n    for (i = 0, l = dirs.length; i < l; i++) {\r\n      dir = dirs[i];\r\n      needRuntime = true;\r\n      var gen = state.directives[dir.name];\r\n      if (gen) {\r\n        // compile-time directive that manipulates AST.\r\n        // returns true if it also needs a runtime counterpart.\r\n        needRuntime = !!gen(el, dir, state.warn);\r\n      }\r\n      if (needRuntime) {\r\n        hasRuntime = true;\r\n        res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\" + (dir.isDynamicArg ? dir.arg : (\"\\\"\" + (dir.arg) + \"\\\"\"))) : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\r\n      }\r\n    }\r\n    if (hasRuntime) {\r\n      return res.slice(0, -1) + ']'\r\n    }\r\n  }\r\n\r\n  function genInlineTemplate (el, state) {\r\n    var ast = el.children[0];\r\n    if (el.children.length !== 1 || ast.type !== 1) {\r\n      state.warn(\r\n        'Inline-template components must have exactly one child element.',\r\n        { start: el.start }\r\n      );\r\n    }\r\n    if (ast && ast.type === 1) {\r\n      var inlineRenderFns = generate(ast, state.options);\r\n      return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\r\n    }\r\n  }\r\n\r\n  function genScopedSlots (\r\n    el,\r\n    slots,\r\n    state\r\n  ) {\r\n    // by default scoped slots are considered \"stable\", this allows child\r\n    // components with only scoped slots to skip forced updates from parent.\r\n    // but in some cases we have to bail-out of this optimization\r\n    // for example if the slot contains dynamic names, has v-if or v-for on them...\r\n    var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {\r\n      var slot = slots[key];\r\n      return (\r\n        slot.slotTargetDynamic ||\r\n        slot.if ||\r\n        slot.for ||\r\n        containsSlotChild(slot) // is passing down slot from parent which may be dynamic\r\n      )\r\n    });\r\n\r\n    // #9534: if a component with scoped slots is inside a conditional branch,\r\n    // it's possible for the same component to be reused but with different\r\n    // compiled slot content. To avoid that, we generate a unique key based on\r\n    // the generated code of all the slot contents.\r\n    var needsKey = !!el.if;\r\n\r\n    // OR when it is inside another scoped slot or v-for (the reactivity may be\r\n    // disconnected due to the intermediate scope variable)\r\n    // #9438, #9506\r\n    // TODO: this can be further optimized by properly analyzing in-scope bindings\r\n    // and skip force updating ones that do not actually use scope variables.\r\n    if (!needsForceUpdate) {\r\n      var parent = el.parent;\r\n      while (parent) {\r\n        if (\r\n          (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||\r\n          parent.for\r\n        ) {\r\n          needsForceUpdate = true;\r\n          break\r\n        }\r\n        if (parent.if) {\r\n          needsKey = true;\r\n        }\r\n        parent = parent.parent;\r\n      }\r\n    }\r\n\r\n    var generatedSlots = Object.keys(slots)\r\n      .map(function (key) { return genScopedSlot(slots[key], state); })\r\n      .join(',');\r\n\r\n    return (\"scopedSlots:_u([\" + generatedSlots + \"]\" + (needsForceUpdate ? \",null,true\" : \"\") + (!needsForceUpdate && needsKey ? (\",null,false,\" + (hash(generatedSlots))) : \"\") + \")\")\r\n  }\r\n\r\n  function hash(str) {\r\n    var hash = 5381;\r\n    var i = str.length;\r\n    while(i) {\r\n      hash = (hash * 33) ^ str.charCodeAt(--i);\r\n    }\r\n    return hash >>> 0\r\n  }\r\n\r\n  function containsSlotChild (el) {\r\n    if (el.type === 1) {\r\n      if (el.tag === 'slot') {\r\n        return true\r\n      }\r\n      return el.children.some(containsSlotChild)\r\n    }\r\n    return false\r\n  }\r\n\r\n  function genScopedSlot (\r\n    el,\r\n    state\r\n  ) {\r\n    var isLegacySyntax = el.attrsMap['slot-scope'];\r\n    if (el.if && !el.ifProcessed && !isLegacySyntax) {\r\n      return genIf(el, state, genScopedSlot, \"null\")\r\n    }\r\n    if (el.for && !el.forProcessed) {\r\n      return genFor(el, state, genScopedSlot)\r\n    }\r\n    var slotScope = el.slotScope === emptySlotScopeToken\r\n      ? \"\"\r\n      : String(el.slotScope);\r\n    var fn = \"function(\" + slotScope + \"){\" +\r\n      \"return \" + (el.tag === 'template'\r\n        ? el.if && isLegacySyntax\r\n          ? (\"(\" + (el.if) + \")?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\r\n          : genChildren(el, state) || 'undefined'\r\n        : genElement(el, state)) + \"}\";\r\n    // reverse proxy v-slot without scope on this.$slots\r\n    var reverseProxy = slotScope ? \"\" : \",proxy:true\";\r\n    return (\"{key:\" + (el.slotTarget || \"\\\"default\\\"\") + \",fn:\" + fn + reverseProxy + \"}\")\r\n  }\r\n\r\n  function genChildren (\r\n    el,\r\n    state,\r\n    checkSkip,\r\n    altGenElement,\r\n    altGenNode\r\n  ) {\r\n    var children = el.children;\r\n    if (children.length) {\r\n      var el$1 = children[0];\r\n      // optimize single v-for\r\n      if (children.length === 1 &&\r\n        el$1.for &&\r\n        el$1.tag !== 'template' &&\r\n        el$1.tag !== 'slot'\r\n      ) {\r\n        var normalizationType = checkSkip\r\n          ? state.maybeComponent(el$1) ? \",1\" : \",0\"\r\n          : \"\";\r\n        return (\"\" + ((altGenElement || genElement)(el$1, state)) + normalizationType)\r\n      }\r\n      var normalizationType$1 = checkSkip\r\n        ? getNormalizationType(children, state.maybeComponent)\r\n        : 0;\r\n      var gen = altGenNode || genNode;\r\n      return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType$1 ? (\",\" + normalizationType$1) : ''))\r\n    }\r\n  }\r\n\r\n  // determine the normalization needed for the children array.\r\n  // 0: no normalization needed\r\n  // 1: simple normalization needed (possible 1-level deep nested array)\r\n  // 2: full normalization needed\r\n  function getNormalizationType (\r\n    children,\r\n    maybeComponent\r\n  ) {\r\n    var res = 0;\r\n    for (var i = 0; i < children.length; i++) {\r\n      var el = children[i];\r\n      if (el.type !== 1) {\r\n        continue\r\n      }\r\n      if (needsNormalization(el) ||\r\n          (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\r\n        res = 2;\r\n        break\r\n      }\r\n      if (maybeComponent(el) ||\r\n          (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\r\n        res = 1;\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  function needsNormalization (el) {\r\n    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\r\n  }\r\n\r\n  function genNode (node, state) {\r\n    if (node.type === 1) {\r\n      return genElement(node, state)\r\n    } else if (node.type === 3 && node.isComment) {\r\n      return genComment(node)\r\n    } else {\r\n      return genText(node)\r\n    }\r\n  }\r\n\r\n  function genText (text) {\r\n    return (\"_v(\" + (text.type === 2\r\n      ? text.expression // no need for () because already wrapped in _s()\r\n      : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\r\n  }\r\n\r\n  function genComment (comment) {\r\n    return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\r\n  }\r\n\r\n  function genSlot (el, state) {\r\n    var slotName = el.slotName || '\"default\"';\r\n    var children = genChildren(el, state);\r\n    var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\r\n    var attrs = el.attrs || el.dynamicAttrs\r\n      ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\r\n          // slot props are camelized\r\n          name: camelize(attr.name),\r\n          value: attr.value,\r\n          dynamic: attr.dynamic\r\n        }); }))\r\n      : null;\r\n    var bind$$1 = el.attrsMap['v-bind'];\r\n    if ((attrs || bind$$1) && !children) {\r\n      res += \",null\";\r\n    }\r\n    if (attrs) {\r\n      res += \",\" + attrs;\r\n    }\r\n    if (bind$$1) {\r\n      res += (attrs ? '' : ',null') + \",\" + bind$$1;\r\n    }\r\n    return res + ')'\r\n  }\r\n\r\n  // componentName is el.component, take it as argument to shun flow's pessimistic refinement\r\n  function genComponent (\r\n    componentName,\r\n    el,\r\n    state\r\n  ) {\r\n    var children = el.inlineTemplate ? null : genChildren(el, state, true);\r\n    return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\r\n  }\r\n\r\n  function genProps (props) {\r\n    var staticProps = \"\";\r\n    var dynamicProps = \"\";\r\n    for (var i = 0; i < props.length; i++) {\r\n      var prop = props[i];\r\n      var value = transformSpecialNewlines(prop.value);\r\n      if (prop.dynamic) {\r\n        dynamicProps += (prop.name) + \",\" + value + \",\";\r\n      } else {\r\n        staticProps += \"\\\"\" + (prop.name) + \"\\\":\" + value + \",\";\r\n      }\r\n    }\r\n    staticProps = \"{\" + (staticProps.slice(0, -1)) + \"}\";\r\n    if (dynamicProps) {\r\n      return (\"_d(\" + staticProps + \",[\" + (dynamicProps.slice(0, -1)) + \"])\")\r\n    } else {\r\n      return staticProps\r\n    }\r\n  }\r\n\r\n  // #3895, #4268\r\n  function transformSpecialNewlines (text) {\r\n    return text\r\n      .replace(/\\u2028/g, '\\\\u2028')\r\n      .replace(/\\u2029/g, '\\\\u2029')\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  // these keywords should not appear inside expressions, but operators like\r\n  // typeof, instanceof and in are allowed\r\n  var prohibitedKeywordRE = new RegExp('\\\\b' + (\r\n    'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n    'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n    'extends,finally,continue,debugger,function,arguments'\r\n  ).split(',').join('\\\\b|\\\\b') + '\\\\b');\r\n\r\n  // these unary operators should not be used as property/method names\r\n  var unaryOperatorsRE = new RegExp('\\\\b' + (\r\n    'delete,typeof,void'\r\n  ).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\r\n\r\n  // strip strings in expressions\r\n  var stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n\r\n  // detect problematic expressions in a template\r\n  function detectErrors (ast, warn) {\r\n    if (ast) {\r\n      checkNode(ast, warn);\r\n    }\r\n  }\r\n\r\n  function checkNode (node, warn) {\r\n    if (node.type === 1) {\r\n      for (var name in node.attrsMap) {\r\n        if (dirRE.test(name)) {\r\n          var value = node.attrsMap[name];\r\n          if (value) {\r\n            var range = node.rawAttrsMap[name];\r\n            if (name === 'v-for') {\r\n              checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), warn, range);\r\n            } else if (name === 'v-slot' || name[0] === '#') {\r\n              checkFunctionParameterExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\r\n            } else if (onRE.test(name)) {\r\n              checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\r\n            } else {\r\n              checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (node.children) {\r\n        for (var i = 0; i < node.children.length; i++) {\r\n          checkNode(node.children[i], warn);\r\n        }\r\n      }\r\n    } else if (node.type === 2) {\r\n      checkExpression(node.expression, node.text, warn, node);\r\n    }\r\n  }\r\n\r\n  function checkEvent (exp, text, warn, range) {\r\n    var stripped = exp.replace(stripStringRE, '');\r\n    var keywordMatch = stripped.match(unaryOperatorsRE);\r\n    if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\r\n      warn(\r\n        \"avoid using JavaScript unary operator as property name: \" +\r\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim()),\r\n        range\r\n      );\r\n    }\r\n    checkExpression(exp, text, warn, range);\r\n  }\r\n\r\n  function checkFor (node, text, warn, range) {\r\n    checkExpression(node.for || '', text, warn, range);\r\n    checkIdentifier(node.alias, 'v-for alias', text, warn, range);\r\n    checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\r\n    checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\r\n  }\r\n\r\n  function checkIdentifier (\r\n    ident,\r\n    type,\r\n    text,\r\n    warn,\r\n    range\r\n  ) {\r\n    if (typeof ident === 'string') {\r\n      try {\r\n        new Function((\"var \" + ident + \"=_\"));\r\n      } catch (e) {\r\n        warn((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())), range);\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkExpression (exp, text, warn, range) {\r\n    try {\r\n      new Function((\"return \" + exp));\r\n    } catch (e) {\r\n      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\r\n      if (keywordMatch) {\r\n        warn(\r\n          \"avoid using JavaScript keyword as property name: \" +\r\n          \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim()),\r\n          range\r\n        );\r\n      } else {\r\n        warn(\r\n          \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\r\n          \"    \" + exp + \"\\n\\n\" +\r\n          \"  Raw expression: \" + (text.trim()) + \"\\n\",\r\n          range\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkFunctionParameterExpression (exp, text, warn, range) {\r\n    try {\r\n      new Function(exp, '');\r\n    } catch (e) {\r\n      warn(\r\n        \"invalid function parameter expression: \" + (e.message) + \" in\\n\\n\" +\r\n        \"    \" + exp + \"\\n\\n\" +\r\n        \"  Raw expression: \" + (text.trim()) + \"\\n\",\r\n        range\r\n      );\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  var range = 2;\r\n\r\n  function generateCodeFrame (\r\n    source,\r\n    start,\r\n    end\r\n  ) {\r\n    if ( start === void 0 ) start = 0;\r\n    if ( end === void 0 ) end = source.length;\r\n\r\n    var lines = source.split(/\\r?\\n/);\r\n    var count = 0;\r\n    var res = [];\r\n    for (var i = 0; i < lines.length; i++) {\r\n      count += lines[i].length + 1;\r\n      if (count >= start) {\r\n        for (var j = i - range; j <= i + range || end > count; j++) {\r\n          if (j < 0 || j >= lines.length) { continue }\r\n          res.push((\"\" + (j + 1) + (repeat$1(\" \", 3 - String(j + 1).length)) + \"|  \" + (lines[j])));\r\n          var lineLength = lines[j].length;\r\n          if (j === i) {\r\n            // push underline\r\n            var pad = start - (count - lineLength) + 1;\r\n            var length = end > count ? lineLength - pad : end - start;\r\n            res.push(\"   |  \" + repeat$1(\" \", pad) + repeat$1(\"^\", length));\r\n          } else if (j > i) {\r\n            if (end > count) {\r\n              var length$1 = Math.min(end - count, lineLength);\r\n              res.push(\"   |  \" + repeat$1(\"^\", length$1));\r\n            }\r\n            count += lineLength + 1;\r\n          }\r\n        }\r\n        break\r\n      }\r\n    }\r\n    return res.join('\\n')\r\n  }\r\n\r\n  function repeat$1 (str, n) {\r\n    var result = '';\r\n    if (n > 0) {\r\n      while (true) { // eslint-disable-line\r\n        if (n & 1) { result += str; }\r\n        n >>>= 1;\r\n        if (n <= 0) { break }\r\n        str += str;\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  /*  */\r\n\r\n\r\n\r\n  function createFunction (code, errors) {\r\n    try {\r\n      return new Function(code)\r\n    } catch (err) {\r\n      errors.push({ err: err, code: code });\r\n      return noop\r\n    }\r\n  }\r\n\r\n  function createCompileToFunctionFn (compile) {\r\n    var cache = Object.create(null);\r\n\r\n    return function compileToFunctions (\r\n      template,\r\n      options,\r\n      vm\r\n    ) {\r\n      options = extend({}, options);\r\n      var warn$$1 = options.warn || warn;\r\n      delete options.warn;\r\n\r\n      /* istanbul ignore if */\r\n      {\r\n        // detect possible CSP restriction\r\n        try {\r\n          new Function('return 1');\r\n        } catch (e) {\r\n          if (e.toString().match(/unsafe-eval|CSP/)) {\r\n            warn$$1(\r\n              'It seems you are using the standalone build of Vue.js in an ' +\r\n              'environment with Content Security Policy that prohibits unsafe-eval. ' +\r\n              'The template compiler cannot work in this environment. Consider ' +\r\n              'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\r\n              'templates into render functions.'\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // check cache\r\n      var key = options.delimiters\r\n        ? String(options.delimiters) + template\r\n        : template;\r\n      if (cache[key]) {\r\n        return cache[key]\r\n      }\r\n\r\n      // compile\r\n      var compiled = compile(template, options);\r\n\r\n      // check compilation errors/tips\r\n      {\r\n        if (compiled.errors && compiled.errors.length) {\r\n          if (options.outputSourceRange) {\r\n            compiled.errors.forEach(function (e) {\r\n              warn$$1(\r\n                \"Error compiling template:\\n\\n\" + (e.msg) + \"\\n\\n\" +\r\n                generateCodeFrame(template, e.start, e.end),\r\n                vm\r\n              );\r\n            });\r\n          } else {\r\n            warn$$1(\r\n              \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\r\n              compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\r\n              vm\r\n            );\r\n          }\r\n        }\r\n        if (compiled.tips && compiled.tips.length) {\r\n          if (options.outputSourceRange) {\r\n            compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\r\n          } else {\r\n            compiled.tips.forEach(function (msg) { return tip(msg, vm); });\r\n          }\r\n        }\r\n      }\r\n\r\n      // turn code into functions\r\n      var res = {};\r\n      var fnGenErrors = [];\r\n      res.render = createFunction(compiled.render, fnGenErrors);\r\n      res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\r\n        return createFunction(code, fnGenErrors)\r\n      });\r\n\r\n      // check function generation errors.\r\n      // this should only happen if there is a bug in the compiler itself.\r\n      // mostly for codegen development use\r\n      /* istanbul ignore if */\r\n      {\r\n        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\r\n          warn$$1(\r\n            \"Failed to generate render function:\\n\\n\" +\r\n            fnGenErrors.map(function (ref) {\r\n              var err = ref.err;\r\n              var code = ref.code;\r\n\r\n              return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\r\n          }).join('\\n'),\r\n            vm\r\n          );\r\n        }\r\n      }\r\n\r\n      return (cache[key] = res)\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  function createCompilerCreator (baseCompile) {\r\n    return function createCompiler (baseOptions) {\r\n      function compile (\r\n        template,\r\n        options\r\n      ) {\r\n        var finalOptions = Object.create(baseOptions);\r\n        var errors = [];\r\n        var tips = [];\r\n\r\n        var warn = function (msg, range, tip) {\r\n          (tip ? tips : errors).push(msg);\r\n        };\r\n\r\n        if (options) {\r\n          if (options.outputSourceRange) {\r\n            // $flow-disable-line\r\n            var leadingSpaceLength = template.match(/^\\s*/)[0].length;\r\n\r\n            warn = function (msg, range, tip) {\r\n              var data = { msg: msg };\r\n              if (range) {\r\n                if (range.start != null) {\r\n                  data.start = range.start + leadingSpaceLength;\r\n                }\r\n                if (range.end != null) {\r\n                  data.end = range.end + leadingSpaceLength;\r\n                }\r\n              }\r\n              (tip ? tips : errors).push(data);\r\n            };\r\n          }\r\n          // merge custom modules\r\n          if (options.modules) {\r\n            finalOptions.modules =\r\n              (baseOptions.modules || []).concat(options.modules);\r\n          }\r\n          // merge custom directives\r\n          if (options.directives) {\r\n            finalOptions.directives = extend(\r\n              Object.create(baseOptions.directives || null),\r\n              options.directives\r\n            );\r\n          }\r\n          // copy other options\r\n          for (var key in options) {\r\n            if (key !== 'modules' && key !== 'directives') {\r\n              finalOptions[key] = options[key];\r\n            }\r\n          }\r\n        }\r\n\r\n        finalOptions.warn = warn;\r\n\r\n        var compiled = baseCompile(template.trim(), finalOptions);\r\n        {\r\n          detectErrors(compiled.ast, warn);\r\n        }\r\n        compiled.errors = errors;\r\n        compiled.tips = tips;\r\n        return compiled\r\n      }\r\n\r\n      return {\r\n        compile: compile,\r\n        compileToFunctions: createCompileToFunctionFn(compile)\r\n      }\r\n    }\r\n  }\r\n\r\n  /*  */\r\n\r\n  // `createCompilerCreator` allows creating compilers that use alternative\r\n  // parser/optimizer/codegen, e.g the SSR optimizing compiler.\r\n  // Here we just export a default compiler using the default parts.\r\n  var createCompiler = createCompilerCreator(function baseCompile (\r\n    template,\r\n    options\r\n  ) {\r\n    var ast = parse(template.trim(), options);\r\n    if (options.optimize !== false) {\r\n      optimize(ast, options);\r\n    }\r\n    var code = generate(ast, options);\r\n    return {\r\n      ast: ast,\r\n      render: code.render,\r\n      staticRenderFns: code.staticRenderFns\r\n    }\r\n  });\r\n\r\n  /*  */\r\n\r\n  var ref$1 = createCompiler(baseOptions);\r\n  var compile = ref$1.compile;\r\n  var compileToFunctions = ref$1.compileToFunctions;\r\n\r\n  /*  */\r\n\r\n  // check whether current browser encodes a char inside attribute values\r\n  var div;\r\n  function getShouldDecode (href) {\r\n    div = div || document.createElement('div');\r\n    div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\r\n    return div.innerHTML.indexOf('&#10;') > 0\r\n  }\r\n\r\n  // #3663: IE encodes newlines inside attribute values while other browsers don't\r\n  var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\r\n  // #6828: chrome encodes content in a[href]\r\n  var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\r\n\r\n  /*  */\r\n\r\n  var idToTemplate = cached(function (id) {\r\n    var el = query(id);\r\n    return el && el.innerHTML\r\n  });\r\n\r\n  var mount = Vue.prototype.$mount;\r\n  Vue.prototype.$mount = function (\r\n    el,\r\n    hydrating\r\n  ) {\r\n    el = el && query(el);\r\n\r\n    /* istanbul ignore if */\r\n    if (el === document.body || el === document.documentElement) {\r\n      warn(\r\n        \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\r\n      );\r\n      return this\r\n    }\r\n\r\n    var options = this.$options;\r\n    // resolve template/el and convert to render function\r\n    if (!options.render) {\r\n      var template = options.template;\r\n      if (template) {\r\n        if (typeof template === 'string') {\r\n          if (template.charAt(0) === '#') {\r\n            template = idToTemplate(template);\r\n            /* istanbul ignore if */\r\n            if (!template) {\r\n              warn(\r\n                (\"Template element not found or is empty: \" + (options.template)),\r\n                this\r\n              );\r\n            }\r\n          }\r\n        } else if (template.nodeType) {\r\n          template = template.innerHTML;\r\n        } else {\r\n          {\r\n            warn('invalid template option:' + template, this);\r\n          }\r\n          return this\r\n        }\r\n      } else if (el) {\r\n        template = getOuterHTML(el);\r\n      }\r\n      if (template) {\r\n        /* istanbul ignore if */\r\n        if (config.performance && mark) {\r\n          mark('compile');\r\n        }\r\n\r\n        var ref = compileToFunctions(template, {\r\n          outputSourceRange: \"development\" !== 'production',\r\n          shouldDecodeNewlines: shouldDecodeNewlines,\r\n          shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\r\n          delimiters: options.delimiters,\r\n          comments: options.comments\r\n        }, this);\r\n        var render = ref.render;\r\n        var staticRenderFns = ref.staticRenderFns;\r\n        options.render = render;\r\n        options.staticRenderFns = staticRenderFns;\r\n\r\n        /* istanbul ignore if */\r\n        if (config.performance && mark) {\r\n          mark('compile end');\r\n          measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\r\n        }\r\n      }\r\n    }\r\n    return mount.call(this, el, hydrating)\r\n  };\r\n\r\n  /**\r\n   * Get outerHTML of elements, taking care\r\n   * of SVG elements in IE as well.\r\n   */\r\n  function getOuterHTML (el) {\r\n    if (el.outerHTML) {\r\n      return el.outerHTML\r\n    } else {\r\n      var container = document.createElement('div');\r\n      container.appendChild(el.cloneNode(true));\r\n      return container.innerHTML\r\n    }\r\n  }\r\n\r\n  Vue.compile = compileToFunctions;\r\n\r\n  return Vue;\r\n\r\n}));\r\n"],"file":"../js/vue.js"}